/*
 * @autor: MultiFour
 * @version: 5.0.3
 */

// "use strict";

window.downloadFile = function(sUrl, fileName) {
    if (window.downloadFile.isChrome || window.downloadFile.isSafari) {
        var link = document.createElement('a');
        link.href = sUrl;

        if (link.download !== undefined){
            link.download = fileName;
        }

        if (document.createEvent) {
            var e = document.createEvent('MouseEvents');
            e.initEvent('click' ,true ,true);
            link.dispatchEvent(e);
            return true;
        }
    } else {
        var query = '?download';
        window.open(sUrl + query);
    }
};
window.downloadFile.isChrome = navigator.userAgent.toLowerCase().indexOf('chrome') != -1;
window.downloadFile.isSafari = navigator.userAgent.toLowerCase().indexOf('safari') != -1;
/**
 * wrap only one elements
 * @param elms {HTMLElement}
 */
HTMLElement.prototype.wrap = function(elms) {
    var child = this;

    var parent  = elms.parentNode;
    var sibling = elms.nextSibling;

    child.appendChild(elms);

    if (sibling) {
        parent.insertBefore(child, sibling);
    } else {
        parent.appendChild(child);
    }
};
/**
 * unwrap only one elements
 */
HTMLElement.prototype.unWrapOne = function(mode) {
    var child = this.children[0];

    var parent = this.parentElement;
    var sibling = this.nextSibling;

    try {
        //if (child.hasAttribute('style')) {
        //    child.removeAttribute('style');
        //}
        //
        //if (this.dataset.style) {
        //    child.setAttribute( 'style', this.dataset.style );
        //}
    }
    catch (e) {
        console.log(this, child);
    }


    if (sibling) {
        parent.insertBefore(child, sibling);
    } else {
        parent.appendChild(child);
    }
    parent.removeChild(this);
};

function firstUp(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function firstDown(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}

function replaceSpace(str) {
    return str.replace(/\s/ig, '_');
}

function toPageName(str) {
    return str.replace(/_/ig, ' ');
}

function cloneArray(arr) {
    return arr.slice(0, arr.length);
}

function htmlencode(str) {
    return str.replace(/[&<>"']/g, function($0) {
        return "&" + {"&":"amp", "<":"lt", ">":"gt", '"':"quot", "'":"#39"}[$0] + ";";
    });
}

function htmldecode(str) {
    return str.replace(/&amp;|&lt;|&gt;|&quot;|&#39;/g, function($0) {
        return {"&amp;":"&", "&lt;":"<", "&gt;":">", '&quot;':"\"", "&#39;":"'"}[$0];
    });
}

function addSlashes(str) {
    return str.replace(/[\*\(\)\[\]+]/g, function($0) {
        return {"*":"\\*", "(":"\\(", ")":"\\)", "[":"\\[", "]":"\\]", "+":"\\+"}[$0];
    });
}

function clearTimeStamp(str) {
    var imgPattern = new RegExp('\\?t=[0-9]*', 'i');
    if (imgPattern.test(str))
        str = str.replace(imgPattern, '');
    return str;
}

function simulateCssEvent(type, path, doc){
    doc = doc || document;
    var id = 'simulatedStyle';

    var generateEvent = function(selector){
        var style = "";
        $.get(path, function (data) {
            var regex = new RegExp(selector, "g");
            var text = data.replace(regex, ".spr-hover");
            text = text.replace(/@import[^\n]*/g, "");
            style += text + "\n";
            $(doc).find("head").append("<style id=" + id + ">" + style + "</style>");
        });
    };

    var stopEvent = function(){
        $(doc).find("#"+id).remove();
    };

    switch(type) {
        case "hover":
            return generateEvent(":hover");
        case "stop":
            return stopEvent();
    }
}

function getDomPath(el) {
    var stack = [];
    while ( el.parentNode != null && !el.classList.contains('section-item')) {
        var sibCount = 0;
        var sibIndex = 0;
        if (!el.classList.contains('buttons-control')) {
            var elBase = el;
            if (el.parentElement.classList.contains('buttons-control')) {
                elBase = el.parentElement;
            }
            for (var i = 0; i < elBase.parentNode.childNodes.length; i++) {
                var sib = elBase.parentNode.childNodes[i];
                if (sib.nodeName == elBase.nodeName) {
                    if (sib === elBase) {
                        sibIndex = sibCount;
                    }
                    sibCount++;
                }
            }
            if (el.hasAttribute('id') && el.id != '') {
                stack.unshift(el.nodeName.toLowerCase() + '#' + el.id);
            } else if (sibCount > 1) {
                stack.unshift(el.nodeName.toLowerCase() + ':nth-child(' + (sibIndex + 1) + ')');
            } else {
                stack.unshift(el.nodeName.toLowerCase());
            }
        }
        el = el.parentNode;
    }

    return stack.join(' > ');
}

//crutch for ie
(function () {
    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent( 'CustomEvent' );
        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();
var Core = function () {
    Core.prototype.iframe = document.getElementById('main');
    Core.prototype.windowIframe = Core.prototype.iframe.contentWindow;
    Core.prototype.documentIframe = Core.prototype.windowIframe.document;
    Core.prototype.main = Core.prototype.documentIframe.querySelector('.main');
    Core.prototype.globalScript = Core.prototype.documentIframe.querySelector('#global-script');
    Core.prototype.body = document.body;
    Core.prototype.popupThumb = document.getElementById('modal-thumb');
    // Core.prototype.collapsePopupThumbEl = document.getElementById('collapse-popup-thumb');
    Core.prototype.modalContainer = document.getElementById('modal-project-container');
    Core.prototype.modalFormContainer = document.getElementById('modal-form-container');
    Core.prototype.builderStyle = document.getElementById('builder-style');
    Core.prototype.preloader = document.querySelector('.supra-preloader');
};

Core.prototype = {
    _leftNav: {}
    , _controlPanel: {}
    , _fixedRightSide: false
    , wrapDrag: null
    , _triggerDownload: false
    , _triggerExport: false
    , _triggerImport: false

    , iframe: null
    , windowIframe: null
    , documentIframe: null
    , main: null
    , body: null

    , pages: null
    , pagesToload: []
    , sections: null
    , projectSections: {}

    , style: null

    , activePageObject: null

    /**
     * Popups thumbnails
     */
    , popupThumb: null
    , popupThumbArray: []
    // , collapsePopupThumbEl: null

    , mediaButtonsOnControlStylePL2: {}
    , mediaButtonsOnControlStylePL2Trigger: {
        desktop: false
        , tablet: false
        , mobile: false
    }

    , globalStyle: null
    , globalStyleElements: []

    , _panelShown: false

    , leftPanel: null


    , _triggerElementEnter: false
    , _triggerElementEnter2: false
    , activeEditElement: null
    , typographyEnter: false
    , _triggeredOffElement: null

    /**
     * Viewing
     */
    , _modeViewing: {
        desctop: {
            width: '100%'
            , height: '100vh'
        }
        , tablet: {
            width: '1024px'
            , height: '768px'
        }
        , mobile: {
            width: '375px'
            , height: '667px'
        }
    }
    , _activeModeViewing: 'desctop'

    /**
     * Variables for drag & drop sections
     */
    , _dropImg: null
    , _dropX: 0
    , _dropY: 0
    , _touchY: 0
    , sectionClicked: null
    , _nextPageForHistory: null
    , _triggerClickSection: false
    , _sectionDropped: false
    , _touch: false
    , _markerSection: null
    , _triggerMoveSectionInMain: false
    , _triggerClickSectionInMain: false
    , _lockEndDrag: false
    , _draggableSection: null
    , _elCurGrabbing: null

    // for work with magnific if mode is 'edit-typography'
    , editingText: false


    , sectionsName: []
    , _pages: []
    , _idActivePage: 0
    , _triggerInitProject: false
    , gMaps: []
    , plugins: []

    /**
     * Forms
     */
    , activeFormModal: null
    , editingForm: null
    , forms: {}


    , _style: {}
    , defaultStyleType: 'light'
    , editingStyle: 'light'
    , modalContainerStyleHtml: null
    , arrayFontsOnProject: []
    , modalContainer: null
    , modalFormContainer: null

    /**
     * History project
     */
    , arrayPrevStep: []
    , arrayNextStep: []
    , triggerUndo: false
    , triggerRedo: false
    , triggerImport: false

    , _arrEditorText: []
    , _arrListenersEditElement: []
    , _arrListenersEditElementModal: []
    , _undo: null
    , _redo: null

    /**
     * Indicating existence some applications in project
     */
    , _videoBg: false
    , _owlGallery: false
    , _formSection: false
    , _smooth: false
    , _parallax: false
    , _datepicker: false
    , _filefield: false
    , _countup: false
    , _instafeed: false
    , _twitterfeed: false
    , _countdown: false
    , _magnific: false
    , _aos: false
    , _masonryFilter: false

    , _magnificScript: ''

    , _wrapEvetActiveClickEditElement: []

    , drGAndDropEl: null

    , getPageMode: function() {
        var page = this.getActivePageObject().getDOMSelf();
        var mode = page.className.match(/(page-mode-[^ ]*)\s?/i);
        return mode && mode[1] ? mode[1] : null;
    }
    , trigger: function(eName, context, Obj) {
        Obj = Obj || {'detail': ''};
        var event = new CustomEvent(
            eName
            , Obj
        );
        context.dispatchEvent(event);
    }
    /**
     * Return current page object
     * @return {Page}
     */
    , getActivePageObject: function () {
        return this.activePageObject;
    }

    , removeWrapDrag: function(pageHTML) {
        if (!(pageHTML instanceof HTMLElement || pageHTML instanceof this.windowIframe.HTMLElement)) {
            throw new TypeError("Expected type of HTMLElement");
        }

        var drag = this.documentIframe.querySelector('.wrap-drag');
        if(drag) {
            pageHTML.removeChild(drag);
            pageHTML.classList.remove('loading');
        }
    }
    , addWrapDrag: function(pageHTML) {
        if (!(pageHTML instanceof HTMLElement || pageHTML instanceof this.windowIframe.HTMLElement)) {
            throw new TypeError("Expected type of HTMLElement");
        }

        pageHTML.classList.add('loading');
        pageHTML.innerHTML = '<div class="wrap-drag">'
            + '<div class="point-to-drag d-flex flex-column justify-content-center align-items-center">'
            + '<img class="supra" alt="Supra" src="images/builder-icons/mode-plus.svg" height="56px" width="56px" />'
            + '<p>Start new projects<br/>'
            + 'by dragging sections from the left panel</p>'
            + '</div>'
            + '</div>';
    }
    /**
     * @param item {HTMLElement} element which will be activated
     * @param className {string} class of element which will be deactivated
     * @public
     */
    , selection: function(item, className, classActive) {
        classActive = classActive || 'active';
        className = className || '.active';
        if (!item.classList.contains(classActive)) {
            if (item.parentElement.querySelector(className)) {
                item.parentElement.querySelector(className).classList.remove(classActive);
            }
            item.classList.add(classActive);
        }
    }
    /**
     * @param item {HTMLElement} element which will be activated or deactivated
     * @private
     */
    , _selectionWithSelfUnactive: function(item) {
        if (!item.classList.contains('active')) {
            item.classList.add('active');
        } else {
            item.classList.remove('active');
            item.blur();
        }
    }

    , _selfUnactive: function(item) {
        if (item.classList.contains('active')) {
            item.classList.remove('active');
            item.blur();
        }
    }

    , detectLeftButton: function(evt) {
        evt = evt || window.event;
        if ("buttons" in evt) {
            return evt.buttons == 1;
        }
        var button = evt.which || evt.button;
        return button == 1;
    }
    /**
     * Find paren element for child el
     * @param el {HTMLElement}
     * @param arrElIdentif {Array} exemple ['buttons-control', 'buttons-control-form', 'ul']
     * @returns {*} HTMLElement or NULL
     */
    , findParent: function(el, arrElIdentif) {
        var DOM = el;
        for (var indx in arrElIdentif) {
            while (
            DOM !== null
            && DOM.classList !== undefined
            && !DOM.classList.contains(arrElIdentif[indx])
                ) {
                DOM = DOM.parentElement;
            }

            if (DOM === null) {
                DOM = el;
                while (DOM !== null && DOM.tagName.toLowerCase() !== arrElIdentif[indx]) {
                    DOM = DOM.parentElement;
                }
                if (DOM === null && arrElIdentif.length > (indx*1+1)) {
                    DOM = el;
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        return DOM;
    }
    , createPopupThumb: function(popup) {
        var toggle = 'modal';
        var active = '';
        if (popup.classList.contains('modal-alert')) {
            toggle = 'alert';
            if (popup.classList.contains('show')) active = ' active';
        }
        if (popup.classList.contains('modal-panel')) {
            toggle = 'panel';
            if (popup.classList.contains('show')) active = ' active';
        }
        var item = document.createElement('div');
        item.className = 'item' + active;
        item.dataset.toggle = toggle;
        item.dataset.target = '#' + popup.id;
        item.dataset.id = this.popupThumbArray.length;
        item.style.backgroundImage = "url('" + popup.parentElement.dataset.img + "')";
        this.popupThumbArray.push({
            id: popup.id
            , toggle: toggle
            , selfDom: popup
        });
        this.popupThumb.querySelector('.container-thumb').appendChild(item);
        this.popupThumb.classList.add('collapse-thumb');

        item.addEventListener('click', this._showPopupThumb.bind(this, item));
    }
    , _initThumbnails: function() {
        var popups = this.main.querySelectorAll('.modal, .modal-panel, .modal-alert');
        Array.prototype.forEach.call(popups, this.createPopupThumb.bind(this));
    }
    , setEventListenersToModals: function () {
        var _this = this;
        var modalShowHide = function (e) {
            var item = _this.popupThumb.querySelector('[data-target="#' + e.target.id + '"]');
            if (item) item.classList.toggle('active');
        };

        //alert
        _this.windowIframe.jQuery(_this.documentIframe).on('open.alert', modalShowHide);
        _this.windowIframe.jQuery(_this.documentIframe).on('close.alert', modalShowHide);
        //panel
        _this.windowIframe.jQuery(_this.documentIframe).on('open.panel', modalShowHide);
        _this.windowIframe.jQuery(_this.documentIframe).on('close.panel', modalShowHide);

        //modal
        _this.windowIframe.jQuery(_this.documentIframe).on('hide.bs.modal', modalShowHide);
        _this.windowIframe.jQuery(_this.documentIframe).on('show.bs.modal', modalShowHide);
    }
    , _showPopupThumb: function(item) {
        var _this = this;
        _this.removeNowrapSuperStructure(_this.documentIframe, null, 'without-spr-child');
        if (item.dataset.toggle === 'modal' && item.classList.contains('active')) {
            _this.windowIframe.jQuery( item.dataset.target ).modal( 'hide' );
            item.classList.remove( 'active' );
        } else if (item.dataset.toggle === 'modal' && !item.classList.contains('active')) {
            var el = item;

            var modalShow = function(el) {
                var $modal = _this.windowIframe.jQuery( el.dataset.target );
                var li = $modal[0].parentElement;

                $modal.modal( 'show' );
                _this.activeFormModal = $modal[0];

                $modal.on('hide.bs.modal', function() {
                    // el.classList.remove( 'active' );
                    $modal.off('hide.bs.modal');
                    li.removeAttribute('style');
                });

                li.style.display = 'block';
                li.style.position = 'fixed';
                li.style.top = '0';
                li.style.right = '0';
                li.style.bottom = '0';
                li.style.left = '0';
                li.style.zIndex = '1000050';

                var bg = $modal[0].querySelector('.bg');
                var map = $modal[0].querySelector('.g-map');
                if (bg.classList.contains('bg-video')) {
                    $modal.on('shown.bs.modal', function(){
                        bg.querySelector('video' ).style.height = 'initial';
                        $modal.off('shown.bs.modal');
                    });
                }
                if (map) {
                    $modal.on('shown.bs.modal', function(){
                        _this.reloadScript(li);
                        $modal.off('shown.bs.modal');
                    });
                }
                // el.classList.add( 'active' );
            };

            //for another opened modal
            var active = _this.popupThumb.querySelector('.item.active[data-toggle=modal]');
            if (active) {
                var $activeModal = _this.windowIframe.jQuery( active.dataset.target );

                $activeModal.on('hidden.bs.modal',function() {
                    modalShow(el);
                    $activeModal.off('hidden.bs.modal');
                });

                $activeModal.modal( 'hide' );
                active.classList.remove( 'active' );
                return;
            }

            modalShow(el);
        } else if (item.dataset.toggle === 'alert' && item.classList.contains('active')) {
            var $alert = _this.windowIframe.jQuery( item.dataset.target );
            $alert.removeClass('show');

            item.classList.remove( 'active' );
        } else if (item.dataset.toggle === 'alert' && !item.classList.contains('active')) {
            var $alert = _this.windowIframe.jQuery( item.dataset.target );
            $alert.addClass('show');

            var modalAlert = _this.main.querySelector(item.dataset.target);
            modalAlert.classList.add('show');
            item.classList.add( 'active' );
        } else if (item.dataset.toggle === 'panel' && item.classList.contains('active')) {
            var $panel = _this.windowIframe.jQuery( item.dataset.target );
            $panel.removeClass('show');

            item.classList.remove( 'active' );
        } else if (item.dataset.toggle === 'panel' && !item.classList.contains('active')) {
            var $panel = _this.windowIframe.jQuery( item.dataset.target );
            $panel.addClass('show');

            var modalPanel = _this.main.querySelector(item.dataset.target);
            modalPanel.classList.add('show');
            item.classList.add( 'active' );
        }
    }
    , _initCollapsePopupThumb: function() {
        this.collapsePopupThumbEl.addEventListener('click', function() {
            this.popupThumb.classList.toggle('collapse-thumb');
        }.bind(this));
    }
    , copySectionWithNavTab: function (navTabs, sIndx, cloneSection) {
        var section = cloneSection.children[0];
        var tabs = navTabs.parentElement;
        var titleTabs = navTabs.querySelectorAll('li a');
        var contentTabs = tabs.querySelector('.tab-content').querySelectorAll('.tab-pane');
        var sectionId = section.id.replace(/-/g,'_') + '_' + sIndx;

        Array.prototype.forEach.call(titleTabs, function (el, indx) {
            el.href = '#' + sectionId + '--' + indx;
            el.setAttribute('aria-controls', sectionId + '--' + indx);
            el.id = sectionId + '--' + indx + '-tab';
            contentTabs[indx].id = sectionId + '--' + indx;
            contentTabs[indx].setAttribute('aria-labelledby', sectionId + '--' + indx + '-tab');
        });
    }
    , copySectionWithAccordion: function (accordion, sIndx, cloneSection) {
        var section = cloneSection.children[0];
        var titleAccordion = accordion.querySelectorAll('.content-box');
        var sectionId = section.id.replace(/-/g,'_') + '_' + sIndx;
        accordion.id = sectionId + '-accordion';

        Array.prototype.forEach.call(titleAccordion, function (el, indx) {
            var title = el.querySelector('a[data-toggle=collapse]');
            var collapse = el.querySelector('.collapse');
            title.href = '#' + sectionId + '--' + indx;
            title.dataset.parent = '#' + sectionId + '-accordion';
            title.setAttribute('aria-controls', sectionId + '--' + indx);
            collapse.id = sectionId + '--' + indx;
        });
    }
    , reloadScript: function(container) {
        var _this = this;
        var scripts = container.querySelectorAll('script');

        // var parallax = container.querySelector('.parallax');
        // if (parallax && _this.windowIframe.rellax) {
        //     _this.windowIframe.rellax.destroy();
        //     _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
        //         center: true
        //     });
        // } else if (parallax && !_this.windowIframe.rellax) {
        //     _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
        //         center: true
        //     });
        // }

        Array.prototype.forEach.call(scripts, function (script) {
            var scriptHtml = script.innerHTML;
            var newScript = document.createElement('script');
            newScript.setAttribute('type', 'text/javascript');
            var next = script.nextSibling;
            var parent = script.parentElement;
            parent.removeChild(script);
            if (next) {
                parent.insertBefore(newScript, next);
            } else {
                parent.appendChild(newScript);
            }
            newScript.innerHTML = scriptHtml;
        });

        var smooth = container.querySelectorAll('a.smooth');
        Array.prototype.forEach.call(smooth, function (a) {
            _this.windowIframe.jQuery(a).smoothScroll({
                speed: 800
                , exclude: ['.spr-outline-control', '.spr-oc-show']
                , excludeWithin: ['.spr-outline-control', '.spr-oc-show']
            });
        });

        if (this.windowIframe.AOS) this.windowIframe.AOS.refresh();

        this.reloadGlobalScript();
    }
    , reloadGlobalScript: function() {
        var scriptHtml = this.globalScript.innerHTML;
        var newScript = document.createElement('script');
        newScript.id = 'global-script';
        newScript.setAttribute('type', 'text/javascript');
        var next = this.globalScript.nextSibling;
        var parent = this.globalScript.parentElement;
        parent.removeChild(this.globalScript);
        if (next) {
            parent.insertBefore(newScript, next);
        } else {
            parent.appendChild(newScript);
        }
        newScript.innerHTML = scriptHtml;
        Core.prototype.globalScript = newScript;
    }
    /**
     * evetns for styling parent elements
     */
    , _eventMoseEnterOnChildActive: function(e) {
        var parent = this;
        parent.classList.add('spr-child-active');
    }
    , _evetnMoseLeaveOnChildActive: function(e) {
        var parent = this;
        if (parent.classList.contains('spr-child-active')) {
            parent.classList.remove('spr-child-active');
        }
    }
    /**
     * for styling parent elements without buttons control
     * @param li
     * @private
     */
    , stylingWrapParent: function(li) {
        var _this = this;
        var elements = li.querySelectorAll('.buttons-control, .buttons-control-form');
        Array.prototype.forEach.call(elements, function(el){
            var parent = controls.findParent(el.parentElement.parentElement, ['buttons-control', 'buttons-control-form']);
            if (parent) {
                el.classList.add('child-event');

                el.addEventListener('mouseenter', _this._eventMoseEnterOnChildActive.bind(parent));
            }
        });
    }
    /**
     * to build control buttons for elements anew
     * @param wrap
     */
    , rebuildControl: function(wrap) {
        var _this = this;
        if (wrap.classList.contains('spr-oc-show')) {
            wrap.classList.remove('spr-oc-show');

            var li = _this.findParent(wrap, ['section-item']);
            var controlGroup = li.querySelector(
                '.wrap-control-element.nowrap'
                + ', .wrap-control.nowrap'
                + ', .wrap-control-element-icons.nowrap'
                + ', .wrap-control-element-typography.nowrap'
            );
            if (controlGroup) {
                var arrControl    = JSON.parse( controlGroup.dataset.controls );
                var arrTypography = controlGroup.dataset.typography
                    ? JSON.parse( controlGroup.dataset.typography ) : null;
                var arrSettings = controlGroup.dataset.settings
                    ? JSON.parse( controlGroup.dataset.settings ) : null;
                var arrStyle = controlGroup.dataset.style
                    ? JSON.parse( controlGroup.dataset.style ) : null;
                var draggableMode = controlGroup.dataset.draggableMode
                    ? JSON.parse( controlGroup.dataset.draggableMode ) : null;
                var context = controlGroup.dataset.context
                    ? JSON.parse( controlGroup.dataset.context ) : null;
                var classControls = controlGroup.className.replace( /btn-group|nowrap/ig, '' );
                builder.addWrapEvventMouseEnterEditEelement.call(
                    builder
                    , li
                    , {
                        controlsElements: arrControl
                        , typography: arrTypography
                        , elementSettings: arrSettings
                        , elementStyle: arrStyle
                        , draggableMode: draggableMode
                        , context: context
                    }
                    , classControls
                    , wrap
                );

                var pageMode = _this.getPageMode();
                pageMode = pageMode === 'edit-style' ? 'edit-elements' : pageMode;

                builder.setControlsElementOnSection( wrap, li, pageMode, false );
            }
            return;
        }
        var wrapControl = wrap.querySelectorAll('.wrap-control, .wrap-control-element');
        Array.prototype.forEach.call(wrapControl, function(element) {
            var arrControl = JSON.parse(element.dataset.controls);
            var objSettings = element.dataset.settings ?
                JSON.parse(element.dataset.settings) : null;
            var parent = element.parentElement;
            var el = parent.children[0];
            var ObjControl = null;

            if (element.dataset.objControl === 'editor-text') {
                ObjControl = new EditorText(el);
            }

            if (element.classList.contains('wrap-control')) {
                el = parent;
            } else {
                var section = _this.findParent(parent, ['section-item', 'modal-dialog']);
                //_this.correctingPosition(parent, section);
            }

            parent.removeChild(element);
            parent.appendChild(new ControlDOMSections(
                {
                    controlsElements: arrControl
                    , settingsSection: objSettings
                }
                , el, element.className, ObjControl
            ));
        });
    }
    , convertImgToSvg: function (path, el, callback) {
        var $img = jQuery(el);
        var attributes = $img.prop("attributes");
        $.get(path, function (data) {
            // Get the SVG tag, ignore the rest
            var $svg = jQuery(data).find('svg');

            // Remove any invalid XML tags
            $svg = $svg.removeAttr('xmlns:a');

            // Loop through IMG attributes and apply on SVG
            $.each(attributes, function () {
                $svg.attr(this.name, this.value);
            });

            // Replace IMG with SVG
            $img.replaceWith($svg);

            if (callback) callback($svg);
        }, 'xml');
    }
    , convertAllImagesToSvg: function (context) {
        var _this = this;
        context = context || this.documentIframe;
        var images = context.querySelectorAll('img[src$=".svg"]:not(.supra)');
        [].forEach.call(images, function (img) {
            _this.convertImgToSvg(img.getAttribute('src'), img);
        });
    }
    /**
     * Need to seek and remove all the nowrap buttons controls,
     * because when one element overlap another then two groups of controls has been added to the section
     * @param li
     * @private
     */
    //TODO: duplicated some functions in clearControlElements
    , removeNowrapSuperStructure: function(li, typeElements, mode) {
        var _this = this;
        typeElements = typeElements ||
            '.wrap-control.nowrap'
            + ', .wrap-control-element.nowrap'
            + ', .wrap-control-element-icons.nowrap'
            + ', .wrap-control-element-typography.nowrap';

        var editedElements = li.querySelectorAll('.edit-typography, .spr-outline-control, .spr-child-active, .spr-oc-show, [class*=spr-p-]');
        if (editedElements.length > 0) {
            Array.prototype.forEach.call(editedElements, function(el) {
                    el.classList.remove('spr-outline-control');
                    if(mode !== 'without-spr-child') el.classList.remove('spr-child-active');
                    el.classList.remove('spr-oc-show');
                    el.classList.remove('edit-typography');
                    el.classList.remove('spr-wout');
                    el.setAttribute('class', el.getAttribute('class').replace(/\s?spr-p-[0-9]*(\s|$)/, '$1') );

                if (el.hasAttribute('contenteditable')) {
                    // _this.windowIframe.getSelection().removeAllRanges();
                    el.removeAttribute('contenteditable');
                }
            });
        }
        Core.prototype.editingText = false;
        Core.prototype.activeEditElement = null;
        Core.prototype._triggerElementEnter = false;

        if (Core.prototype.drGAndDropEl) {
            Core.prototype.drGAndDropEl.destroy();
            Core.prototype.drGAndDropEl = null;
        }

        var contEdit = li.querySelectorAll('[contenteditable]');
        if (contEdit.length > 0) {
            Array.prototype.forEach.call(contEdit, function(el) {
                el.removeAttribute('contenteditable');
            });
        }

        var controlGroups = li.querySelectorAll(typeElements);
        if (controlGroups.length > 0) {
            Array.prototype.forEach.call(controlGroups, function(el) {
                el.parentElement.removeChild(el);
            });
        }

        var breadcrumbs = document.body.querySelector('.breadcrumbs');
        if (breadcrumbs)
            breadcrumbs.parentElement.removeChild(breadcrumbs);

        _this.documentIframe.removeEventListener('click', _this._clickOnDocumentIframeEditElementMode);

        if (_this._arrEditorText.length > 0) {
            _this._arrEditorText.forEach(function (editor) {
                editor.editor.mouseLeave();
                //editor.el.removeEventListener('mouseenter', editor.editor.mouseEnter);
                if (editor.el.parentElement)
                    editor.el.parentElement.removeEventListener('click', editor.editor.clickIngalleryEditTagA);
                editor.el.removeEventListener('mouseup', editor.editor.mouseUp);
                editor.el.removeEventListener('touchend', editor.editor.touchEnd);
                editor.el.removeEventListener('keydown', editor.editor.keyDown);
                editor.el.removeEventListener('mouseleave', editor.editor.mouseLeave);
                editor.el.removeEventListener('paste', editor.editor.paste);
            });
            Core.prototype._arrEditorText = [];
        }

        this._triggeredOffElement = null;
    }
    , cloneOwlGallery: function(container) {
        var cloneSection = container.cloneNode(true);
        var gallery = cloneSection.querySelector('.spr-gallery');
        if (gallery) {
            var newGallery = gallery.cloneNode(true);
            this.removeOwlSuperstructure(newGallery);
            gallery.parentNode.insertBefore(newGallery, gallery);
            gallery.parentNode.removeChild(gallery);
            container.parentNode.insertBefore(cloneSection, container.nextSibling);
        }
        return cloneSection;
    }
    , clearGalleryOnPage: function(page) {
        var _this = this;
        var galleries = page.querySelectorAll('.spr-gallery');
        Array.prototype.forEach.call(galleries, function (gallery) {
            _this.removeOwlSuperstructure(gallery);
        });
    }
    , removeOwlSuperstructure: function(gallery) {
        gallery.classList.remove('owl-carousel');
        gallery.classList.remove('owl-theme');
        gallery.classList.remove('owl-loaded');
        var items = gallery.querySelectorAll('.owl-item:not(.cloned) .item');
        gallery.innerHTML = '';
        Array.prototype.forEach.call(items, function(element) {
            gallery.appendChild(element);
        });
    }
    , clearInstafeed: function(page) {
        var _this = this;
        var instafeeds = page.querySelectorAll('.instafeed');
        Array.prototype.forEach.call(instafeeds, function (instafeed) {
            instafeed.innerHTML = '';
        });
    }
    , _refreshParallax: function(target) {
        var _this = this;
        target = target || this.getActivePageObject().getDOMSelf();
        this._clearParallaxSuperstructure(target);

        if (_this.windowIframe.rellax) {
            _this.windowIframe.rellax.destroy();
        }

        if (target.querySelector('.parallax')) {
            _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
                center: true
            });
        }
    }
    , _clearParallaxSuperstructure: function(page) {
        var bgArray = page.querySelectorAll('.parallax');
        Array.prototype.forEach.call(bgArray, function(parallax){
            // delete parallax.dataset.rellaxSpeed;
            parallax.style.removeProperty('transform');
        });

    }
    /**
     * For cleaning pages from animating class
     * @param page
     * @private
     */
    , _clearAnimationByClass: function(page) {
        var circularCharts = page.querySelectorAll('.circular-play');
        Array.prototype.forEach.call(circularCharts, function(circularChart){
            circularChart.setAttribute('class', circularChart.getAttribute('class').replace(/\s?circular-play/, ''));
        });

    }
    , count: 0
    , depth: 4
    , cloneObject: function(Obj) {
        var _this = this;
        this.count++;
        if (Obj instanceof Array) {
            var clone = [];
            Obj.forEach(function(el, item){
                clone[item] = _this._checkElmtsForCloneObj(_this, el);
            });
        } else {
            var clone = {};
            for (var item in Obj) {
                clone[item] = _this._checkElmtsForCloneObj(_this, Obj[item]);
            }
        }

        this.count--;

        return clone;
    }
    , _checkElmtsForCloneObj: function(_this, Obj) {
        var result = null;
        if (
            Obj instanceof HTMLElement
            || Obj instanceof DocumentFragment
            || Obj instanceof this.windowIframe.HTMLElement
            || Obj instanceof this.windowIframe.DocumentFragment
        )
            result = Obj;
        else if (Obj instanceof Array && this.count > this.depth)
            result = cloneArray(Obj);
        else if (Obj instanceof Array && this.count <= this.depth)
            result = _this.cloneObject(Obj);
        else if (Obj && typeof(Obj) === "object")
            result = _this.cloneObject(Obj);
        else
            result = Obj;
        return result;
    }
    , fromCamelCase: function(input) {
        var matches = input.match(/([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)/g);
        if (matches) {
            matches = matches.map(function (el) {
                return firstUp(el);
            });
            return matches.join(" ");
        } else {
            return input;
        }
    }
    , uniqueName: function(name, arrNames) {
        arrNames = arrNames.sort(function(a, b){
            if (a.split('--')[1] && b.split('--')[1] && a.split('--')[1]*1 > b.split('--')[1]*1) {
                return 1;
            } else if (a.split('--')[1] && b.split('--')[1] && a.split('--')[1]*1 < b.split('--')[1]*1) {
                return -1;
            } else if (a > b) {
                return 1;
            } else if (a < b) {
                return -1;
            }

            return 0;
        });

        arrNames.forEach(function(itemName){
            var newName = name.split('--');
            if (newName[1] && itemName === name) {
                name = newName[0] + '--' + ((newName[1] * 1) + 1);
            } else if (itemName === name) {
                name = newName[0] + '--0';
            }
        });

        return name;
    }
    //TODO: this crutch need to refactoring
    , uniqueSectionID: function (pageObj, li) {
        var section = li.children[0];
        var style = li.querySelector('style');

        while (pageObj.sections[section.id] !== undefined) {
            var args = section.id.split('--');
            if (args[1]) {
                section.id = args[0] + '--' + ((args[1] * 1) + 1);
            } else {
                section.id = args[0] + '--0';
            }

        }

        if (section.id.split('--')[1]) {
            var pattern = new RegExp('#' + section.id.split('--')[0] + '(--[0-9]*)?\\s', 'gim');
            style.innerHTML = style.innerHTML.replace(pattern, '#' + section.id + ' ');
        }
    }
    , _belongsTo: function (el, toElement) {
        while(toElement && toElement !== el) {
            toElement = toElement.parentElement;
        }

        if (el === toElement) {
            return true;
        }

        return false;
    }
    , childOf: function(c, p) {
        while((c=c.parentNode)&&c!==p);
        return !!c;
    }
    , setPosition: function(el, wrap, elementStylePosition, zIndex) {
        var computedStyle = window.getComputedStyle(el, null);
        var elementStyleTop = computedStyle.getPropertyValue("top");
        var elementStyleRight = computedStyle.getPropertyValue("right");
        var elementStyleBottom = computedStyle.getPropertyValue("bottom");
        var elementStyleLeft = computedStyle.getPropertyValue("left");
        var elementStyleFloat = computedStyle.getPropertyValue("float");

        wrap.style.position = elementStylePosition;
        wrap.style.top = elementStyleTop;
        wrap.style.right = elementStyleRight;
        wrap.style.bottom = elementStyleBottom;
        wrap.style.left = elementStyleLeft;
        wrap.style.zIndex = zIndex;
        var style = wrap.getAttribute('style');
        wrap.setAttribute('style', style + 'float: ' + elementStyleFloat + ';');
    }
    /**
     * Adding new form to forms data and set new form id
     * @param form {HTMLElement}
     * @param section {HTMLElement}
     */
    , addNewForm: function(form, section, oldSection, copyElement) {
        var sectionId = section.id;
        if (copyElement) {
            oldSection = section.id;
            sectionId = this.uniqueName(sectionId, Object.keys(this.forms));
        }
        var condition = oldSection ? '#' + oldSection + '-form' : '\\.(?:contact|subscribe)_form';

        form.id = sectionId + '-form';
        Core.prototype.forms[sectionId] = {sendMode: 'simple-mail-php'};

        var script = section.parentElement.querySelector('script');
        var patternForm = new RegExp(condition, 'img');
        script.innerHTML = script.innerHTML.replace(patternForm, '#' + sectionId + '-form');

        form.querySelector('button[type=submit]').addEventListener('click', function(e){
            e.stopPropagation();
            e.preventDefault();
        });
    }
    /**
     * Adding new google map to gMaps data and set new id
     * @param gMap {HTMLElement}
     * @param section {HTMLElement}
     */
    , addNewGMap: function(gMap, section) {
        var id = section.id.split('--')[0] + '-map';
        id = this.uniqueName(id, this.gMaps);
        gMap.id = id;

        Core.prototype.gMaps.push(id);
        return id;
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , changeIdGMapInScript: function(script, id, newId) {
        newId = newId || id;
        var funcId = newId.replace(/-/ig, '_');
        var oldId = id.replace(/-/ig, '_');

        var patternMapId = new RegExp('(google\\.maps\\.Map\\(document\\.getElementById\\(\')(?:' + id + '|map)','im');
        var patternMapFuncInit = new RegExp('(initialize)(?:_' + oldId + '\\s*\\(|\\s*\\()','img');
        script.innerHTML = script.innerHTML.replace(patternMapFuncInit, '$1_' + funcId + '(');
        script.innerHTML = script.innerHTML.replace(patternMapId, '$1' + newId);
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , copyFunctionInitGmap: function(script, id, newId) {
        var funcId = newId.replace(/-/ig, '_');
        var oldId = id.replace(/-/ig, '_');

        var contextStart = funcId + '\\([\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?' + funcId + '\\(';

        var patternMapFuncInit = new RegExp('(initialize)(_' + oldId + '.*{)([\\s\\S]*?)(initialize)(_' + oldId + '.*)(\\(\\);)','im');
        var init = script.innerHTML.match(patternMapFuncInit);
        script.innerHTML = script.innerHTML.replace(patternMapFuncInit, '$1$2$3$4$5$6\n\nfunction '
            + init[1] + '_' + funcId + '() {\n' + init[3] + init[4] + '_' + funcId + init[6]);

        var patternMapId = new RegExp('(' + contextStart + 'google\\.maps\\.Map\\(document\\.getElementById\\(\')[^\']*(' + contextEnd + ')','im');
        script.innerHTML = script.innerHTML.replace(patternMapId, '$1' + newId + '$2');
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     */
    , deleteFunctionInitGmap: function(script, id) {
        var funcId = id.replace(/-/ig, '_');

        var contextStart = funcId + '\\([\\s\\S]*?';
        var contextEnd = funcId + '\\(\\);';

        var patternMapFuncInit = new RegExp('function[\\w\\s]*' + contextStart + contextEnd,'im');
        var match = script.innerHTML.match(patternMapFuncInit);
        script.innerHTML = script.innerHTML.replace(patternMapFuncInit, '');
        return match;
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , changeIdCountUpInScript: function(script, id, newId) {
        newId = newId || id;
        var varId = newId.replace(/-/ig, '_');
        var oldId = id.replace(/-/ig, '_');

        var patternVariable = new RegExp('variableCountUp|' + oldId,'igm');
        var patternCountUpId = new RegExp('\\.counter-up|#' + id,'img');
        script.innerHTML = script.innerHTML.replace(patternVariable, varId);
        script.innerHTML = script.innerHTML.replace(patternCountUpId, '#' + newId);
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , changeIdCircularPlayInScript: function(script, id, newId) {
        newId = newId || id;
        var varId = newId.replace(/-/ig, '_');
        var oldId = id.replace(/-/ig, '_');

        var patternVariable = new RegExp('variableChart|' + oldId,'igm');
        var patternCircularPlay = new RegExp('\\.circular-chart|#' + id + '\\s\\.circular-chart','img');
        script.innerHTML = script.innerHTML.replace(patternVariable, varId);
        script.innerHTML = script.innerHTML.replace(patternCircularPlay, '#' + newId + ' .circular-chart');
    }
    /**
     * Adding new google map to gMaps data and set new id
     * @param gMap {HTMLElement}
     * @param section {HTMLElement}
     */
    //TODO: change gMaps to global array of sectionsId
    , addNewCountDown: function(countDown, section) {
        var id = section.id.split('--')[0] + '-countdown';
        id = this.uniqueName(id, this.gMaps);
        countDown.id = id;

        Core.prototype.gMaps.push(id);
        return id;
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , changeIdCountDownInScript: function(script, id, newId) {
        newId = newId || id;
        var varId = newId.replace(/-/ig, '_');
        var oldId = id.replace(/-/ig, '_');

        var patternVariable = new RegExp('\\$countDown|\\$' + oldId,'igm');
        var patternCountDownId = new RegExp('(\\$\\(\\\')(?:\\.countdown|#' + id + ')','img');
        script.innerHTML = script.innerHTML.replace(patternVariable, '$' + varId);
        script.innerHTML = script.innerHTML.replace(patternCountDownId, '$1#' + newId);
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , copyCountDownInside: function(script, id, newId) {
        var varId = newId.replace(/-/ig, '_');
        var oldId = id.replace(/-/ig, '_');

        var contextStart = '\\/\\/start spr-countdown[\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?\\);\\/\\/end spr-countdown';

        var patternNewCountDown = new RegExp(contextStart + '\\$' + oldId + contextEnd,'igm');
        var newCountDown = script.innerHTML.match(patternNewCountDown);
        var newCountDownStr = '';
        if (newCountDown) {
            newCountDownStr = newCountDown[0];
            var patternVariable = new RegExp('\\$countDown|\\$' + oldId,'igm');
            var patternCountDownId = new RegExp('(\\$\\(\\\')(?:\\.spr-countdown|#' + id + ')','img');
            newCountDownStr = newCountDownStr.replace(patternVariable, '$' + varId);
            newCountDownStr = newCountDownStr.replace(patternCountDownId, '#' + newId);
        }

        script.innerHTML = script.innerHTML + '\n' + newCountDownStr;
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     */
    , deleteFunctionInitCountDown: function(script, id) {
        var oldId = id.replace(/-/ig, '_');

        var contextStart = '\\/\\/start spr-countdown[\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?\\);\\/\\/end spr-countdown';

        var patternNewCountDown = new RegExp(contextStart + '\\$' + oldId + contextEnd,'igm');
        script.innerHTML = script.innerHTML.replace(patternNewCountDown, '');
    }
    //TODO: make universal script
    /**
     * Adding new google map to gMaps data and set new id
     * @param gMap {HTMLElement}
     * @param section {HTMLElement}
     */
    , addNewInstafeed: function(plugin, section) {
        var id = section.id.split('--')[0] + '-instafeed';
        id = this.uniqueName(id, this.plugins);
        plugin.id = id;

        Core.prototype.plugins.push(id);
        return id;
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , changeIdInstafeedInScript: function(script, id, newId) {
        newId = newId || id;

        var patternPluginId = new RegExp('(?:instafeed-target|' + id + ')','img');
        script.innerHTML = script.innerHTML.replace(patternPluginId, newId);
    }
    /**
     * Adding new google map to gMaps data and set new id
     * @param gMap {HTMLElement}
     * @param section {HTMLElement}
     */
    , addNewTwitterfeed: function(plugin, section) {
        var id = section.id.split('--')[0] + '-twitterfeed';
        id = this.uniqueName(id, this.plugins);
        plugin.id = id;

        Core.prototype.plugins.push(id);
        return id;
    }
    /**
     *
     * @param script {HTMLElement}
     * @param id {string}
     * @param newId {string}
     */
    , changeIdTwitterfeedInScript: function(script, id, newId) {
        newId = newId || id;

        var patternPluginId = new RegExp('(?:twitterfeed-target|' + id + ')','img');
        script.innerHTML = script.innerHTML.replace(patternPluginId, newId);
    }
    , applyMagnificPopup: function(DOMElement) {
        var _this = this;
        if (DOMElement.tagName !== 'A') DOMElement = DOMElement.parentElement;
        if (DOMElement.tagName === 'A'
            && DOMElement.href.search(/player\.vimeo\.com|embed/i) === -1
            && DOMElement.href.search(/vimeo\.com|youtube\.com/i) !== -1) {
            // if (!DOMElement.classList.contains('video-popup')) DOMElement.classList.add('video-popup');
            // if (DOMElement.classList.contains('image-popup')) DOMElement.classList.remove('image-popup');
            // if (DOMElement.classList.contains('smooth')) DOMElement.classList.remove('smooth');
            _this.windowIframe.jQuery(DOMElement).magnificPopup({
                type: 'iframe',
                key: 'video-key',
                iframe: {
                    patterns: {
                        youtube: {
                            index: 'www.youtube.com/',
                            id: 'v=',
                            src: 'https://www.youtube.com/embed/%id%?autoplay=1'

                        }
                        , vimeo: {

                            index: 'vimeo.com/',
                            id: '/',
                            src: 'https://player.vimeo.com/video/%id%?autoplay=1'
                        }
                    }
                },
                disableOn: function() {
                    if(_this.editingText) {
                        return false;
                    }
                    return true;
                }
            });

            var li = _this.findParent(DOMElement, ['section-item', 'modal-confirm']);
            var script = li.querySelector('script');
            if (script.innerHTML.search(/\/\/magnific/im) === -1) {
                script.innerHTML += '\n//magnific'
                    + '\n//------------------------------------------------------------------------'
                    + '\n//                    MAGNIFIC POPUP(LIGHTBOX) SETTINGS'
                    + '\n//------------------------------------------------------------------------'
                    + '\n'
                    + '\n$(\'.video-popup\').magnificPopup({'
                    + '\n\ttype: \'iframe\''
                    + '\n//delete'
                    + '\n,'
                    + 'disableOn: function() {'
                    + 'if(window.editingText) {'
                    + 'return false;'
                    + '}'
                    + 'return true;'
                    + '}'
                    + '\n//deleteend'
                    + '\n});'
                    + '\n//magnificend';
            }
        }
    }
    , applyMagnificPopupImage: function(DOMElement) {
        var _this = this;
        if (DOMElement.tagName !== 'A') DOMElement = DOMElement.parentElement;
        if (DOMElement.tagName === 'A'
            && DOMElement.href.search(/\.(png|jpg|jpeg|gif|svg)/i) !== -1) {
            // if (!DOMElement.classList.contains('image-popup')) DOMElement.classList.add('image-popup');
            // if (DOMElement.classList.contains('video-popup')) DOMElement.classList.remove('video-popup');
            // if (DOMElement.classList.contains('smooth')) DOMElement.classList.remove('smooth');
            _this.windowIframe.jQuery(DOMElement).magnificPopup({
                type: 'image',
                key: 'some-key',
                image: {
                    titleSrc: function (item) {
                        return item.el.find('img').attr('alt');
                    }
                },
                disableOn: function() {
                    if(_this.editingText) {
                        return false;
                    }
                    return true;
                }
            });

            var li = _this.findParent(DOMElement, ['section-item', 'modal-confirm']);
            var script = li.querySelector('script');
            if (script.innerHTML.search(/\/\/magnific/im) === -1) {
                script.innerHTML += '\n//magnific'
                    + '\n//------------------------------------------------------------------------'
                    + '\n//                    MAGNIFIC POPUP(LIGHTBOX) SETTINGS'
                    + '\n//------------------------------------------------------------------------'
                    + '\n'
                    + '\n$(\'.image-popup\').magnificPopup({'
                    + '\n\ttype: \'image\','
                    + '\n\timage: {\n' +
                    '                    titleSrc: function (item) {\n' +
                    '                        return item.el.find(\'img\').attr(\'alt\');\n' +
                    '                    }\n' +
                    '                }'
                    + '\n//delete'
                    + '\n,'
                    + 'disableOn: function() {'
                    + 'if(window.editingText) {'
                    + 'return false;'
                    + '}'
                    + 'return true;'
                    + '}'
                    + '\n//deleteend'
                    + '\n});'
                    + '\n//magnificend';
            }
        }
    }
    , applyMagnificPopupGallery: function (gallery) {
        var _this = this;
        this.windowIframe.jQuery(gallery).magnificPopup({
            delegate: '.video-popup, .image-popup', // the selector for gallery item
            type: 'image',
            gallery: {
                enabled: true
            },
            image: {
                titleSrc: function (item) {
                    return item.el.find('img').attr('alt');
                }
            },
            callbacks: {
                open: function() {
                    _this.windowIframe.jQuery(gallery).trigger('stop.owl.autoplay');
                },
                close: function() {
                    _this.windowIframe.jQuery(gallery).trigger('play.owl.autoplay');
                }
            }
        });
    }
    , _reloadMagnific: function(page) {
        var _this = this;
        var magnificGalleryItems = page.querySelectorAll('.gallery .video-popup, .gallery .image-popup');
        var magnificGallery = page.querySelectorAll('.gallery');
        if (magnificGallery) {
            Array.prototype.forEach.call(magnificGallery, function(gallery) {
                _this.applyMagnificPopupGallery(gallery);
            });
        }

        var magnific = page.querySelectorAll('.video-popup');
        if (magnific) {
            Array.prototype.forEach.call(magnific, function(anchor) {
                if ([].indexOf.call(magnificGalleryItems, anchor) !== -1) return;
                _this.applyMagnificPopup(anchor);
            });
        }

        var magnificImg = page.querySelectorAll('.image-popup');
        if (magnificImg) {
            Array.prototype.forEach.call(magnificImg, function(anchor) {
                if ([].indexOf.call(magnificGalleryItems, anchor) !== -1) return;
                _this.applyMagnificPopup(anchor);
            });
        }
    }
    , _reloadVideoBg: function (page, mode) {
        var _this = this;
        var vides = page.querySelectorAll('.bg-video');
        if (vides) {
            Array.prototype.forEach.call(vides, function (vide, indx) {
                if (mode === 'run') {
                    if (_this.windowIframe.jQuery(vide).data('vide')) {
                        _this.windowIframe.jQuery(vide).data('vide').destroy();
                    }
                    vide.innerHTML = '';
                    _this.windowIframe.jQuery(vide).vide();
                } else if (mode === 'reload') {
                    var video = vide.querySelector('video');
                    if (video.paused)
                        video.play();

                } else if (mode === 'clear') {
                    vide.innerHTML = '';
                }
            });
        }
    }
    , _getPositionInGallery: function(element, owl) {
        var countScreen = owl.querySelectorAll('.owl-item.active').length;
        var countItems = owl.querySelectorAll('.owl-item:not(.cloned)').length;
        var arr = owl.querySelectorAll('.owl-item');
        if (arr.length !== countItems) arr = Array.prototype.slice.call(arr, countScreen);
        var index = null;
        Array.prototype.forEach.call(arr, function(el, indx) {
            if (el === element) {
                index = indx;
            }
        });

        return index > (countItems - 1) ? index - countItems - 1 : index;
    }
    , removePreloader: function() {
        var preloader = this.preloader;
        // var loadPreloader = document.querySelector('.progress .load');
        // var timeLoading = 1 * 2;
        // loadPreloader.style.transition = 'width ' + (timeLoading/2) + 's ease-out';
        // loadPreloader.style.width = '100%';
        document.body.classList.add('run');
        setTimeout(function () {
            if (preloader && preloader.parentElement) {
                preloader.parentElement.removeChild(preloader);
            }
        }, 1000);
    }
    /**
     * Prepage content
     * @param mode {string} have value 'no-storage' or NULL
     * @return {object} data saved project
     */
    , _prepareContentPagesToSave: function(mode) {
        var _this = this;
        if (builder.activeFormModal) {
            $(builder.activeFormModal).modal('hide');
            builder.activeFormModal.style.display = 'none';
        }
        var main = _this.main.cloneNode(true);
        // var popup = main.querySelector('.modal.show');
        // _this.windowIframe.jQuery(popup).modal('hide');
        _this.clearControlElements(main);
        var sectionsName = JSON.stringify(Object.keys(_this.projectSections));
        var pagesStorageObj = JSON.stringify(_this.pages.getPagesObjInArray());
        var projectData = JSON.stringify(main.innerHTML);
        var modalContainer = JSON.stringify(_this.modalContainer.innerHTML);
        var modalFormContainer = JSON.stringify(_this.modalFormContainer.innerHTML);
        var forms = JSON.stringify(_this.forms);
        var video_bg = JSON.stringify(_this._videoBg);
        var gallery = JSON.stringify(_this._owlGallery);
        var form_section = JSON.stringify(_this._formSection);
        var smooth = JSON.stringify(_this._smooth);
        var parallax = JSON.stringify(_this._parallax);
        var datepicker = JSON.stringify(_this._datepicker);
        var filefield = JSON.stringify(_this._filefield);
        var countup = JSON.stringify(_this._countup);
        var countdown = JSON.stringify(_this._countdown);
        var gMaps = JSON.stringify(_this.gMaps);
        var plugins = JSON.stringify(_this.plugins);
        var builderStyle = _this.builderStyle.innerHTML;
        var gs = {};
        for (var item in _this.globalStyle.optionsStyle) {
            if (item === 'defaultPropertiesForTags') {
                gs[item] = _this.globalStyle.optionsStyle[item].map(function (val) {
                    var op = {};
                    for (var item1 in val) {
                        if (item1 === 'elements') {
                            op[item1] = [];
                            val[item1].forEach(function (val2) {
                                var el = {};
                                for (var item2 in val2) {
                                    if (item2 !== 'controlElements') {
                                        el[item2] = val2[item2];
                                    }
                                }
                                op[item1].push(el);
                            });
                        } else {
                            op[item1] = val[item1];
                        }
                    }
                    return op;
                });
            } else {
                gs[item] = _this.globalStyle.optionsStyle[item];
            }
        }
        var optionsStyle = JSON.stringify(gs);
        var data = {
            sectionsName: sectionsName
            , pagesStorageObj: pagesStorageObj
            , projectData: projectData
            , modalContainer: modalContainer
            , modalFormContainer: modalFormContainer
            , forms: forms
            , video_bg: video_bg
            , gallery: gallery
            , form_section: form_section
            , smooth: smooth
            , parallax: parallax
            , datepicker: datepicker
            , filefield: filefield
            , countup: countup
            , countdown: countdown
            , gMaps: gMaps
            , plugins: plugins
            , optionsStyle: optionsStyle
            , builderStyle: builderStyle
        };
        data = JSON.stringify(data);
        try {
            if (mode !== 'no-storage') {
                delete window.localStorage.projectWeber;
                window.localStorage.projectWeber = data;
            }
        }
        catch (e) {}

        return data;
    }
    , _loadProject: function(data, mode) {
        var _this = this;
        var data = JSON.parse(data);

        if (data.error) {
            var modal = new Modal('supra-modal', 'Attention', {response: data.error});
            $(modal).modal('show');

            _this.removePreloader();
            setTimeout(function () {
                _this.body.classList.remove('first-show');
            }, 1600);

            return;
        }

        var pagesStorageObj = JSON.parse(data.pagesStorageObj);
        var projectData = JSON.parse(data.projectData);
        var modalContainer = JSON.parse(data.modalContainer);
        var modalFormContainer = JSON.parse(data.modalFormContainer);
        var forms = data.forms ? JSON.parse(data.forms): [];
        var gMaps = data.gMaps ? JSON.parse(data.gMaps): [];
        var plugins = data.plugins ? JSON.parse(data.plugins): [];
        var optionsStyle = data.optionsStyle ? JSON.parse(data.optionsStyle): builderOptions.globalStyle;

        // _this.sectionsName = JSON.parse(data.sectionsName);
        Core.prototype._videoBg = JSON.parse(data.video_bg);
        Core.prototype._owlGallery = JSON.parse(data.gallery);
        Core.prototype._formSection = JSON.parse(data.form_section);
        Core.prototype._smooth = JSON.parse(data.smooth);
        Core.prototype._parallax = JSON.parse(data.parallax);
        Core.prototype._datepicker = JSON.parse(data.datepicker);
        Core.prototype._filefield = JSON.parse(data.filefield);
        Core.prototype._countup = JSON.parse(data.countup);
        Core.prototype._countdown = JSON.parse(data.countdown);

        _this.triggerImport = true;

        var modeEdit = 'edit-sections';

        // if (mode === 'load') modeEdit = 'edit-project-page';

        if (mode === 'import') {
            // modeEdit = 'edit-project-page';
            var datas = _this._prepareContentPagesToSave('no-storage');

            _this.pages.clearPagesObjInArray();
            // _this.setStep(function(){
            //     var preloader = document.createElement('div');
            //     preloader.className = 'supra-preloader';
            //     preloader.innerHTML = '\t<img src="images/logo.png" srcset="images/logo@2x.png 2x" alt="suprapagebuilder"/>\n' +
            //         '\t<div class="progress-bar-s">\n' +
            //         '\t\t<div class="progress"><div class="load"></div></div>\n' +
            //         '\t</div>\n' +
            //         '\t<div class="rights">\n' +
            //         '\t\t<p>&#169; 2018 <a href="http://multifour.com/" target="_blank">Multifour.com</a><br/>SUPRA 5.0</p>\n' +
            //         '\t</div>';
            //     document.body.appendChild(preloader);
            //     document.body.classList.remove('run');
            //
            //     var popup = _this.main.querySelector('.modal.show');
            //     _this.windowIframe.jQuery(popup).modal('hide');
            //     Core.prototype.popupThumbArray = [];
            //     _this.popupThumb.querySelector('.container-thumb').innerHTML = '';
            //     _this.popupThumb.className = 'supra';
            //
            //     _this._loadProject(datas, 'import');
            // });
        }

        _this.main.innerHTML = '';

        if (typeof projectData === 'string') {
            projectData = projectData.replace(/spr-outline-control/ig, '');
            _this.main.innerHTML = projectData;
        } else {
            _this.main.appendChild(projectData);
        }

        var panels = document.querySelectorAll('.control-panel');
        [].forEach.call(panels, function (panel) {
             panel.parentElement.removeChild(panel);
        });

        _this.globalStyle.load(optionsStyle);
        _this.builderStyle.innerHTML = data.builderStyle;

        /**
         * init LeftPanel
         */
        Core.prototype.leftPanel = new LeftPanel();

        var sections = _this.main.querySelectorAll('ul.blr-active-page > li');
        var timeLoading = sections.length * 2;
        var loadPreloader = document.querySelector('.progress .load');
        if (loadPreloader) {
            loadPreloader.style.transition = 'width ' + (timeLoading) + 's ease-out';
            loadPreloader.style.width = '100%';
        }

        setTimeout(function(){
            _this.removePreloader();
            setTimeout(function () {
               _this.body.classList.remove('first-show');
            }, 1600);
        }, timeLoading*1000);

        _this.clearGalleryOnPage(_this.main);
        _this.clearInstafeed(_this.main);

        var ul = _this.leftPanel.cPanels['project-pages'].getDOMSelf().querySelector('ul');
        var pageItems = ul.querySelectorAll('li');
        for (var i = 0; i < pageItems.length - 1; i++) {
            pageItems[i].parentNode.removeChild(pageItems[i]);
        }
        var pages = _this.main.parentElement.querySelectorAll('.main > ul');
        var activePage = _this.main.parentElement.querySelector('.main > ul.blr-active-page');

        //clear modal
        var popups = this.main.querySelectorAll('.modal.show');
        Array.prototype.forEach.call(popups, function (popup) {
            popup.classList.remove('show');
            popup.parentElement.removeAttribute('style');
        });

        //clear nav offcanvas
        var offcanvas = _this.main.querySelectorAll('nav ~ .show');
        [].forEach.call(offcanvas, function (el) {
            el.classList.remove('show');
        });

        pagesStorageObj = pagesStorageObj.filter(function(Obj){
            return Obj;
        });

        _this._style.html = _this.main.children[0];

        Array.prototype.forEach.call(pages, function (page, indx) {
            var pageHTML = null;

            // if (page.classList.contains('blr-active-page')) {
                pageHTML = page;
            // }

            var i = 0;
            while (pagesStorageObj[i].id !== page.dataset.id*1) {
                i++;
            }
            var pageStgObj = pagesStorageObj[i];

            var pageObj = new Page({
                name: page.dataset.name
                ,id: _this.pages.getPagesObjInArray().length
                , mode: 'load'
                , pageHTML: pageHTML
                , htmlText: pageStgObj.html
            });

            _this.pages.setPagesObjInArray(pageObj);

            // if (indx === 0) {
            if (page.classList.contains('blr-active-page')) {
                Core.prototype.activePageObject = pageObj;
            }

            // _this._stopFormValidation(page);

            pageObj.setPageTitle(pageStgObj._title, true);
            pageObj.setPageFavicon(pageStgObj._favicon, true);
            pageObj.setMetaDes(pageStgObj._metaDes, true);
            pageObj.setMetaKey(pageStgObj._metaKey, true);
            pageObj.setJs(pageStgObj._metaJs, true);
            pageObj.preloader = pageStgObj.preloader;
        });

        Core.prototype.modalContainer.innerHTML = modalContainer;
        Core.prototype.modalFormContainer.innerHTML = modalFormContainer;
        Core.prototype.forms = forms;
        Core.prototype.gMaps = gMaps;
        Core.prototype.plugins = plugins;

        _this.reloadScript(activePage);
        _this._reloadVideoBg(activePage, 'run');
        // _this.rebuildControl(activePage);
        _this._setControlsElement(activePage.dataset.name, 'edit-sections');
        _this._changePageMode(activePage, modeEdit);
        _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(activePage);
        // _this._clearNavigation(activePage);
        Core.prototype._idActivePage = activePage.dataset.id;

        _this.leftPanel.cPanels['project-pages']._addProjectPagesToRightSide();

        _this.popupThumb.querySelector('.container-thumb').innerHTML = '';
        _this.popupThumb.classList.remove('collapse-thumb');
        Core.prototype.popupThumbArray = [];
        _this._initThumbnails();
        _this.removeNowrapSuperStructure(activePage);
        // _this._reloadMagnific(activePage);
        _this._clearAnimationByClass(activePage);
        setTimeout(function() {
            _this._refreshParallax(activePage);
        }, 1000);

        document.title = _this.getActivePageObject().getPageTitle();
        document.querySelector('link[rel=icon]').href =
            _this.getActivePageObject().getPageFavicon();

        _this.triggerImport = false;
    }
    /**
     * @param page {HTMLElement}
     * @param className {string} class mame according to mode editing
     * @private
     */
    , _changePageMode: function(page, className) {
        var _this = this;
        if (page.className.search(/edit-/i) === -1) {
            page.classList.add(className);
            this.popupThumb.classList.add(className);
        } else {
            var editType = page.className.match(/edit-([^ ]*).*/i);
            page.classList.remove('edit-' + editType[1]);
            page.classList.add(className);
            if (this.popupThumb.className.search(/edit-/i) !== -1) {
                this.popupThumb.classList.remove('edit-' + editType[1]);
            }
            this.popupThumb.classList.add(className);
        }

        // crutch for owl for editing text inside owl item
        _this.windowIframe.disMouseDrag = false;

        if (className === 'edit-typography') {
            _this.windowIframe.disMouseDrag = true;
        }
    }
    , nowrapCorrectigPosition: function(el) {
        var li = this.findParent(el, ['section-item', 'modal-dialog']);
        var controlGroup = li.querySelector(
            '.wrap-control.nowrap'
            + ', .wrap-control-element.nowrap'
            + ', .wrap-control-element-icons.nowrap'
            + ', .wrap-control-element-typography.nowrap'
        );

        if (!controlGroup) return;

        var boundingEl = el.getBoundingClientRect();
        var boundingLi = li.getBoundingClientRect();
        var topEl = boundingEl.top;
        var leftEl = boundingEl.left;
        var heightEl = boundingEl.height;
        var topLi = boundingLi.top;
        var leftLi = boundingLi.left;

        var absoluteTop = topEl - topLi;
        var absoluteBottom = absoluteTop + heightEl;
        var absoluteLeft = leftEl - leftLi;

        if (controlGroup.children[0].getBoundingClientRect().height < heightEl) {
            controlGroup.style.top = absoluteTop + 'px';
        } else {
            controlGroup.style.top = absoluteBottom + 'px';
        }
        controlGroup.style.left = absoluteLeft + 'px';
    }
    , nowrapCorrectigSectionPosition: function(el) {
        var li = this.findParent(el, ['section-item', 'modal-dialog']);
        var controlGroup = li.querySelector(
            '.wrap-control.nowrap'
            + ', .wrap-control-element.nowrap'
            + ', .wrap-control-element-icons.nowrap'
            + ', .wrap-control-element-typography.nowrap'
        );

        if (!controlGroup) return;

        var boundingEl = el.getBoundingClientRect();
        var boundingLi = li.getBoundingClientRect();
        var topEl = boundingEl.top;
        var leftEl = boundingEl.left;
        var heightEl = boundingEl.height;
        var leftLi = boundingLi.left;

        var absoluteTop = topEl;
        var absoluteBottom = absoluteTop + heightEl;
        var absoluteLeft = leftEl - leftLi;

        controlGroup.style.top = absoluteTop + 'px';
        controlGroup.style.bottom = absoluteBottom + 'px';
        controlGroup.style.height = heightEl + 'px';

        controlGroup.style.left = absoluteLeft + 'px';
    }
    /**
     * Stop validotion
     * @param page {HTMLElement}
     * @private
     */
    , _stopFormValidation: function(page) {
        var forms = page.querySelectorAll('form');
        Array.prototype.forEach.call(forms, function(form){
            form.querySelector('button[type=submit]').addEventListener('click', function(e){
                e.stopPropagation();
                e.preventDefault();
                e.stopImmediatePropagation();
                return false;
            });
        });
    }
    //TODO: duplicated some functions in removeNowrapSuperstructure
    , clearControlElements: function(page) {
        var _this = this;

        if (_this._arrListenersEditElementModal.length > 0 && !page) {
            _this._arrListenersEditElementModal.forEach(function (listenter) {
                listenter.el.removeEventListener('mouseover', listenter.func);
            });
        } else {
            if (_this._arrListenersEditElement.length > 0) {
                _this._arrListenersEditElement.forEach(function (listenter) {
                    listenter.el.removeEventListener('mouseover', listenter.func);
                });
            }

            if (_this._wrapEvetActiveClickEditElement.length > 0) {
                var wEACEE = _this._wrapEvetActiveClickEditElement;
                wEACEE.forEach(function (wrap) {
                    wrap.el.removeEventListener('click', wrap.func);
                });
                Core.prototype._wrapEvetActiveClickEditElement = [];
            }

            _this.clearControlButtons(page);

            if (_this._arrEditorText.length > 0) {
                _this._arrEditorText.forEach(function (editor) {
                    //editor.el.removeEventListener('mouseenter', editor.editor.mouseEnter);
                    if (editor.el.parentElement)
                        editor.el.parentElement.removeEventListener('click', editor.editor.clickIngalleryEditTagA);
                    editor.el.removeEventListener('mouseup', editor.editor.mouseUp);
                    editor.el.removeEventListener('touchend', editor.editor.touchEnd);
                    editor.el.removeEventListener('keydown', editor.editor.keyDown);
                    editor.el.removeEventListener('mouseleave', editor.editor.mouseLeave);
                    editor.el.removeEventListener('paste', editor.editor.paste);
                });
            }

            var maps = page.querySelectorAll('.g-map');
            if (maps) {
                Array.prototype.forEach.call(maps, function(map){
                    var li = _this.findParent(map, ['section-item']);
                    map.innerHTML = '';
                    map.removeAttribute('style');
                    _this.reloadScript(li);
                });
            }
        }

        Core.prototype._arrEditorText = [];
        Core.prototype._arrListenersEditElement = [];
    }
    , clearControlButtons: function (page) {
        var _this = this;
        var wraps = page.querySelectorAll('.buttons-control, .buttons-control-form, .buttons-control-typography, .buttons-control-icons');
        Array.prototype.forEach.call(wraps, function(element) {
            _this.clearEditElement(element);
        });
    }
    , setStep: function(func) {
        if (this.triggerUndo) {
            this.arrayNextStep.push(func);

            if (this._redo.classList.contains('unactive')) {
                this._redo.classList.remove('unactive');
            }
        } else {
            if (!this.triggerRedo) Core.prototype.arrayNextStep = [];
            this.arrayPrevStep.push(func);

            if (this.arrayPrevStep.length > 20) {
                this.arrayPrevStep.shift();
            }

            if (this._undo.classList.contains('unactive')) {
                this._undo.classList.remove('unactive');
            }
            if (this.arrayNextStep.length < 1) {
                this._redo.classList.add('unactive');
            }
        }

        Core.prototype.triggerUndo = false;
        Core.prototype.triggerRedo = false;
    }
    , selectElementText: function(el, win) {
        win = win || window;
        var doc = win.document, sel, range;
        if (win.getSelection && doc.createRange) {
            sel = win.getSelection();
            range = doc.createRange();
            range.selectNodeContents(el.childNodes[0]);
            sel.removeAllRanges();
            sel.addRange(range);
        } else if (doc.body.createTextRange) {
            range = doc.body.createTextRange();
            range.moveToElementText(el.childNodes[0]);
            range.select();
        }
    }
    , _findElForOptions: function(DOM) {
        var _this = this;

        var options = DOM.querySelectorAll('.bg-video, .spr-gallery, form, .parallax, .video-popup,' +
            ' .image-popup, .smooth, .spr-magnific, [data-aos], .spr-date-field, .spr-file-field, .counter-up,' +
            ' .countdown, .instafeed, .twitterfeed, .masonry-filter');
        Array.prototype.forEach.call(options, function(el) {
            if (el.classList.contains('bg-video')) {
                _this._videoBg = true;
            }
            if (el.classList.contains('spr-gallery')) {
                _this._owlGallery = true;
                //_this._magnific = true;
                //_this._setMagnificScript(true);
            }
            if (el.tagName === 'FORM') {
                _this._formSection = true;
            }
            if (el.classList.contains('parallax')) {
                _this._parallax = true;
            }
            if (el.classList.contains('spr-date-field')) {
                _this._datepicker = true;
            }
            if (el.classList.contains('countdown')) {
                _this._countdown = true;
            }
            if (el.classList.contains('counter-up')) {
                _this._countup = true;
            }
            if (el.classList.contains('instafeed')) {
                _this._instafeed = true;
            }
            if (el.classList.contains('twitterfeed')) {
                _this._twitterfeed = true;
            }
            if (el.classList.contains('spr-file-field')) {
                _this._filefield = true;
            }
            if (el.classList.contains('smooth')) {
                _this._smooth = true;
            }
            if (el.classList.contains('video-popup')
                || el.classList.contains('spr-magnific')
                || el.classList.contains('image-popup') ) {
                _this._magnific = true;
                // if (!_this.main.querySelector('.gallery')) {
                    _this._setMagnificScript(true);
                // }
            }
            if (el.classList.contains('masonry-filter')) {
                _this._masonryFilter = true;
            }
            if (el.dataset.aos) {
                _this._aos = true;
            }
        });
    }
    , _clearMasonryFilter: function (page) {
        // var _this = this;
        // if (
        //     _this.windowIframe.jQuery('.masonry-filter')
        //     && _this.windowIframe.jQuery('.masonry-filter').data('masonry.filter')
        // )
        //     _this.windowIframe.jQuery('.masonry-filter').data('masonry.filter').clear();
    }
    , _clearOptionClasses: function(page) {
        var options = page.querySelectorAll('[class*=spr-], [class*=aos-]');
        Array.prototype.forEach.call(options, function(el) {
            if (el.getAttribute('class').match(/(\s?spr-[^\s]*)+/i)) {
                el.setAttribute('class', el.getAttribute('class').replace(/(\s?spr-[^\s]*)+/ig, '').trim());
                if (el.getAttribute('class') === '') el.removeAttribute('class');
            }
            if (el.getAttribute('class') && el.getAttribute('class').match(/(\s?aos-[^\s]*)+/i)) {
                el.setAttribute('class', el.getAttribute('class').replace(/(\s?aos-[^\s]*)+/ig, '').trim());
                if (el.getAttribute('class') === '') el.removeAttribute('class');
            }
        });
    }
    /**
     * Reset indicators existence some applications in project
     * @private
     */
    , _resetIndExist: function() {
        this._videoBg = false;
        this._owlGallery = false;
        this._formSection = false;
        this._parallax = false;
        this._datepicker = false;
        this._countup = false;
        this._countdown = false;
        this._filefield = false;
        this._smooth = false;
        this._magnific = false;
        this._setMagnificScript(false);
    }
    , _setMagnificScript: function(arg) {
        if (arg) {
            this._magnificScript = '\n$(\'.video-popup\').each( function(indx, el){'
                + '\n\tif($(el).closest(\'.gallery\').length === 0) {'
                + '\n\t\t$(el).magnificPopup({'
                + '\n\t\t\ttype: \'iframe\','
                + '\n\t\t\tiframe: {'
                + '\n\t\t\t\tpatterns: {'
                + '\n\t\t\t\t\tyoutube: {'
                + '\n\t\t\t\t\t\tindex: \'www.youtube.com/\','
                + '\n\t\t\t\t\t\tid: \'v=\','
                + '\n\t\t\t\t\t\tsrc: \'https://www.youtube.com/embed/%id%?autoplay=1\''
                + '\n\t\t\t\t\t}'
                + '\n\t\t\t\t\t, vimeo: {'
                + '\n\t\t\t\t\t\tindex: \'vimeo.com/\','
                + '\n\t\t\t\t\t\tid: \'/\','
                + '\n\t\t\t\t\t\tsrc: \'https://player.vimeo.com/video/%id%?autoplay=1\''
                + '\n\t\t\t\t\t}'
                + '\n\t\t\t\t}'
                + '\n\t\t\t},'
                + '\n\t\t\tdisableOn: function() {'
                + '\n\t\t\t\tif (!pAgree || pAgree !== \'1\') {'
                + '\n\t\t\t\t\treturn false;'
                + '\n\t\t\t\t}'
                + '\n\t\t\t\treturn true;'
                + '\n\t\t\t}'
                + '\n\t\t});'
                + '\n\t}'
                + '\n});'
                + '\n$(\'.image-popup\').each( function(indx, el){'
                + '\n\tif($(el).closest(\'.gallery\').length === 0) {'
                + '\n\t\t$(el).magnificPopup({'
                + '\n\t\t\ttype: \'image\''
                + '\n\t\t});'
                + '\n\t}'
                + '\n});'
            ;
        } else {
            this._magnificScript = '';
        }
    }
    , ajax: function(form, urlAjax, callback, callbackError) {
        var xhr = new XMLHttpRequest();
        var method = 'POST';
        var url = baseUri + 'ajax.php?mode=' + urlAjax;
        xhr.open(method, url, true);
        xhr.onreadystatechange = function() {
            if (this.readyState === 4) {
                if (xhr.status == 200) {
                    if (callback) callback(xhr.responseText);
                }
                else {
                    var res = "There was a problem with the request " + xhr.status;
                    if (callbackError) callbackError(xhr, res);
                }
            }
        };
        xhr.send(form);
    }
};

Core.prototype.constructor = Core;

var Pages = function (obj) {
    switch (obj.mode) {
        case 'copy':
            this.copyPage(obj);
            break;
        case 'load':
            this._load(context, name, id);
            break;
        case 'new':
        default :
            this.setListenerClickOnPageInsideProject();
            this._createPage(obj.pages);
            break;
    }
};

Pages.prototype = Object.assign(Object.create(Core.prototype), {
    _pages: [],
    /**
     * Create new Page object
     * @param pages {Array}
     * @private
     */
    _createPage: function(pages) {
        var _this = this;

        if (!(pages instanceof Array)) {
            throw new TypeError("Expected type of Array");
        }

        pages.forEach(function (page, indx) {
            _this._pages.push(new Page(page));

            if (indx === 0) {
                Core.prototype.activePageObject = _this._pages[0];
            }
        });
    }
    /**
     * Create new Page object which is copy of targetPageObj
     * @param targetPageObj
     * @param name
     * @param id
     * @private
     */
    , copyPage: function(obj) {
        var targetPage = obj.targetPO.getDOMSelf();
        var pageStyle = /(light|dark)-page/.test(targetPage.className) ? targetPage.className.match(/(light|dark)-page/)[0] : '';
        var loading = targetPage.classList.contains('loading') ? ' loading' : '';
        var pageObj = new Page(Object.assign(obj, {
            outerClass: pageStyle + loading + ' page-mode-project-pages'
        }));

        // var next = targetPage.nextElementSibling;
        // var parent = targetPage.parentElement;
        // parent.insertBefore(pageObj.getDOMSelf(), next);

        this.setPagesObjInArray(pageObj);

        return pageObj;
    }
    /**
     * Create new Page object which is loaded from storaje or project.supra
     * @param context
     * @param name
     * @param id
     * @private
     */
    , _load: function(context, name, id) {
        var targetPage = context.querySelector('.' + name);
        var page = targetPage;
        page.dataset.id = id;
        this.id = id;
        this._selfDOM = page;
        var animations = page.querySelectorAll('.aos-animate');
        Array.prototype.forEach.call(animations, function(el) {
            if (el.classList.contains('aos-animate')) {
                el.classList.remove('aos-animate')
            }
        });
    }
    , getPagesObjInArray: function () {
        return this._pages;
    }
    , getPageByName: function (pageName) {
        for( var item in this._pages) {
            if (this._pages[item].getPageName() === pageName)
                return this._pages[item];
        }
    }
    , clearPagesObjInArray: function () {
        this._pages = [];
    }
    , setPagesObjInArray: function (pageObj) {
        this._pages.push(pageObj);
    }
    , setListenerClickOnPageInsideProject: function () {
        var _this = this;
        $(_this.documentIframe).on('click', 'a', function (e) {
            var href = this.getAttribute('href');
            var pageName = href.match(/\/?([^./]*)(?:\.html)/);
            if (pageName && pageName[1] && pageName[1] !== _this.getActivePageObject().getPageName()) {
                e.preventDefault();
                if (pageName[1])
                    pageName = pageName[1];
                else
                    return;
                var pageObj = _this.getPageByName(pageName);
                var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(pageObj.id);
                _this.leftPanel.cPanels['project-pages'].changeActivePage(pageObj, activeItem, pageObj.id)
            } else if (!/\.html#/.test(href)) {
                e.preventDefault();
            }
        });
    }
});

Pages.prototype.constructor = Pages;
var baseElement = function () {

};

baseElement.prototype = Object.assign(Object.create(Core.prototype), {
    /**
     * For wheel and arrow
     */
    _countDropDown: 0
    , _postfixDefault: 'px'
    , _stepDefault: 1
    , _min: 0
    , getDOMSelf: function () {
        return this._selfDOM;
    }
    , _scrollMove: function (el, e) {
        e.preventDefault();
        e.stopPropagation();
        if (e.deltaY > 0) {
            var match = el.value.match(/(-?[0-9]+\.?[0-9]*)([^0-9]*)/);
            match = match ? match : [0, 0, this._postfixDefault];
            var postfix = match[2] && match[2] !== '' ? match[2] : this._postfixDefault;
            var min = this._min;
            var step = this._stepDefault;
            var koef = 1;
            if (step < 1) {
                koef = 1/step;
                step = 1;
            }
            el.value = ( match[1]*koef - step ) < min*koef ? '' : ( match[1]*koef - step ) / koef + postfix;
        } else {
            var match = el.value.match(/(-?[0-9]+\.?[0-9]*)([^0-9]*)/);
            match = match ? match : [0, 0, this._postfixDefault];
            var postfix = match[2] && match[2] !== '' ? match[2] : this._postfixDefault;
            var step = this._stepDefault;
            var koef = 1;
            if (step < 1) {
                koef = 1/step;
                step = 1;
            }
            el.value = ( match[1]*koef + step ) / koef + postfix;
        }
        var event = new KeyboardEvent('keyup');
        el.dispatchEvent(event);
    }
    , _keyArrowUpDown: function(el, e) {
        if ( e.keyCode === 40 ) {
            var match = el.value.match(/(-?[0-9]+\.?[0-9]*)([^0-9]*)/);
            match = match ? match : [0, 0, this._postfixDefault];
            var postfix = match[2] && match[2] !== '' ? match[2] : this._postfixDefault;
            var min = this._min;
            var step = this._stepDefault;
            var koef = 1;
            if (step < 1) {
                koef = 1/step;
                step = 1;
            }
            el.value = ( match[1]*koef - step ) < min*koef ? '' : ( match[1]*koef - step ) / koef + postfix;
        } else if ( e.keyCode === 38 ){
            var match = el.value.match(/(-?[0-9]+\.?[0-9]*)([^0-9]*)/);
            match = match ? match : [0, 0, this._postfixDefault];
            var postfix = match[2] && match[2] !== '' ? match[2] : this._postfixDefault;
            var step = this._stepDefault;
            var koef = 1;
            if (step < 1) {
                koef = 1/step;
                step = 1;
            }
            el.value = ( match[1]*koef + step ) / koef + postfix;
        }
    }
    /**
     * Only for controlElement
     * @param mediaProperty
     * @param mode
     * @param e
     * @private
     */
    , _issetOrNotIsset: function (mediaProperty, mode, e) {
        var _this = this;
        if (mediaProperty === undefined || (mediaProperty && mediaProperty[mode] === undefined) ) {
            this._selfDOM.classList.add('not-isset');
        } else if (mediaProperty && mediaProperty[mode] && this._selfDOM.classList.contains('not-isset')) {
            this._selfDOM.classList.remove('not-isset');
        }

        if ( e
            && _this._controlElements._media !== 'default'
            && _this._properties.media.default[_this._controlElements._mode].value === e.detail.value
            && !_this._selfDOM.classList.contains('not-isset')
        ) {
            _this._selfDOM.classList.add('not-isset');
            delete _this._properties.media[e.detail.media];

            var chek = true;

            for (var el in this.globalStyleElements) {
                if(_this.globalStyleElements[el]._properties.media[e.detail.media]) {
                    chek = false;
                    return;
                }
            }

            if (chek) {
                var mediaButton = this.mediaButtonsOnControlStylePL2[e.detail.media];
                if (mediaButton.classList.contains('isset')) {
                    mediaButton.classList.remove('isset');
                }
            }
        } else if ( e && _this._selfDOM.classList.contains('not-isset') ) {
            _this._selfDOM.classList.remove('not-isset');
            var mediaButton = this.mediaButtonsOnControlStylePL2[e.detail.media];

            if (!mediaButton.classList.contains('isset')) {
                mediaButton.classList.add('isset');
            }
        }
    }
});

baseElement.prototype.constructor = baseElement;
var ButtonsSwitch = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;
    this.allowSelectNothing = options.allowSelectNothing || false;
    this.onlyOne = options.onlyOne || false;

    this._createElement(options);
};

ButtonsSwitch.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var buttons = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        if (args.buttons.length === 3) classItem = ' three';
        if (args.buttons.length > 4) classItem = ' four';

        buttons.className = 'item cs-element buttons-switch' + classItem;
        buttons.dataset.order = args.order || 999999;

        buttons.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex justify-content-between">'
            + '</div>';

        var buttonsList = buttons.querySelector('.wrapper');

        args.buttons.forEach(function (button) {
            var btn = document.createElement('button');
            btn.dataset.value = button.value;

            if (args.isActive(button.value)) {
                btn.className = 'active';
            }
            btn.innerHTML = button.title;

            btn.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, btn));

            buttonsList.appendChild(btn);
        });

        this._selfDOM = buttons;
    }
    , _prepareValues: function (btn) {
        var active = btn.parentElement.querySelector('.active');
        var countActive = btn.parentElement.querySelectorAll('.active');
        if (active && active !== btn && this.onlyOne) {
            active.classList.remove('active');
        }

        if (
            btn.classList.contains('active')
            && (
                ( countActive.length > 1)
                || ( countActive.length === 1 && this.allowSelectNothing)
            )
        ) {
            btn.classList.remove('active');
        } else if (!btn.classList.contains('active')) {
            btn.classList.add('active');
        }

        return btn;
    }
    , _addEventListToSwitchButton: function(btn, e) {
        btn = this._prepareValues(btn);

        this.doThis(btn);
    }
    , doThis: function(btn) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                btn: btn
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

ButtonsSwitch.prototype.constructor = ButtonsSwitch;
    var CustomButtonsSwitch = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    options = Object.assign(
            options
            , builderOptions.customControlElements[options.customCE]
        );

    this.arrayOfValues = [];

    ButtonsSwitch.apply(this, arguments);
};

CustomButtonsSwitch.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _createElement: function(args) {
        var _this = this;
        var buttons = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        if (args.buttons.length === 3) classItem = ' three';

        buttons.className = 'item cs-element buttons-switch custom-buttons' + classItem;
        buttons.dataset.order = args.order || 999999;

        buttons.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex flex-wrap justify-content-between">'
            + '</div>';

        var buttonsList = buttons.querySelector('.wrapper');

        args.buttons.forEach(function (button) {
            var btn = document.createElement('div');
            btn.dataset.value = button.value;
            _this.arrayOfValues.push(button.value);

            btn.className = 'item d-flex flex-column align-items-center';

            if (args.isActive(button.value)) {
                btn.className += ' active';
            }

            btn.innerHTML = button.innerHTML;

            if (button.title !== undefined && button.title !== '') {
                btn.innerHTML += '<label>' + button.title + '</label>';
            }

            btn.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, btn));

            buttonsList.appendChild(btn);
        });

        this._selfDOM = buttons;
    }
    , optionsSelect: function (btn, section) {
        var pattern = new RegExp('\\s?(' + this.arrayOfValues.join('|') + ')(\\s|$)', 'g');

        if (pattern.test(section.getAttribute('class')) && this.onlyOne) {
            section.setAttribute('class', section.getAttribute('class').replace(pattern, '$2'));
        }

        if (
            !btn.classList.contains('active') &&
            section.getAttribute('class').match(pattern) &&
            (
                section.getAttribute('class').match(pattern).length > 1 ||
                section.getAttribute('class').match(pattern).length === 1 && this.allowSelectNothing
            )
        ) {
            section.setAttribute('class', section.getAttribute('class').replace(new RegExp('\\s?' + btn.dataset.value + '(\\s|$)'), '$1'));
            // section.classList.remove(btn.dataset.value);
        // } else if (btn.classList.contains('active') && !section.classList.contains(btn.dataset.value)) {
        } else if (btn.classList.contains('active') && !new RegExp('\s?' + btn.dataset.value + '(\\s|$)').test(section.getAttribute('class'))) {
            // section.classList.add(btn.dataset.value);
            section.setAttribute('class', section.getAttribute('class') + ' ' + btn.dataset.value);
        }
    }
});

CustomButtonsSwitch.prototype.constructor = CustomButtonsSwitch;
var BaseBorderRadius = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

BaseBorderRadius.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var borderRadius = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        borderRadius.className = 'item cs-element cs-radius'
            + classItem;
        borderRadius.dataset.order = args.order || 999999;
        var value = args.callback ? args.callback() : '';

        if (!/(?:[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:[0-9]+\.?[0-9]*[^\s]*|auto)|initial|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px 1px'");
        }

        var match = ['', '', '', ''];

        if (value !== 'initial' && value !== '' && value !== 'none') {
            match = value.split(' ');
        }

        var topLeft = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var topRight = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottomRight = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var bottomLeft = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        borderRadius.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex flex-wrap">'
                + '<input type="text" placeholder="-" value="' + topLeft + '" class="top-left text-center">'
                + '<div class="item"></div>'
                + '<input type="text" placeholder="-" value="' + topRight + '" class="top-right text-center">'
                + '<div class="item center-center d-flex flex-wrap '
                    + 'justify-content-between align-content-between">'
                    + '<div></div><div></div><div></div><div></div>'
                + '</div>'
                + '<input type="text" placeholder="-" value="' + bottomLeft + '" class="bottom-left text-center">'
                + '<div class="item"></div>'
                + '<input type="text" placeholder="-" value="' + bottomRight + '" class="bottom-right text-center">'
            + '</div>';

        this._addEventListToBorderRadiusInput(borderRadius, args.eventName);

        var inputs = borderRadius.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = borderRadius;
    }
    , _addEventListToBorderRadiusInput: function(borderRadius, eventName) {
        var inputs = borderRadius.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var topLeft = borderRadius.querySelector('input.top-left').value;
                var topRight = borderRadius.querySelector('input.top-right').value;
                var bottomLeft = borderRadius.querySelector('input.bottom-left').value;
                var bottomRight = borderRadius.querySelector('input.bottom-right').value;

                topLeft = topLeft === '' ? '0' : topLeft;
                topRight = topRight === '' ? '0' : topRight;
                bottomRight = bottomRight === '' ? '0' : bottomRight;
                bottomLeft = bottomLeft === '' ? '0' : bottomLeft;

                var val = topLeft + ' ' + topRight + ' ' + bottomRight + ' ' + bottomLeft;

                var eventCheckSelect = new CustomEvent(
                    eventName + '.dropDown.select'
                    , {'detail': val}
                );
                borderRadius.dispatchEvent(eventCheckSelect);
            });
        });
    }
});

BaseBorderRadius.prototype.constructor = BaseBorderRadius;
var BaseBorderWidth = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

BaseBorderWidth.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var borderWidth = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        borderWidth.className = 'item cs-element cs-border'
            + classItem;
        borderWidth.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';

        if (value !== '') {
            var arr = value.match(/([^\s]*)\s*([^\s]*)\s*([^\s]*)\s*([^\s]*)/);
            var left = arr[4] ? arr[4] : arr[1];
            if (arr[4] === '' && arr[2] !== '') {
                left = arr[2];
            }
            var right = arr[2] ? arr[2] : arr[1];
            var bottom = arr[3] ? arr[3] : arr[1];

            value = arr[1] + ' ' + right + ' ' + bottom + ' ' + left;
        }

        if (!/(?:[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:[0-9]+\.?[0-9]*[^\s]*|auto)|initial|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px 1px'");
        }

        var match = ['', '', '', ''];

        if (value !== 'initial' && value !== '' && value !== 'none') {
            match = value.split(' ');
        }

        var top = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var right = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottom = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var left = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        borderWidth.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex flex-wrap">'
            + '<input type="text" placeholder="Top" value="' + top + '" class="top text-center">'
            + '<input type="text" placeholder="Left" value="' + left + '" class="left text-center">'
            + '<div class="item center-center"></div>'
            + '<input type="text" placeholder="Right" value="' + right + '" class="right text-center">'
            + '<input type="text" placeholder="Bottom" value="' + bottom + '" class="bottom text-center">'
            + '</div>';

        this._addEventListToBorderWidthInput(borderWidth, args.eventName);

        var inputs = borderWidth.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = borderWidth;
    }
    , _addEventListToBorderWidthInput: function(borderWidth, eventName) {
        var inputs = borderWidth.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = borderWidth.querySelector('input.top').value;
                var right = borderWidth.querySelector('input.right').value;
                var bottom = borderWidth.querySelector('input.bottom').value;
                var left = borderWidth.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                var eventCheckSelect = new CustomEvent(
                    eventName + '.dropDown.select'
                    , {'detail': val}
                );
                borderWidth.dispatchEvent(eventCheckSelect);
            });
        });
    }
});

BaseBorderWidth.prototype.constructor = BaseBorderWidth;
var BaseCoordinates = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;
    this._postfixDefault = options.postfix === undefined ? 'px' : options.postfix;
    this._stepDefault = options.step === undefined ? 1 : options.step;
    this._min = -1000;

    this._createElement(options);
};

BaseCoordinates.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var bCoordinates = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        bCoordinates.className = 'item cs-element cs-coordinates'
            + classItem;
        bCoordinates.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';

        if (!/(?:-?[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:-?[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:-?[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:-?[0-9]+\.?[0-9]*[^\s]*|auto)|none|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px 1px'");
        }

        var match = ['auto', 'auto', 'auto', 'auto'];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        var top = (match[0] === 'auto') ? '' : match[0];
        var right = (match[1] === 'auto') ? '' : match[1];
        var bottom = (match[2] === 'auto') ? '' : match[2];
        var left = (match[3] === 'auto') ? '' : match[3];

        bCoordinates.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex flex-wrap">'
            + '<input type="text" name="top" placeholder="Top" value="' + top + '" class="top text-center">'
            + '<input type="text" name="left" placeholder="Left" value="' + left + '" class="left text-center">'
            + '<div class="item center-center"></div>'
            + '<input type="text" name="right" placeholder="Right" value="' + right + '" class="right text-center">'
            + '<input type="text" name="bottom" placeholder="Bottom" value="' + bottom + '" class="bottom text-center">'
            + '</div>';

        this._addEventListTobCoordinatesInput(bCoordinates, args.eventName);

        var inputs = bCoordinates.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = bCoordinates;
    }
    , _addEventListTobCoordinatesInput: function(bCoordinates, eventName) {
        var inputs = bCoordinates.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var obj = {};
                obj[input.getAttribute('name')] = input.value === '' ? '0' : input.value;

                var eventCheckSelect = new CustomEvent(
                    eventName + '.dropDown.select'
                    , {'detail': obj}
                );
                bCoordinates.dispatchEvent(eventCheckSelect);
            });
        });
    }
});

BaseCoordinates.prototype.constructor = BaseCoordinates;
var BaseInput = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._postfixDefault = options.postfix === undefined ? 'px' : options.postfix;
    this._stepDefault = options.step === undefined ? 1 : options.step;
    this._min = options.min === undefined ? 1 : options.min;
    this._createElement(options);
};

BaseInput.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var baseInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        baseInput.className = 'item cs-element cs-base-input'
            + classItem;
        baseInput.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        var placeholder = args.placeholder || '-';
        baseInput.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" placeholder="' + placeholder + '" value="' + value + '" class="">';


        this._addEventListToHalfInput(baseInput);

        this._selfDOM = baseInput;
    }

    , _addEventListToHalfInput: function(baseInput) {
        var _this = this;
        baseInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;
            _this.doThis(val);
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

BaseInput.prototype.constructor = BaseInput;
var BaseSize = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

BaseSize.prototype = Object.assign(Object.create(baseElement.prototype), {
    _triggerProportion: false
    , _proportion: 1
    , _createElement: function(args) {
        var _this = this;
        var size = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        size.className = 'item cs-element cs-size'
            + classItem;
        size.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        value = value === 'auto' ? ['auto', 'auto'] : value.split(' ');
        size.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex justify-content-between align-items-center">'
            + '<input type="text" name="width" placeholder="Width" value="' + value[0] + '" class="width">'
            + '<i class="proportion icon-blr-lock-open"></i>'
            + '<input type="text" name="height" placeholder="Height" value="' + value[1] + '" class="height">'
            + '</div>';


        this._addEventListToSize(size, args.eventName);
        this._addEventListToProportion(size);

        var inputs = size.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = size;
    }
    , _addEventListToProportion: function (size) {
        var _this = this;
        size.querySelector('i.proportion').addEventListener('click', function () {
            if (this.classList.contains('icon-blr-lock')) {
                this.classList.remove('icon-blr-lock');
                this.classList.add('icon-blr-lock-open');
                _this._triggerProportion = false;
            } else {
                this.classList.remove('icon-blr-lock-open');
                this.classList.add('icon-blr-lock');

                var width = size.querySelector('.width').value;
                var height = size.querySelector('.height').value;
                if (width === '' || width === 'auto' || height === '' || height === 'auto') {
                    _this._proportion = 1;
                } else {
                    _this._proportion = width.replace(/[^0-9.]+/, '')/height.replace(/[^0-9.]+/, '');
                }

                _this._triggerProportion = true;
            }
        });
    }
    , _addEventListToSize: function(size, eventName) {
        var _this = this;
        var inputs = size.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var width = size.querySelector('.width');
                var height = size.querySelector('.height');

                var obj = {
                    width: width.value
                    , height: height.value
                };

                if (_this._triggerProportion) {
                    var value = 'auto';

                    if (input.getAttribute('name') === 'width' && input.value !== '' && input.value !== 'auto') {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] / _this._proportion ) + match[2] : '';
                        height.value = value;
                        obj.height = value;
                    } else if (input.value !== '' && input.value !== 'auto') {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] * _this._proportion ) + match[2] : '';
                        width.value = value;
                        obj.width = value;
                    }
                }

                obj[input.getAttribute('name')] = input.value === '' ? 'auto' : input.value;

                _this.doThis(obj);
            });
        });
    }
    , doThis: function(obj) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                obj: obj
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

BaseSize.prototype.constructor = BaseSize;

var BaseTextarea = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

BaseTextarea.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var baseTextarea = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        baseTextarea.className = 'item cs-element cs-base-textarea'
            + classItem;
        baseTextarea.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        baseTextarea.innerHTML = '<label>' + args.title + '</label>'
            + '<textarea placeholder="-">' + value + '</textarea>';


        this._addEventListToHalfInput(baseTextarea);

        this._selfDOM = baseTextarea;
    }

    , _addEventListToHalfInput: function(baseTextarea) {
        var _this = this;
        baseTextarea.querySelector('textarea').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;
            _this.doThis(val);
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

BaseTextarea.prototype.constructor = BaseTextarea;
var BgColor = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

BgColor.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var bgColor = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';

        bgColor.dataset.order = args.order || 999999;

        var callBackVal = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        var value = this._getColorsAndValueOfMenu(callBackVal);
        if (value.bgStyleColor === 'Solid color') classItem = ' solid';
        if (value.bgStyleColor === '-') classItem = ' none';

        bgColor.className = 'item cs-element bg-color'
            + classItem;

        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">';
        args.menu.forEach(function(element, indx) {
            var style = '';
            if (args.styleForItems) {
                style = 'style=""'
            }
            ul += '<li><a href="#" '+ style +'>' + firstUp(element) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = value.bgStyleColor;

        var curentValue = replaceSpace(visibleCValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';
        var elClass = args.elClass || '';

        bgColor.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn dropdown-toggle d-flex justify-content-between align-items-center '
                + elClass + '" ' +
                    'type="button" id="dropdownMenu' + this._countDropDown + '"' +
                    'data-toggle="dropdown" ' +
                    'aria-haspopup="true" aria-expanded="false"' +
                    'data-value="' + curentValue + '">'
                + '<span>' + visibleCValue + '</span>'
            + '</button>'
                + ul
            + '</div>'
            + '<div class="color-input d-flex justify-content-between align-items-center">'
                + '<input type="text" class="spectrum first">'
                + '<input type="text" class="spectrum second">'
            + '</div>';

        $(bgColor).find('.spectrum.first').spectrum({
            color: value.gradientColor1
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , change: _this._listenerToBgColor.bind(_this, bgColor)
            , beforeShow: function (color) {
                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }
            }
            , hide: function (color) {
                _this._hideColorpicker(bgColor);

                if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                    _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                }
            }
        });

        $(bgColor).find('.spectrum.second').spectrum({
            color: value.gradientColor2
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , beforeShow: function (color) {
                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }
            }
            , change: _this._listenerToBgColor.bind(_this, bgColor)
            , hide: function (color) {
                _this._hideColorpicker(bgColor);

                if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                    _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                }
            }
        });

        this._addEventListToBgColorDropdown(bgColor);

        this._selfDOM = bgColor;
    }
    , _hideColorpicker: function(bgColor, colorLast) {
        var bgColor1 = bgColor.querySelector('.spectrum.first');
        var bgColor2 = bgColor.querySelector('.spectrum.second');
        bgColor1.value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
            $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
        bgColor2.value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
            $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();

        this._listenerToBgColor();
    }
    , _getColorsAndValueOfMenu: function (bgColorValue) {
        var gradientColor1 = 'transparent';
        var gradientColor2 = 'transparent';

        var bgStyleColor = 'Solid color';
        var colors = bgColorValue.match(/.*?(#[^\s,)]*|rgba\([^)]*\)|rgb\([^)]*\)).*?(#[^\s,)]*|rgba\([^)]*\)|rgb\([^)]*\))/i);
        if (colors) {
            gradientColor1 = colors[1];
            gradientColor2 = colors[2];
        }
        if (bgColorValue.match(/linear-gradient\((?!to right)/i)) {
            bgStyleColor = 'Vertical gradient';
        } else if (bgColorValue.match(/linear-gradient\(to right/i)) {
            bgStyleColor = 'Horizontal gradient';
        } else if (bgColorValue.match(/radial-gradient\(circle/i)) {
            bgStyleColor = 'Radial gradient';
        } else if (bgColorValue.match(/linear-gradient\(135deg/i)) {
            bgStyleColor = 'Angle gradient';
        } else if (bgColorValue !== '' && bgColorValue !== '-') {
            gradientColor1 = bgColorValue;
        } else if (bgColorValue === '-') {
            bgStyleColor = '-';
        }

        return {
            gradientColor1: gradientColor1
            , gradientColor2: gradientColor2
            , bgStyleColor: bgStyleColor
        }
    }
    /**
     *
     * @private
     */
    , _changeCstmColor: function(c1, c2) {
        var bgElementColor = this._selfDOM.querySelector('button').dataset.value.toLowerCase();
        switch (bgElementColor) {
            case 'radial_gradient':
                return 'radial-gradient(circle, ' + c1 + ' 30%, ' + c2 + ' 70%)';
            case 'vertical_gradient':
                return 'linear-gradient(to bottom, ' + c1 + ', ' + c2 + ')';
            case 'horizontal_gradient':
                return 'linear-gradient(to right, ' + c1 + ', ' + c2 + ')';
            case 'angle_gradient':
                return 'linear-gradient(135deg, ' + c1 + ', ' + c2 + ')';
            case 'solid_color':
                return c1;
            case '-':
                return '-';
        }
    }
    , _listenerToBgColor: function(color) {
        var bgColor1 = this._selfDOM.querySelector('.spectrum.first');
        var bgColor2 = this._selfDOM.querySelector('.spectrum.second');
        var bgColor1value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
            $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
        var bgColor2value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
            $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();
        var val = this._changeCstmColor(bgColor1value, bgColor2value);

        this.doThis(val);
    }
    , _addEventListToBgColorDropdown: function(bgColor) {
        var _this = this;
        var options = bgColor.querySelectorAll('li a');
        var button = bgColor.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var item = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(item));
                button.querySelector('span').innerHTML = item;

                if (item === 'Solid color' && !bgColor.classList.contains('solid')) {
                    bgColor.classList.add('solid');
                } else if(item !== 'Solid color' && bgColor.classList.contains('solid')) {
                    bgColor.classList.remove('solid');
                }

                if (item === '-' && !bgColor.classList.contains('none')) {
                    bgColor.classList.add('none');
                } else if(item !== '-' && bgColor.classList.contains('none')) {
                    bgColor.classList.remove('none');
                }

                var bgColor1 = _this._selfDOM.querySelector('.spectrum.first');
                var bgColor2 = _this._selfDOM.querySelector('.spectrum.second');
                var bgColor1value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
                    $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
                var bgColor2value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
                    $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();
                var val = _this._changeCstmColor(bgColor1value, bgColor2value);

                _this.doThis(val);
            });
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

BgColor.prototype.constructor = BgColor;

var BgPosition = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

BgPosition.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var bgPosition = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        bgPosition.className = 'item cs-element bg-position'
            + classItem;
        bgPosition.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';

        var match = ['', ''];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        this.horizontal = match[0];
        this.vertical = match[1];

        bgPosition.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex flex-wrap">'
            + '<div class="item top-left"></div>'
            + '<div class="item top-center"></div>'
            + '<div class="item top-right"></div>'
            + '<div class="item center-left"></div>'
            + '<div class="item center-center"></div>'
            + '<div class="item center-right"></div>'
            + '<div class="item bottom-left"></div>'
            + '<div class="item bottom-center"></div>'
            + '<div class="item bottom-right"></div>'
            + '</div>';

        //converting to an Array
        this.cells = Array.prototype.slice.call(bgPosition.querySelector('.wrapper').children);

        //Initial cell data
        if (this.vertical === 'top' && this.horizontal === 'left') {
            this.cells[0].classList.add('active');
        }

        if (this.vertical === 'top' && this.horizontal === 'center') {
            this.cells[1].classList.add('active');
        }

        if (this.vertical === 'top' && this.horizontal === 'right') {
            this.cells[2].classList.add('active');
        }

        if (this.vertical === 'center' && this.horizontal === 'left') {
            this.cells[3].classList.add('active');
        }

        if (this.vertical === 'center' && this.horizontal === 'center') {
            this.cells[4].classList.add('active');
        }

        if (this.vertical === 'center' && this.horizontal === 'right') {
            this.cells[5].classList.add('active');
        }

        if (this.vertical === 'bottom' && this.horizontal === 'left') {
            this.cells[6].classList.add('active');
        }

        if (this.vertical === 'bottom' && this.horizontal === 'center') {
            this.cells[7].classList.add('active');
        }

        if (this.vertical === 'bottom' && this.horizontal === 'right') {
            this.cells[8].classList.add('active');
        }

        this._addEventListToBgPositionItems(bgPosition);

        this._selfDOM = bgPosition;
    }
    , _addEventListToBgPositionItems: function(bgPosition) {
        var _this = this;
        bgPosition.addEventListener('click', function(e){
            var index = _this.cells.indexOf(e.target);
            var val = '';

            if (e.target.classList.contains('active')) {
                e.target.classList.remove('active');
            } else {

                var activeItem = bgPosition.querySelector('.item.active');
                if (activeItem) {
                    activeItem.classList.remove('active');
                }

                e.target.classList.add('active');

                if (index === 0) {
                    val = 'left top';
                }

                if (index === 1) {
                    val = 'center top';
                }

                if (index === 2) {
                    val = 'right top';
                }

                if (index === 3) {
                    val = 'left center';
                }

                if (index === 4) {
                    val = 'center center';
                }

                if (index === 5) {
                    val = 'right center';
                }

                if (index === 6) {
                    val = 'left bottom';
                }

                if (index === 7) {
                    val = 'center bottom';
                }

                if (index === 8) {
                    val = 'right bottom';
                }
            }

            _this.doThis(val);
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

BgPosition.prototype.constructor = BgPosition;
var BgSize = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

BgSize.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var bgSize = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';

        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">';
        args.menu.forEach(function(element, indx) {
            var style = '';
            if (args.styleForItems) {
                style = 'style=""'
            }
            ul += '<li><a href="#" '+ style +'>' + firstUp(element) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = args.menu[0] ? firstUp(args.menu[0]) : '';
        var curentValue = args.menu[0] ? args.menu[0] : '';
        var callBackVal = '';
        var width = '';
        var height = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        if (callBackVal !== '') {
            var val = callBackVal.split(' ');

            if (val.length > 1) {
                callBackVal = 'Custom (width x height)';
                width = val[0];
                height = val[1];
                classItem += ' show-custom-size';
            }
            curentValue = callBackVal;
            visibleCValue = curentValue;
            if (args.mode !== 'lower') {
                visibleCValue = firstUp(curentValue);
            }
        }

        curentValue = replaceSpace(visibleCValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';

        bgSize.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn dropdown-toggle d-flex justify-content-between align-items-center '
            + args.elClass + '" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '">'
            + '<span>' + visibleCValue + '</span>'
            + '</button>'
            + ul
            + '</div>'
            + '<div class="size-input d-flex justify-content-between align-items-center">'
                + '<input type="text" placeholder="width" value="' + width + '" class="width">'
                + '<input type="text" placeholder="height" value="' + height + '" class="height">'
            + '</div>';

        bgSize.className = 'item cs-element bg-size'
            + classItem;
        bgSize.dataset.order = args.order || 999999;

        this._addEventListToBgSizeDropdown(bgSize);
        this._addEventListToSizeInput(bgSize);

        var inputs = bgSize.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = bgSize;
    }
    , _addEventListToSizeInput: function(bgSize) {
        var _this = this;
        var inputs = bgSize.querySelectorAll('.size-input input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var width = bgSize.querySelector('.width').value;
                var height = bgSize.querySelector('.height').value;

                width = width === '' ? 'auto' : width;
                height = height === '' ? 'auto' : height;

                var val = width + ' ' + height;


                _this.doThis(val);
            });
        });
    }
    , _addEventListToBgSizeDropdown: function(bgSize, eventName) {
        var _this = this;
        var options = bgSize.querySelectorAll('li a');
        var button = bgSize.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML.toLowerCase();
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                if (element.innerHTML.toLowerCase() === 'custom (width x height)') {
                    bgSize.classList.add('show-custom-size');
                    var width = bgSize.querySelector('.width').value;
                    var height = bgSize.querySelector('.height').value;
                    val = width + ' ' + height;
                }

                if (element.innerHTML.toLowerCase() !== 'custom (width x height)'
                    && bgSize.classList.contains('show-custom-size')) {
                    bgSize.classList.remove('show-custom-size');
                }

                _this.doThis(val);
            });
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

BgSize.prototype.constructor = BgSize;

var Button = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;
    this.allowSelectNothing = options.allowSelectNothing || false;
    this.onlyOne = options.onlyOne || false;

    this._createElement(options);
};

Button.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var button = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        button.className = 'item cs-element d-flex align-items-center justify-content-between button-custom' + classItem;

        button.innerHTML = '<button>' + args.title + '</button>';

        button.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, button));

        this._selfDOM = button;
    }
    , _addEventListToSwitchButton: function(btn, e) {
        this.doThis(btn);
    }
    , doThis: function(btn) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                btn: btn
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

Button.prototype.constructor = Button;
var ButtonType = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    CustomButtonsSwitch.apply(this, arguments);

    this._selfDOM.classList.add('buttons-type');
    this._addImageButton(options);
};

ButtonType.prototype = Object.assign(Object.create(CustomButtonsSwitch.prototype), {
    _addImageButton: function (args) {
        var wrapper = this._selfDOM.querySelector('.wrapper');
        var btn = document.createElement('div');

        btn.className = 'item d-flex flex-column justify-content-center align-items-center show-image';
        btn.innerHTML = '<i class="icon-blr-picture"></i>';
        btn.dataset.value = 'btn-image';
        wrapper.appendChild(btn);

        if (args.isActive('btn-image')) {
            btn.classList.add('active');
            var item = this.findParent(btn, ['cs-element']);
            item.classList.add('image');
        }

        this._addEventListToImageButton(btn);
    }
    , _addEventListToImageButton: function (btn) {
        var _this = this;
        btn.addEventListener('click', function () {
            var item = _this.findParent(btn, ['cs-element']);
            item.querySelector('.item.active').classList.remove('active');
            item.classList.add('image');
            btn.classList.add('active');

            _this.doThis(btn);
        });
    }
    , _addEventListToSwitchButton: function(btn, e) {
        var item = this.findParent(btn, ['cs-element']);
        item.classList.remove('image');

        btn = this._prepareValues(btn);

        this.doThis(btn);
    }
});

ButtonType.prototype.constructor = ButtonType;
var ButtonsIcon = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;
    this.allowSelectNothing = options.allowSelectNothing || false;
    this.onlyOne = options.onlyOne || false;

    this._createElement(options);
};

ButtonsIcon.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _createElement: function(args) {
        var _this = this;
        var buttons = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        buttons.className = 'item cs-element d-flex align-items-center justify-content-between buttons-icon' + classItem;

        buttons.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper">'
            + '</div>';

        var buttonsList = buttons.querySelector('.wrapper');

        args.buttons.forEach(function (args) {
            var btn = document.createElement('button');
            btn.dataset.value = args.value;

            var icon = _this._options.obj.querySelector('.icon');
            if (
                icon
                && _this._options.obj.childNodes[0].classList
                && _this._options.obj.childNodes[0].classList.contains('icon')
                && args.value === 'left'
            ) {
                btn.className = 'active';
            } else if (
                icon
                && _this._options.obj.childNodes[_this._options.obj.childNodes.length - 1].classList
                && _this._options.obj.childNodes[_this._options.obj.childNodes.length - 1].classList.contains('icon')
                && args.value === 'right'
            ) {
                btn.className = 'active';
            }
            btn.innerHTML = args.title;


            btn.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, btn));

            buttonsList.appendChild(btn);
        });

        this._selfDOM = buttons;
    }


});

ButtonsIcon.prototype.constructor = ButtonsIcon;
var ButtonsSize = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;
    this.allowSelectNothing = options.allowSelectNothing || false;
    this.onlyOne = options.onlyOne || false;

    this._createElement(options);
};

ButtonsSize.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _createElement: function(args) {
        var _this = this;
        var buttons = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        buttons.className = 'item cs-element d-flex align-items-center justify-content-between buttons-size' + classItem;

        buttons.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper">'
            + '</div>';

        var buttonsList = buttons.querySelector('.wrapper');

        args.buttons.forEach(function (args) {
            var btn = document.createElement('button');
            btn.dataset.value = args.value;
            if (_this._options.obj.classList.contains(args.value)) {
                btn.className = 'active';
            }
            btn.innerHTML = args.title;


            btn.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, btn));

            buttonsList.appendChild(btn);
        });

        this._selfDOM = buttons;
    }


});

ButtonsSize.prototype.constructor = ButtonsSize;
var Checkbox = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

Checkbox.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var checkbox = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        checkbox.className = 'item cs-element cs-checkbox'
            + classItem;
        checkbox.dataset.order = args.order || 999999;

        var checked = '';
        var value = args.callback ? args.callback() : false;
        if (value) checked = 'checked="true"';
        checkbox.innerHTML = '<div class="supra checkbox">' +
            '<label>' +
                '<input type="checkbox" name="check" ' + checked + '>' +
                '<span class="lbl">' + args.title + '</span>' +
            '</label>' +
            '</div>';


        this._addEventListToHalfInput(checkbox);

        this._selfDOM = checkbox;
    }

    , _addEventListToHalfInput: function(checkbox) {
        var _this = this;
        checkbox.querySelector('input').addEventListener('change', function(e){
            e.preventDefault();
            var val = this.checked;
            _this.doThis(val);
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

Checkbox.prototype.constructor = Checkbox;
var Colorpicker = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

Colorpicker.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var colorpicker = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        colorpicker.className = 'item cs-element d-flex justify-content-between align-items-center cs-colorpicker'
            + classItem;
        colorpicker.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : 'rgba(0, 0, 0, 0)';
        value = value || 'rgba(0, 0, 0, 0)';
        colorpicker.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" class="spectrum">';

        $(colorpicker).find('.spectrum').spectrum({
            color: value
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , change: _this._listenerToColorpiker.bind(_this)
            , hide: function () {
                var color = colorpicker.querySelector('.spectrum');
                var color1value = /rgba/.test($(color).spectrum("get").toRgbString()) ?
                    $(color).spectrum("get").toRgbString() : $(color).spectrum("get").toHexString();
                color.value = color1value;

                _this.doThis(color1value);
            }
        });

        this._selfDOM = colorpicker;
    }

    , _listenerToColorpiker: function(color) {
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        this.doThis(val);
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

Colorpicker.prototype.constructor = Colorpicker;
var CustomUrl = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

CustomUrl.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var baseInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        baseInput.className = 'item cs-element cs-base-input'
            + classItem;
        baseInput.dataset.order = args.order || 999999;

        var port = location.port !== "" ? ':' + location.port : '';
        var baseUri = location.protocol + '//' + location.hostname + port + location.pathname;

        var value = args.callback ? args.callback() : '';
        baseInput.innerHTML = '<label>' + args.title + '</label>'
            + '<div><a href="' + baseUri + 'ajax.php?mode=getawebercredentials" target="_blank">Verify your account'
            + '</a></div>';

        this._selfDOM = baseInput;
    }
});

CustomUrl.prototype.constructor = CustomUrl;
var DropDown = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

DropDown.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var dropDown = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        dropDown.className = 'item cs-element dropdown-el-full' + classItem;
        dropDown.dataset.order = args.order || 999999;

        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">';
        args.menu.forEach(function(element, indx) {
            var style = '';
            if (args.styleForItems) {
                style = 'style=""'
            }
            ul += '<li><a href="#" '+ style +'>' + firstUp(element) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = args.menu[0] ? firstUp(args.menu[0]) : '';
        var curentValue = args.menu[0] ? args.menu[0] : '';
        var callBackVal = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        if (callBackVal !== '') {
            var curentValue = callBackVal;
            visibleCValue = curentValue;
            if (args.mode !== 'lower') {
                visibleCValue = firstUp(curentValue);
            }
        }

        curentValue = replaceSpace(curentValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';
        var elClass = args.elClass ? ' ' + args.elClass : '';

        dropDown.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn dropdown-toggle d-flex justify-content-between align-items-center'
            + elClass + '" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '">'
            + '<span>' + visibleCValue + '</span>'
            + '</button>'
            + ul
            + '</div>';

        this._addEventListToDropdown(dropDown);

        this._countDropDown ++;

        this._selfDOM = dropDown;
    }

    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = firstUp(val);

                _this.doThis(val);
            });
        });
    }
    , changeItems: function(items) {
        var ul = this._selfDOM.querySelector('.dropdown-menu');
        ul.innerHTML = '';
        items.forEach(function(element, indx) {
            var style = '';
            var li = document.createElement('li');
            li.innerHTML = '<a href="#" '+ style +'>' + firstUp(element) + '</a>';
            ul.appendChild(li);
        });

        var button = this._selfDOM.querySelector('button');
        button.dataset.value = items[0];
        button.querySelector('span').innerHTML = items[0];

        this._addEventListToDropdown(this._selfDOM);
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

DropDown.prototype.constructor = DropDown;

var FourthInput = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

FourthInput.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var fourthInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        fourthInput.className = 'item cs-element fourth-input-cp'
            + classItem;
        fourthInput.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';

        if (!/[0-9]+\.?[0-9]*[^\s]*?\s[0-9]+\.?[0-9]*[^\s]*?\s[0-9]+\.?[0-9]*[^\s]*?\s(?:#[0-9abcdf]{3,6}|rgba\([^)]*\))|rgb\(.*|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px #ffffff'");
        }

        var match = ['', '', '', 'transparent'];

        if (value !== '' && !/rgb\(.*/.test(value)) {
            match = value.split(' ');
        } else if (/rgb\(.*/.test(value)) {
            match = value.match(/(rgb\([^)]*\))\s([^\s]*)\s([^\s]*)\s([^\s]*)/i);
            match = match.slice(1);
            match.push(match[0]);
            match = match.slice(1);
        }

        fourthInput.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" placeholder="-" value="' + match[0] + '" class="">'
            + '<input type="text" placeholder="-" value="' + match[1] + '" class="">'
            + '<input type="text" placeholder="-" value="' + match[2] + '" class="">'
            + '<input type="text" class="spectrum">';

        $(fourthInput).find('.spectrum').spectrum({
            color: match[3]
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            // , change: _this._listenerToColorpiker.bind(_this)
            , hide: _this._listenerToFourthInputCp.bind(_this)
        });

        this._addEventListToFourthInput(fourthInput, args.eventName);

        var inputs = fourthInput.querySelectorAll('input:not(.spectrum)');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = fourthInput;
    }

    , _listenerToColorpiker: function(color) {
        var inputs = this._selfDOM.querySelectorAll('input');
        var val = '';

        Array.prototype.forEach.call(inputs, function(input, indx){
            var postfix = '';
            var value = input.value === '' ? '0' : input.value;
            if (input.classList.contains('spectrum')) value = /rgba/.test(color.toRgbString()) ?
                color.toRgbString() : color.toHexString();
            if (indx !== inputs.length - 1) postfix = ' ';
            val += value + postfix;
        });

        var eventCheckSelect = new CustomEvent(
            this._options.eventName + '.colorpiker.select'
            , {'detail': val}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
    , _addEventListToFourthInput: function(fourthInput, eventName) {
        var inputs = fourthInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                var eventCheckSelect = new CustomEvent(
                    eventName + '.dropDown.select'
                    , {'detail': val}
                );
                fourthInput.dispatchEvent(eventCheckSelect);
            });
        });
    }
});

FourthInput.prototype.constructor = FourthInput;
var HalfDropdown = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

HalfDropdown.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var dropDown = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        dropDown.className = 'item cs-element d-flex '
                    + 'justify-content-between align-items-center dropdown-el-half' + classItem;
        dropDown.dataset.order = args.order || 999999;

        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">';
        args.menu.forEach(function(element, indx) {
            var style = '';
            if (args.styleForItems) {
                style = 'style=""'
            }
            ul += '<li><a href="#" '+ style +'>' + firstUp(element) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = args.menu[0] ? firstUp(args.menu[0]) : '';
        var curentValue = args.menu[0] ? args.menu[0] : '';
        var callBackVal = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        if (callBackVal !== '') {
            var curentValue = callBackVal;
            visibleCValue = curentValue;
            if (args.mode !== 'lower') {
                visibleCValue = firstUp(curentValue);
            }
        }

        curentValue = replaceSpace(curentValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';

        dropDown.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn dropdown-toggle d-flex justify-content-between align-items-center '
            + args.elClass + '" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '">'
            + '<span>' + visibleCValue + '</span>'
            + '</button>'
            + ul
            + '</div>';

        this._addEventListToDropdown(dropDown, args.eventName);

        this._countDropDown ++;

        this._selfDOM = dropDown;
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                _this.doThis(val);
            });
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

HalfDropdown.prototype.constructor = HalfDropdown;

var HalfInput = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._postfixDefault = options.postfix === undefined ? 'px' : options.postfix;
    this._stepDefault = options.step === undefined ? 1 : options.step;
    this._min = options.min === undefined ? 1 : options.min;
    this._createElement(options);
};

HalfInput.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var halfInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        halfInput.className = 'item cs-element d-flex justify-content-between align-items-center cs-half-input'
            + classItem;
        halfInput.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        halfInput.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" placeholder="-" value="' + value + '" class="">';


        this._addEventListToHalfInput(halfInput);

        var input = halfInput.querySelector('input');

        input.addEventListener('keydown', this._keyArrowUpDown.bind(this, input));

        var scrollMove = _this._scrollMove.bind(_this, input);

        input.addEventListener('focus', function (e) {
            input.addEventListener('wheel', scrollMove);
        });

        input.addEventListener('blur', function (e) {
            input.removeEventListener('wheel', scrollMove);
        });

        this._selfDOM = halfInput;
    }

    , _addEventListToHalfInput: function(halfInput) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            val = val === '' ? '' : val;

            _this.doThis(val);
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

HalfInput.prototype.constructor = HalfInput;
var ImageBase = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

ImageBase.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var imageBase = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        imageBase.className = 'item cs-element input-img'
            + classItem;
        imageBase.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        // value = value === "" ? 'none' : value;

        imageBase.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="input-image">'
            + '<input type="text" value="' + value + '" class="choice-images">'
            + '<i class="icon-blr-gallery"></i>'
            + '</div>';

        var i = imageBase.querySelector('i');
        i.addEventListener('click', function() {
            var modGallery = new Modal('supra-modal-gallery', 'Gallery', {
                parentModal: {
                    _selfDOM: imageBase
                    , _elements: {
                        figure: imageBase.querySelector('figure')
                    }
                }
                , targetElement: imageBase.querySelector('.input-image')
                , type: args.type || 'normal'
            });

            $(modGallery).on('hidden.bs.modal', function (e) {
                var val = imageBase.querySelector('.input-image input').value;
                // if (val === '') img.style.display = 'none';
                // else img.style.display = 'block';
                _this._listenerToImageBase(val);
            });
        });

        var input = imageBase.querySelector('.choice-images');

        input.addEventListener('blur', this._listenerToManualImageBase.bind(this, input));

        this._selfDOM = imageBase;
    }
    , _listenerToImageBase: function(src) {
        var val = src === '' ? 'none' : src;
        if (this._options.type === 'retina') {
            val += ' 2x';
        }
        this.doThis(val);
    }
    , _listenerToManualImageBase: function(input, e) {
        var val = input.value === '' ? 'none' : input.value;
        if (this._options.type === 'retina') {
            val += ' 2x';
        }
        this.doThis(val);
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

ImageBase.prototype.constructor = ImageBase;
var ImagePreview = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

ImagePreview.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var imagePreview = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        imagePreview.className = 'item cs-element input-img-preview'
            + classItem;
        imagePreview.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        value = value || '';
        value = /url/.test(value) ? value.match(/url\(['"]?([^']*)['"]?\)/)[1] : value;

        imagePreview.innerHTML = '<label>' + args.title + '</label>'
        + '<figure>'
            + '<div class="wrap-hover d-flex justify-content-center align-items-center">'
            + '<img src="' + value + '" '
            + 'alt="image">'
            + '<div class="img" style="display: none;"></div>'
            + '<div class="bg-test bg"></div>'
                + '<i class="icon-blr-lg-gallery flex-center before-square"></i>'
            + '</div>'
            + '<figcaption>350x680</figcaption>'
            + '<div class="modal-preloader">'
                + '<div class="wrapper">'
                    + '<div class="timer"><div class="arrow_sec"></div><div class="arrow_min"></div></div>'
                + '</div>'
            + '</div>'
        + '</figure>'
        + '<div class="input-image">'
            + '<input type="text" value="' + value + '" class="choice-images">'
            + '<i class="icon-blr-gallery"></i>'
        + '</div>';

        var img = imagePreview.querySelector('img');
        var figcaption = imagePreview.querySelector('figcaption');
        img.addEventListener('load', function() {
            var format = 1.085;
            if (window.innerWidth < 501) format = 0.75;
            Modal.prototype._imageSizig(this.naturalWidth, this.naturalHeight, format, this);
            figcaption.innerHTML = this.naturalWidth + 'x' + this.naturalHeight;
        });

        if (value === '') img.style.display = 'none';

        var i = imagePreview.querySelectorAll('i');
        Array.prototype.forEach.call(i, function (el) {
            el.addEventListener('click', function() {
                var modGallery = new Modal('supra-modal-gallery', 'Gallery', {
                    parentModal: {
                        _selfDOM: imagePreview
                        , _elements: {
                            figure: imagePreview.querySelector('figure')
                        }
                    }
                    , targetElement: imagePreview.querySelector('.input-image')
                    , type: args.type || 'normal'
                });

                $(modGallery).on('hidden.bs.modal', function (e) {
                    var input = imagePreview.querySelector('.input-image input');
                    var val = imagePreview.querySelector('.input-image input').value;
                    if (val === '') img.style.display = 'none';
                    else img.style.display = 'block';
                    _this._listenerToImagePreview(val);
                });
            });
        });

        var input = imagePreview.querySelector('.choice-images');

        input.addEventListener('blur', this._listenerToManualImagePreview.bind(this, input));

        this._selfDOM = imagePreview;
    }
    , _setCustomSizeOnFigure: function(widthEl, heightEl, divImg, section) {
        var w = widthEl.value || widthEl
            ,h = heightEl.value || heightEl;
        var width = w.match(/(([0-9]*?)(px|%)|auto)/i);
        var height = h.match(/(([0-9]*?)(px|%)|auto)/i);
        var sectionBRect = section.getBoundingClientRect();
        var widthSection = sectionBRect.width;
        var heightSection = sectionBRect.height;
        if (width && height) {
            w =width ? width[1] : 'auto';
            h =height ? height[1] : 'auto';
            if (widthEl.value)
                widthEl.value = w;
            if (heightEl.value)
                heightEl.value = h;
            if (width[3] === 'px')
                w = width[2]/widthSection * 100 + '%';
            if (height[3] === 'px')
                h = height[2]/heightSection * 100 + '%';

            divImg.style.backgroundSize = w + ' ' + h;
            divImg.style.backgroundSize = w + ' ' + h;
        }
    }
    , _listenerToImagePreview: function(src) {
        var val = src === '' ? 'none' : src;

        this.doThis(val);
    }

    , _listenerToManualImagePreview: function(input, e) {
        var val = input.value === '' ? 'none' : input.value;

        if (val === 'none') {
            this._selfDOM.querySelector('img').style.display = 'none';
        } else {
            this._selfDOM.querySelector('img').style.display = 'block';
            this._selfDOM.querySelector('img').src = val;
        }

        this.doThis(val);
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

ImagePreview.prototype.constructor = ImagePreview;

var MediaJustifyAlign = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this.media = 'default';

    this.activeButtons = {
        default: ''
        , mobile: ''
        , tablet: ''
        , desktop: ''
    };

    ButtonsSwitch.apply(this, arguments);
    this._loadMediaButtonsMode(options);
};

MediaJustifyAlign.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _createElement: function(args) {
        var _this = this;
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        var sa = document.createElement('div');
        sa.className = 'item cs-element buttons-switch media-text-align' + classItem;
        sa.dataset.order = args.order || 999999;

        sa.innerHTML = '<div class="d-flex justify-content-between align-items-center">'
                + '<label>' + args.title + '</label>'
                + '<div class="media-group">'
                    + '<button data-id="mobile"><i class="icon-blr-sm-mobile"></i></button>'
                    + '<button data-id="tablet"><i class="icon-blr-sm-tablet"></i></button>'
                    + '<button data-id="desktop"><i class="icon-blr-sm-desktop"></i></button>'
                + '</div>'
            + '</div>'
            + '<div class="wrapper d-flex justify-content-between">'
            + '</div>';

        var buttonsList = sa.querySelector('.wrapper');

        args.buttons.forEach(function (button) {
            var btn = document.createElement('button');
            btn.dataset.value = button.value;
            if (args.isActive(button.value)) {
                btn.className = 'active';
            }

            btn.innerHTML = button.title;

            btn.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, btn));

            buttonsList.appendChild(btn);
        });

        var buttons = sa.querySelectorAll('.media-group button');

        Array.prototype.forEach.call(buttons, function (button) {
            button.addEventListener('click', function () {
                var buttonActive = buttonsList.querySelector('.active');
                if (buttonActive) {
                    buttonActive.classList.remove('active');
                }

                if (this.classList.contains('active')) {
                    this.classList.remove('active');
                    this.blur();
                    _this.media = 'default';
                } else {
                    _this.selection(this);
                    _this.media = this.dataset.id;
                }

                if (_this.activeButtons[_this.media] !== '') {
                    var buttonFor = buttonsList.querySelector('[data-value=' + _this.activeButtons[_this.media] + ']');
                    buttonFor.classList.add('active');
                }
            });
        });

        this._selfDOM = sa;
    }
    , _loadMediaButtonsMode: function (options) {
        var _this = this;
        var DOM = options.obj;
        if (/\s?justify-content-?(sm|md|lg|xl)?-(start|end|center|between|around)/i.test(DOM.className)) {
            var match = DOM.className.match(/\s?justify-content-?(sm|md|lg|xl)?-(start|end|center|between|around)/ig, '');

            var desktop = this._selfDOM.querySelector('.media-group [data-id=desktop]');
            var tablet = this._selfDOM.querySelector('.media-group [data-id=tablet]');
            var mobile = this._selfDOM.querySelector('.media-group [data-id=mobile]');

            match.forEach(function (mt) {
                var m = mt.match(/\s?justify-content-?(sm|md|lg|xl)?-(start|end|center|between|around)/i, '');
                var mode = 'default';
                if (m[1] === 'sm') {
                    mode = 'mobile';
                    mobile.classList.add('isset');
                }
                if (m[1] === 'md') {
                    mode = 'tablet';
                    tablet.classList.add('isset');
                }
                if (m[1] === 'lg' || m[1] === 'xl') {
                    mode = 'desktop';
                    desktop.classList.add('isset');
                }

                _this.activeButtons[mode] = m[2];
            });
        }
    }
    , _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var btnM = {};

        btnM.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
        btnM.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
        btnM.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

        if (btn.classList.contains('active') && _this.media !== 'default') {
            btnM[_this.media].classList.add('isset');
        } else if (_this.media !== 'default') {
            btnM[_this.media].classList.remove('isset');
        }

        this.activeButtons[this.media] = btn.classList.contains('active') ? btn.dataset.value : '';

        this.doThis(btn);
    }
});

MediaJustifyAlign.prototype.constructor = MediaJustifyAlign;

var MediaPM = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;
    this.prefix = options.prefix;

    this.media = 'default';

    this.paddingTop = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    this.paddingBottom = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    this._createElement(options);
    this._loadMediaButtonsMode(options);
};

MediaPM.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        var mediaPadding = document.createElement('div');
        mediaPadding.className = 'item cs-element media-padding' + classItem;
        mediaPadding.dataset.order = args.order || 999999;

        mediaPadding.innerHTML = '<div class="d-flex justify-content-between align-items-center">'
            + '<label>' + args.title + '</label>'
            + '<div class="media-group">'
                + '<button data-id="mobile"><i class="icon-blr-sm-mobile"></i></button>'
                + '<button data-id="tablet"><i class="icon-blr-sm-tablet"></i></button>'
                + '<button data-id="desktop"><i class="icon-blr-sm-desktop"></i></button>'
            + '</div>'
            + '</div>';

        var dropDownPTop = document.createElement('div');
        dropDownPTop.className = 'dropdown';
        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">';
        args.menu.forEach(function(element, indx) {
            ul += '<li><a href="#">' + firstUp(element) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = _this.paddingTop.default = args.callbackTop !== undefined ? args.callbackTop() : args.menu[0];
        var curentValue = replaceSpace(visibleCValue);

        dropDownPTop.innerHTML = '<button class="supra-btn dropdown-toggle d-flex justify-content-center align-items-center" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '">'
            + '<span>' + visibleCValue + '</span>'
            + '</button>'
            + ul;

        this._countDropDown ++;

        var dropDownPBottom = dropDownPTop.cloneNode(true);
        var buttonDPB = dropDownPBottom.querySelector('button');
        var visibleCValueBottom = _this.paddingBottom.default = args.callbackBottom !== undefined ? args.callbackBottom() : args.menu[0];
        var curentValueBottom = replaceSpace(visibleCValueBottom);
        buttonDPB.id = 'dropdownMenu' + this._countDropDown;
        dropDownPBottom.querySelector('.dropdown-menu').setAttribute('aria-labelledby', 'dropdownMenu' + this._countDropDown);
        buttonDPB.dataset.value = curentValueBottom;
        buttonDPB.querySelector('span').innerHTML = visibleCValueBottom;

        this._addEventListToDropdown(dropDownPTop);
        this._addEventListToDropdown(dropDownPBottom);

        dropDownPTop.classList.add('padding-top');
        dropDownPBottom.classList.add('padding-bottom');

        mediaPadding.appendChild(dropDownPTop);
        mediaPadding.appendChild(dropDownPBottom);

        var buttons = mediaPadding.querySelectorAll('.media-group button');

        Array.prototype.forEach.call(buttons, function (button) {
            button.addEventListener('click', function () {
                if (this.classList.contains('active')) {
                    this.classList.remove('active');
                    this.blur();
                    _this.media = 'default';
                } else {
                    _this.selection(this);
                    _this.media = this.dataset.id;
                }

                var buttonTop = mediaPadding.querySelector('.padding-top button');
                buttonTop.dataset.value = replaceSpace(firstDown(_this.paddingTop[_this.media]));
                buttonTop.querySelector('span').innerHTML = _this.paddingTop[_this.media];

                var buttonBottom = mediaPadding.querySelector('.padding-bottom button');
                buttonBottom.dataset.value = replaceSpace(firstDown(_this.paddingBottom[_this.media]));
                buttonBottom.querySelector('span').innerHTML = _this.paddingBottom[_this.media];
            });
        });

        this._selfDOM = mediaPadding;
    }
    , _loadMediaButtonsMode: function (options) {
        var _this = this;
        var DOM = options.obj;
        var pattern = new RegExp('\\s?' + _this.prefix + '(t|b)-?(xs|sm|md|lg|xl)?-(-?[0-9]*)', 'i');
        var patternG = new RegExp('\\s?' + _this.prefix + '(t|b)-?(xs|sm|md|lg|xl)?-(-?[0-9]*)', 'ig');

        var desktop = this._selfDOM.querySelector('.media-group [data-id=desktop]');
        var tablet = this._selfDOM.querySelector('.media-group [data-id=tablet]');
        var mobile = this._selfDOM.querySelector('.media-group [data-id=mobile]');

        if (pattern.test(DOM.className)) {
            var match = DOM.className.match(patternG);

            match.forEach(function (mt) {
                var m = mt.match(pattern);
                var paddingPosition = 'paddingTop';
                if (m[1] === 'b') paddingPosition = 'paddingBottom';

                var mode = 'default';
                if (m[2] === 'sm') {
                    mode = 'mobile';
                    mobile.classList.add('isset');
                }
                if (m[2] === 'md') {
                    mode = 'tablet';
                    tablet.classList.add('isset');
                }
                if (m[2] === 'lg') {
                    mode = 'desktop';
                    desktop.classList.add('isset');
                }

                _this[paddingPosition][mode] = m[3] + 'px';
            });
        }
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var paddingPosition = 'top';

                if (dropDown.classList.contains('padding-top')) {
                    _this.paddingTop[_this.media] = val;
                } else {
                    _this.paddingBottom[_this.media] = val;
                    paddingPosition = 'bottom';
                }

                var btn = {};

                btn.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
                btn.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
                btn.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

                if (_this.paddingTop[_this.media] === '-' && _this.paddingBottom[_this.media] === '-' && _this.media !== 'default') {
                    btn[_this.media].classList.remove('isset');
                } else if (_this.media !== 'default') {
                    btn[_this.media].classList.add('isset');
                }

                _this.doThis(button, paddingPosition);
            });
        });
    }
    , doThis: function(btn, paddingPosition) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                btn: btn
                , paddingPosition: paddingPosition
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

MediaPM.prototype.constructor = MediaPM;

var MediaTextAlign = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this.media = 'default';

    this.activeButtons = {
        default: ''
        , mobile: ''
        , tablet: ''
        , desktop: ''
    };

    ButtonsSwitch.apply(this, arguments);
    this._loadMediaButtonsMode(options);
};

MediaTextAlign.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _createElement: function(args) {
        var _this = this;
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        var sa = document.createElement('div');
        sa.className = 'item cs-element buttons-switch media-text-align' + classItem;
        sa.dataset.order = args.order || 999999;

        sa.innerHTML = '<div class="d-flex justify-content-between align-items-center">'
                + '<label>' + args.title + '</label>'
                + '<div class="media-group">'
                    + '<button data-id="mobile"><i class="icon-blr-sm-mobile"></i></button>'
                    + '<button data-id="tablet"><i class="icon-blr-sm-tablet"></i></button>'
                    + '<button data-id="desktop"><i class="icon-blr-sm-desktop"></i></button>'
                + '</div>'
            + '</div>'
            + '<div class="wrapper d-flex justify-content-between">'
            + '</div>';

        var buttonsList = sa.querySelector('.wrapper');

        args.buttons.forEach(function (button) {
            var btn = document.createElement('button');
            btn.dataset.value = button.value;
            if (args.isActive(button.value)) {
                btn.className = 'active';
            }

            btn.innerHTML = button.title;

            btn.addEventListener('click', _this._addEventListToSwitchButton.bind(_this, btn));

            buttonsList.appendChild(btn);
        });

        var buttons = sa.querySelectorAll('.media-group button');

        Array.prototype.forEach.call(buttons, function (button) {
            button.addEventListener('click', function () {
                var buttonActive = buttonsList.querySelector('.active');
                if (buttonActive) {
                    buttonActive.classList.remove('active');
                }

                if (this.classList.contains('active')) {
                    this.classList.remove('active');
                    this.blur();
                    _this.media = 'default';
                } else {
                    _this.selection(this);
                    _this.media = this.dataset.id;
                }

                if (_this.activeButtons[_this.media] !== '') {
                    var buttonFor = buttonsList.querySelector('[data-value=' + _this.activeButtons[_this.media] + ']');
                    buttonFor.classList.add('active');
                }
            });
        });

        this._selfDOM = sa;
    }
    , _loadMediaButtonsMode: function (options) {
        var _this = this;
        var DOM = options.obj;
        if (/\s?text-?(xs|sm|md|lg|xl)?-(left|right|center|justify)/i.test(DOM.className)) {
            var match = DOM.className.match(/\s?text-?(xs|sm|md|lg|xl)?-(left|right|center|justify)/ig, '');

            var desktop = this._selfDOM.querySelector('.media-group [data-id=desktop]');
            var tablet = this._selfDOM.querySelector('.media-group [data-id=tablet]');
            var mobile = this._selfDOM.querySelector('.media-group [data-id=mobile]');

            match.forEach(function (mt) {
                var m = mt.match(/\s?text-?(xs|sm|md|lg|xl)?-(left|right|center|justify)/i, '');
                var mode = 'default';
                if (m[1] === 'xs') {
                    mode = 'mobile';
                    mobile.classList.add('isset');
                }
                if (m[1] === 'sm' || m[1] === 'md') {
                    mode = 'tablet';
                    tablet.classList.add('isset');
                }
                if (m[1] === 'lg' || m[1] === 'xl') {
                    mode = 'desktop';
                    desktop.classList.add('isset');
                }

                _this.activeButtons[mode] = m[2];
            });
        }
    }
    , _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var btnM = {};

        btnM.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
        btnM.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
        btnM.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

        if (btn.classList.contains('active') && _this.media !== 'default') {
            btnM[_this.media].classList.add('isset');
        } else if (_this.media !== 'default') {
            btnM[_this.media].classList.remove('isset');
        }

        this.activeButtons[this.media] = btn.classList.contains('active') ? btn.dataset.value : '';

        this.doThis(btn);
    }
});

MediaTextAlign.prototype.constructor = MediaTextAlign;

var Opacity = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

Opacity.prototype = Object.assign(Object.create(baseElement.prototype), {
    _bindingListenerMove: null
    , _startX: 0
    , _createElement: function(args) {
        var _this = this;
        var opacity = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        opacity.className = 'item cs-element cs-opacity'
            + classItem;
        opacity.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';

        opacity.innerHTML = '<label>' + args.title + '<span class="value">' + value*100 + '%</span></label>'
            + '<div class="wrapper d-flex flex-wrap">'
            + '<span class="run-way"></span>'
            + '<span class="runner"></span>'
            + '</div>';

        this._addEventListToOpacity(opacity);

        var runWay = opacity.querySelector('.run-way');
        var runner = opacity.querySelector('.runner');

        //this is width of wrapper
        var width = 182;

        runWay.style.width = value * 100 + '%';
        runner.style.left = value * width + 'px';

        this._selfDOM = opacity;
    }
    , _addEventListToOpacity: function(opacity) {
        var _this = this;
        var runner = opacity.querySelector('.runner');

        _this._bindingListenerMove = _this._listenerMove.bind(_this, runner);

        runner.addEventListener('mousedown', function(e){
            e.preventDefault();
            _this._startX = e.clientX;
            document.addEventListener('mousemove', _this._bindingListenerMove);
        });

        document.addEventListener('mouseup', function(e){
            e.preventDefault();

            document.removeEventListener('mousemove', _this._bindingListenerMove);
        });
    }
    , _listenerMove: function (runner, e) {
        var parent = runner.parentElement;
        var boundintRect = parent.getBoundingClientRect();
        var runWay = parent.querySelector('.run-way');
        var halfWidthRunner = runner.getBoundingClientRect().width / 2;
        var left = boundintRect.left;
        var width = boundintRect.width;
        var current = left + halfWidthRunner;

        if ( !( e.clientX > ( left + width - halfWidthRunner) || e.clientX < ( left + halfWidthRunner ) ) ) {
            current = e.clientX;
        } else if (e.clientX > ( left + width - halfWidthRunner)) {
            current = left + width - halfWidthRunner;
        } else if (e.clientX < ( left + halfWidthRunner )) {
            current = left + halfWidthRunner;
        }

        var val = Math.round( ( (current - left - halfWidthRunner) / (width - halfWidthRunner * 2) ) * 100 ) / 100;
        var position = Math.round( ( (current - left - halfWidthRunner) / width) * 10000 ) / 10000;
        runner.style.left = position * 100 + '%';
        runWay.style.width = position * 100 + '%';
        runner.dataset.val = val;

        this._selfDOM.querySelector('.value').innerHTML = Math.round( val*100 ) + '%';

        this.doThis(val);
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

Opacity.prototype.constructor = Opacity;
var PaddingMargin = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

PaddingMargin.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var pmInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        pmInput.className = 'item cs-element cs-pm'
            + classItem;
        pmInput.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';

        if (!/(?:-?[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:-?[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:-?[0-9]+\.?[0-9]*[^\s]*?|auto)\s(?:-?[0-9]+\.?[0-9]*[^\s]*|auto)|none|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px 1px'");
        }

        var match = ['', '', '', ''];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        var top = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var right = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottom = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var left = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        pmInput.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="wrapper d-flex flex-wrap">'
                + '<input type="text" placeholder="Top" value="' + top + '" class="top text-center">'
                + '<input type="text" placeholder="Left" value="' + left + '" class="left text-center">'
                + '<div class="item center-center"></div>'
                + '<input type="text" placeholder="Right" value="' + right + '" class="right text-center">'
                + '<input type="text" placeholder="Bottom" value="' + bottom + '" class="bottom text-center">'
            + '</div>';

        this._addEventListToPmInput(pmInput, args.eventName);

        var inputs = pmInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = pmInput;
    }
    , _addEventListToPmInput: function(pmInput, eventName) {
        var _this = this;
        var inputs = pmInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = pmInput.querySelector('input.top').value;
                var right = pmInput.querySelector('input.right').value;
                var bottom = pmInput.querySelector('input.bottom').value;
                var left = pmInput.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                _this.doThis(val);
            });
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

PaddingMargin.prototype.constructor = PaddingMargin;
var Radio = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

Radio.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var radio = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        radio.className = 'item cs-element cs-radio-control'
            + classItem;
        radio.dataset.order = args.order || 999999;

        var items = '';
        var radioName = args.name || 'radio';
        var value = args.callback ? args.callback() : '';
        args.items.forEach(function(name, indx) {
            var checked = name === value ? 'checked' : '';
            items += '<label class="radio-inline">'
                + '<input type="radio" name="' + radioName + '" value="' + name.toLowerCase().replace(/[\s\/]/ig, '-') + '" ' + checked + '>'
                + '<span class="lbl">' + name + '</span>'
                + '</label>';
        });
        var title = args.title !== undefined && args.title !== '' ? '<label>' + args.title + '</label>' : '' ;
        radio.innerHTML = title
            + '<div class="supra radio">'
            + items
            + '</div>';


        this._addEventListToHalfInput(radio);

        this._selfDOM = radio;
    }

    , _addEventListToHalfInput: function(radio) {
        var _this = this;

        var radioInputs = radio.querySelectorAll('.radio-inline input');
        Array.prototype.forEach.call(radioInputs, function(item) {
            item.addEventListener('change', function(e) {
                e.preventDefault();
                this.checked = true;
                _this.doThis(this.parentElement.querySelector('span').innerHTML);
            });
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

Radio.prototype.constructor = Radio;
var SwitchGroup = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;

    this._createElement(options);
};

SwitchGroup.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var switchGroup = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        switchGroup.className = 'item cs-element d-flex justify-content-between align-items-center cs-switch-group'
            + classItem;
        switchGroup.dataset.order = args.order || 999999;

        var checked = '';
        var value = args.callback ? args.callback() : false;
        var check = value ? 'switch-on' : 'switch-off';
        if (value) checked = 'checked="true"';
        switchGroup.innerHTML = '<label>' + args.title + '</label>' +
            '<div class="switch ' + check + '">'
            + '<input type="checkbox" name="switch" ' + checked + '/>'
            + '<div class="wrap">'
            + '<span class="switch-label"></span>'
            + '</div>'
            + '</div>';


        this._addEventListToHalfInput(switchGroup);

        this._selfDOM = switchGroup;
    }

    , _addEventListToHalfInput: function(switchGroup) {
        var _this = this;
        switchGroup.querySelector('.switch').addEventListener('click', function (e) {
            e.preventDefault();
            var input = this.querySelector('input');
            if (this.classList.contains('switch-on')) {
                this.classList.remove('switch-on');
                this.classList.add('switch-off');
                input.removeAttribute('checked');
            } else {
                this.classList.remove('switch-off');
                this.classList.add('switch-on');
                input.setAttribute('checked', '');
            }

            var val = input.checked;
            _this.doThis(val);
        });
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

SwitchGroup.prototype.constructor = SwitchGroup;
var VideoBase = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this._selfDOM = null;
    this._options = options;

    this._createElement(options);
};

VideoBase.prototype = Object.assign(Object.create(baseElement.prototype), {
    _createElement: function(args) {
        var _this = this;
        var imageBase = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        imageBase.className = 'item cs-element input-img'
            + classItem;
        imageBase.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        // value = value === "" ? 'none' : value;

        imageBase.innerHTML = '<label>' + args.title + '</label>'
            + '<div class="input-image">'
            + '<input type="text" value="' + value + '" class="choice-images">'
            + '<i class="icon-blr-gallery"></i>'
            + '</div>';

        var i = imageBase.querySelector('i');
        i.addEventListener('click', function() {
            var modGallery = new Modal('supra-modal-gallery', 'GalleryVideo', {
                parentModal: {
                    _selfDOM: imageBase
                    , _elements: {
                        figure: imageBase.querySelector('figure')
                    }
                }
                , targetElement: imageBase.querySelector('.input-image')
                , type: args.type || 'normal'
            });

            $(modGallery).on('hidden.bs.modal', function (e) {
                var val = imageBase.querySelector('.input-image input').value;
                // if (val === '') img.style.display = 'none';
                // else img.style.display = 'block';
                _this._listenerToVideoBase(val);
            });
        });

        var input = imageBase.querySelector('.choice-images');

        input.addEventListener('blur', this._listenerToManualVideoBase.bind(this, input));

        this._selfDOM = imageBase;
    }
    , _listenerToVideoBase: function(src) {
        this.doThis(src);
    }
    , _listenerToManualVideoBase: function(input, e) {
        this.doThis(input.value);
    }
    , doThis: function(val) {
        var eventCheckSelect = new CustomEvent(
            'custom.event'
            , {'detail': {
                val: val
                , this: this
            }}
        );
        this._selfDOM.dispatchEvent(eventCheckSelect);
    }
});

VideoBase.prototype.constructor = VideoBase;
var ControlPanel = function (options) {
    if (
        options.title === undefined
    ) {
        throw new ReferenceError ("Expected variables options.title");
    }

    this._options = options;

    this._initPanel(options);
};

ControlPanel.prototype = Object.assign(Object.create(Core.prototype), {
    _selfDOM: null
    , title: null
    , _controlButton: null

    , _initPanel: function (options) {
        this._createPanel(options);

        if (options.closeButton) {
            this.addCloseButton();
        }

        if (options.bookmark) {
            this.addBookmark();
        }
    }
    , openPanel: function (button) {
        var _this = this;
        if (
            button.classList.contains('active')
            // || _this.body.classList.contains('slide-show-panel')
        ) return;

        _this.body.classList.remove('thin');

        if (
            _this.leftPanel.getActivePanel()
            && _this.leftPanel.getActivePanel() !== _this
        ) {


            _this._selfUnactive(_this.leftPanel.getActivePanel().getDOMSelf());

            if (_this.leftPanel.getActivePanel().type === 'modeOfBuilder') {
                _this._selfUnactive(_this.leftPanel.getActivePanel().getControlButton());
            } else {
                var activePanel = _this.leftPanel.getActivePanel().getDOMSelf();
                activePanel.parentElement.removeChild(activePanel);
            }

            if (
                _this.type === 'modeOfBuilder'
            ) {
                var pageDOM = _this.getActivePageObject().getDOMSelf();
                pageDOM.className = pageDOM.className.replace(/\spage-mode[^\s]*/, '');
                pageDOM.classList.add(_this.pageMode);

                var changeMode = new CustomEvent(
                    'modeOfBuilder.change'
                    , {
                        'detail': {mode: _this.pageMode}
                    }
                );

                document.dispatchEvent(changeMode);
            }
        }

        if (
            _this.leftPanel.getActivePanel().getLevel3()
            && _this.leftPanel.getActivePanel().getLevel3().classList.contains('show')
        ) {
            _this.leftPanel.getActivePanel().getLevel3().classList.remove('show');
        }

        if (this._fixedRightSide && !this._options.closeButton) {
            this.enableBookmark();
        } else {
            this.disableBookmark();
        }

        //TODO: will check it
        var checkShowPanel = document.querySelector('.add-sections-items, .global-style-controls');
        if (checkShowPanel) checkShowPanel.classList.remove('show');

        _this._selectionWithSelfUnactive(_this._selfDOM);
        if (button) _this.selection(button);
        _this.leftPanel.setActivePanel(_this);
    }
    , openPanelElement: function () {
        var _this = this;
        _this._selectionWithSelfUnactive(_this._selfDOM);
        var activePanel = _this.leftPanel.getCustomActivePanel();
        if (activePanel)
            activePanel.getDOMSelf().parentElement.removeChild(activePanel.getDOMSelf());
        _this.leftPanel.setCustomActivePanel(_this);
    }
    , _createPanel: function (options) {
        var panel = document.createElement('aside');
        var additionalClass = options.className ? ' ' + options.className : '';
        panel.className = 'control-panel' + additionalClass;

        var title = document.createElement('div');
        title.className = 'title d-flex justify-content-between align-items-center';
        title.innerHTML = '<h3>' + options.title + '</h3>';

        this._selfDOM = panel;
        this.title = title;

        panel.appendChild(title);
    }
    , getDOMSelf: function () {
        return this._selfDOM;
    }
    , addCloseButton: function () {
        var _this = this;
        var closeButton = document.createElement('button');
        closeButton.className = 'close';
        this.title.appendChild(closeButton);

        closeButton.addEventListener('click', function () {
            if (_this._selfDOM.classList.contains('active')) {
                _this._selfDOM.classList.remove('active');
            }
        });
    }
    , addBookmark: function () {
        var _this = this;
        var bookmark = document.createElement('i');
        bookmark.className = 'supra bookmark';
        this.title.appendChild(bookmark);

        bookmark.addEventListener('click', function () {
            if (!_this._selfDOM.classList.contains('pin')) {
                _this.enableBookmark.call(_this);
            } else {
                _this.disableBookmark.call(_this);
            }
        });
    }
    , enableBookmark: function () {
        if (!this._selfDOM.classList.contains('pin')) {
            this._selfDOM.classList.add('pin');
            this.body.classList.add('pin');
            Core.prototype._fixedRightSide = true;
        }
    }
    , disableBookmark: function () {
        // if (this._selfDOM.classList.contains('pin')) {
            this._selfDOM.classList.remove('pin');
            this.body.classList.remove('pin');
            Core.prototype._fixedRightSide = false;
        // }
    }
    //TODO: this need to be move to LeftPanel
    , getControlButton: function () {
        if (this._controlButton) {
            return this._controlButton;
        }

        var controlButton = document.createElement(this.controlButtonOptions.tag);
        controlButton.className = this.controlButtonOptions.className;
        controlButton.id = this.name;
        controlButton.innerHTML = this.controlButtonOptions.innerHTML;

        controlButton.addEventListener('click', this.openPanel.bind(this, controlButton));

        this._controlButton = controlButton;

        return controlButton;
    }
    , getLevel3: function () {
        return null;
    }
});

ControlPanel.prototype.constructor = ControlPanel;

var SectionPreview = function (section) {
    if (
        section.name === undefined
        || section.groupName === undefined
        || section.overallJs === undefined
        || section.html === undefined
        || section.style === undefined
        || section.script === undefined
        || section.preview === undefined
    ) {
        throw new ReferenceError ("Expected variables section and groupName");
    }

    this.name = section.name;
    this.groupName = section.groupName;
    this.overallJs = section.overallJs;
    this.html = section.html;
    this.style = section.style;
    this.script = section.script;
    this.preview = section.preview;
};

SectionPreview.prototype = Object.assign(Object.create(Core.prototype), {
    name: ''
    , groupName: ''
    , overallJs: ''
    , html: ''
    , style: ''
    , script: ''
    , preview: ''
    , _selfDOM: null

    , getDOMSelf: function () {
        if (this._selfDOM) {
            return this._selfDOM;
        }
        var li = document.createElement('li');
        li.className = 'wrap-hover d-flex justify-content-center align-items-center';
        li.dataset.group = this.groupName;
        li.dataset.name = this.name;

        var img = new Image();
        img.src = this.preview;

        var i = document.createElement('i');
        i.className = 'icon-blr-plus add-section';

        li.appendChild(img);
        li.appendChild(i);

        this._selfDOM = li;

        return li;
    }

    , get: function (sections) {
        return new Section({sectionPreview: this, sections: sections});
    }
});

SectionPreview.prototype.constructor = SectionPreview;

var Section = function (options) {
    if (
        options.sectionPreview === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    if (
        options.mode !== 'load'
        && options.mode !== 'copy'
        && !(options.sectionPreview instanceof SectionPreview)
    ) {
        throw new TypeError("Expected type of SectionPreview");
    }

    this.sectionPreview = options.sectionPreview;
    this.name = options.name || options.sectionPreview.name;

    if (options.mode === 'load') {
        this._selfDOM = options.li;
        this._initExtension(options);
    } else if (options.mode === 'copy') {
        this._selfDOM = options.li;
    } else {
        this._createDOMSection(options.sections);
    }
};

Section.prototype = Object.assign(Object.create(SectionPreview.prototype), {
    name: ''
    , sectionPreview: null
    , _selfDOM: null

    , getDOMSelf: function () {
        return this._selfDOM;
    }
    , _initExtension: function (args) {
        var li = args.li;
        var section = args.section || li.children[0];
        var script = args.script || li.querySelector('script');
        var _this = this;

        //for popup
        if (section.classList.contains('modal')) {
            this.createPopupThumb(section);
            // li.style.display = 'none';
        }

        //for alert and panel
        if (
            section.classList.contains('modal-alert')
            || section.classList.contains('modal-panel')
        ) {
            this.createPopupThumb(section);
        }

        //forms
        var form = section.querySelector('form');
        if (form) {
            _this.addNewForm(form, section);
        }

        //maps
        var map = section.querySelector('.g-map');
        if (map) {
            var id = _this.addNewGMap(map, section, script);
            _this.changeIdGMapInScript(script, id);
        }

        //counter down
        var countDown = section.querySelector('.countdown');
        if (countDown) {
            if ( /(countdown\(\s*')[^']*/i.test(script.innerHTML) ) {
                var date = new Date();
                date.setMonth(date.getMonth() + 1);
                var year = date.getFullYear();
                var month = ( date.getMonth() + 1 ).toString().length < 2 ? '0' + ( date.getMonth() + 1 ) : ( date.getMonth() + 1 );
                var day = date.getDate().toString().length < 2 ? '0' + date.getDate() : date.getDate();
                var dateStr = year + '/' + month + '/' + day + ' 23:59:59';
                script.innerHTML = script.innerHTML.replace(/(countdown\(\s*')[^']*/i, '$1' + dateStr);
            }

            var id = _this.addNewCountDown(countDown, section);
            _this.changeIdCountDownInScript(script, id);
        }

        var instaffed = section.querySelector('.instafeed');
        if (instaffed && args.mode !== 'load') {
            var id = _this.addNewInstafeed(instaffed, section);
            _this.changeIdInstafeedInScript(script, id);
        }

        var twitterfeed = section.querySelector('.twitterfeed');
        if (twitterfeed && args.mode !== 'load') {
            var id = _this.addNewTwitterfeed(twitterfeed, section);
            _this.changeIdTwitterfeedInScript(script, id);
        }

        var navsTabs = li.querySelectorAll('.nav-tabs');
        if (navsTabs) {
            Array.prototype.forEach.call(navsTabs, function (navTabs, indx) {
                _this.copySectionWithNavTab(navTabs, indx, li);
            });
        }

        var accordions = li.querySelectorAll('.accordion');
        if (accordions) {
            Array.prototype.forEach.call(accordions, function (accordion, indx) {
                _this.copySectionWithAccordion(accordion, indx, li);
            });
        }

        // li.dataset.minWidth = (option.length - 1) * 42 + 'px';
        //
        // _this.addSectionToDataPage(li);

        // counter up
        if (section.classList.contains('counter-up')) {
            _this.changeIdCountUpInScript(script, section.id);
        }

        // circularChart
        if (section.querySelector('.circular-chart')) {
            _this.changeIdCircularPlayInScript(script, section.id);
        }
    }
    , _createDOMSection: function (sections) {
        var _this = this;
        var li = document.createElement('li');
        li.className = 'section-item';
        li.dataset.name = _this.name;
        li.dataset.group = _this.sectionPreview.groupName;
        li.dataset.img = _this.sectionPreview.preview;
        li.innerHTML = _this.sectionPreview.html;

        var section = li.children[0];
        var modalContent = section.querySelector('.modal-content');

        if (_this.defaultStyleType !== ''
            && !section.classList.contains('light')
            && !section.classList.contains('dark')
        ) {
            if (section.classList.contains('modal')
                && modalContent
                && !modalContent.classList.contains('light')
                && !modalContent.classList.contains('dark')
            ) {
                modalContent.classList.add( _this.defaultStyleType );
            } else if (section.tagName !== 'NAV' && !section.classList.contains('modal')) {
                section.classList.add( _this.defaultStyleType );
            } else if (section.tagName === 'NAV') {
                var i = 0;
                while(li.children[i]) {
                    section = li.children[i];
                    section.classList.add( _this.defaultStyleType );
                    i++;
                }
            }
        }

        var style = document.createElement('style');
        style.innerHTML = _this.sectionPreview.style;
        li.appendChild(style);

        var script = document.createElement('script');
        script.setAttribute('type', 'text/javascript');
        if (_this.sectionPreview.overallJs) {
            script.innerHTML = "//delete\n"
                + "setTimeout(function(){"
                + _this.sectionPreview.overallJs
                + "\n}, 150);\n"
                + "//deleteend";
        }
        var sectionScript = _this.sectionPreview.script || '';
        var startTimeOut = "//delete\n"
            + "setTimeout(function(){\n"
            + "//deleteend\n";
        var endTimeOut = "\n//delete\n"
            + "}, 150);\n"
            + "//deleteend";
        if (sectionScript.search(/owlCarousel/im) === -1) {
            startTimeOut = endTimeOut = '';
        }
        script.innerHTML += "\n"
            + startTimeOut
            + sectionScript
            + endTimeOut;
        li.appendChild(script);

        while (sections[section.id] !== undefined) {
            var args = section.id.split('--');
            if (args[1]) {
                section.id = args[0] + '--' + ((args[1] * 1) + 1);
            } else {
                section.id = args[0] + '--0';
            }

        }

        if (section.id.split('--')[1]) {
            var pattern = new RegExp('#' + section.id.split('--')[0] + '(--[0-9]*)?\\s', 'gim');
            style.innerHTML = style.innerHTML.replace(pattern, '#' + section.id + ' ');
        }

        this._initExtension({
            li: li
            , section: section
            , script: script
        });

        this._selfDOM = li;
    }
    /**
     *
     * @param DOM {HTMLElement}
     * @TODO: need to be refactoring this crutches
     */
    , deleteElement: function(DOM, wrap) {
        var _this = this;
        var ElForDel = DOM;
        var delFuncGMap = '';
        var script = null;
        var nav = _this.findParent(DOM, ['nav']);
        var masonryFilter = this.findParent(DOM, ['masonry-filter']);

        var parent = ElForDel.parentElement;
        var next = ElForDel.nextElementSibling;

        var nextElement = DOM.nextElementSibling;
        if (DOM.parentElement.className.search(/buttons-control/i) !== -1) {
            ElForDel = DOM.parentElement;
            wrap = DOM.parentElement;
            nextElement = ElForDel.nextElementSibling ? ElForDel.nextElementSibling.children[0] : null;
        } else if (nav && parent.tagName === 'LI') {
            // ElForDel = parent;
            // wrap = ElForDel;
            // nextElement = ElForDel.nextElementSibling;
            // parent = parent.parentElement;
        } else if (parent.tagName === 'A' && parent.childNodes.length === 1) {
            ElForDel = parent;
            wrap = ElForDel;
            nextElement = ElForDel.nextElementSibling;
            parent = parent.parentElement;
            DOM = ElForDel;
        }

        //if (ElForDel.parentElement.className.search(/buttons-control/i) !== -1) ElForDel = ElForDel.parentElement;


        var tabPane = null;
        var tabPaneParent = null;
        var tabPaneNext = null;

        var owlItem = _this.findParent(DOM, ['owl-item']);
        if (owlItem && DOM.classList.contains('item')) {
            var owl = _this.findParent(owlItem, ['spr-gallery']);
            var position = _this._getPositionInGallery(owlItem, owl);
            _this.windowIframe.jQuery(owl).trigger('remove.owl.carousel', position).trigger('refresh.owl.carousel');
        }

        if (DOM.classList.contains('g-map')) {
            var li = _this.findParent(DOM, ['section-item']);
            script = li.querySelector('script');
            delFuncGMap = _this.deleteFunctionInitGmap(script, DOM.id);
        }

        if (DOM.children[0] && DOM.children[0].getAttribute("role") === "tab") {
            var li = _this.findParent(DOM, ['section-item']);
            var hash = DOM.children[0].href.match(/#.*/) ? DOM.children[0].href.match(/#.*/)[0] : '';
            if (hash !== '') {
                tabPane = li.querySelector( hash );
                tabPaneParent = tabPane.parentElement;
                tabPaneNext = tabPane.nextSibling;
                tabPane.parentElement.removeChild( tabPane );
            }
        }

        var currPageObj = _this.getActivePageObject();
        var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);

        _this.removeNowrapSuperStructure(_this.documentIframe);

        _this.setStep(function() {
            var ElForAppend = DOM;
            if (nav) {
                ElForAppend = ElForDel;
            }

            var mode = document.querySelector('aside.left nav li.active').id;

            if (mode !== 'default-styles') {
                ElForAppend.removeAttribute('style');
                next = nextElement;
            } else {
                ElForAppend = wrap;
                if (wrap && wrap.children.length < 2 && !nav) {
                    wrap.appendChild(DOM);
                    next = next.parentElement;
                } else {
                    ElForAppend = DOM;
                }
            }
            var currentPageObj = _this.getActivePageObject();
            if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                _this.leftPanel.cPanels['project-pages'].changeActivePage(currPageObj, activeItem, currPageObj.id)
            }
            if (owlItem && DOM.classList.contains('item')) {
                _this.windowIframe.jQuery(owl).trigger('add.owl.carousel', [$(ElForAppend), position]).trigger('refresh.owl.carousel');
            } else {
                if (delFuncGMap !== '' && script) {
                    script.innerHTML += delFuncGMap;
                }
                if (parent) {
                    if (next) {
                        parent.insertBefore(ElForAppend, next);
                    } else {
                        parent.appendChild(ElForAppend);
                    }
                }

                if (mode === 'default-styles') {
                    _this.rebuildControl(ElForAppend);
                }

            }

            if (tabPane) {
                if (tabPaneParent) {
                    if (tabPaneNext) {
                        tabPaneParent.insertBefore(tabPane, tabPaneNext);
                    } else {
                        tabPaneParent.appendChild(tabPane);
                    }
                }

                var activeS = parent.parentElement.querySelectorAll('.active');
                Array.prototype.forEach.call(activeS, function(el){
                    el.classList.remove('active');
                    if (el.classList.contains('in')) {
                        el.classList.remove('in');
                    }
                });

                ElForAppend.classList.add('active');
                tabPane.classList.add('active');
                tabPane.classList.add('in');
            }


            var currPageObjS = _this.getActivePageObject();
            var activeItemS = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObjS.id);

            _this.setStep(function() {
                var li = _this.findParent(DOM, ['section-item']);
                var currentPageObj = _this.getActivePageObject();
                if (currPageObjS && currPageObjS.id !== currentPageObj.id ) {
                    _this.leftPanel.cPanels['project-pages'].changeActivePage(currPageObjS, activeItemS, currPageObjS.id)
                }
                currPageObjS.sections[li.children[0].id].deleteElement(DOM, wrap);
            });
        });

        ElForDel.parentElement.removeChild(ElForDel);

        if(masonryFilter) {
            this.windowIframe.jQuery(masonryFilter).data('masonry.filter').refresh();
        }
    }

});

Section.prototype.constructor = Section;
"use strict";

var ConstructForm = function() {

	this.innerContent = document.createElement('div');
    this.innerContent.className = 'd-flex';
	this.innerContent.innerHTML =  	'<div class="construct-form-sidebar col-md-4  ">'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="text-field-sidebar-btn">'+
		'<i class="icon-blr-textfield"></i>'+
		'Text field'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="email-field-sidebar-btn">'+
		'<i class="icon-blr-emailfield"></i>'+
		'Email field'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="select-field-sidebar-btn">'+
		'<i class="icon-blr-selectfield"></i>'+
		'Select field'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="textarea-sidebar-btn">'+
		'<i class="icon-blr-textarea"></i>'+
		'Textarea'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="radio-button-sidebar-btn">'+
		'<i class="icon-blr-radiobtn"></i>'+
		'Radio button'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="checkbox-sidebar-btn">'+
		'<i class="icon-blr-checkbox"></i>'+
		'Checkbox'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="date-sidebar-btn">'+
		'<i class="icon-blr-datefield"></i>'+
		'Date'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="text-sidebar-btn">'+
		'<i class="icon-blr-simpletext"></i>'+
		'Text'+
		'</button>'+
		'<button type="button" class="btn-default sidebar-btn draggable" id="file-sidebar-btn">'+
		'<i class="icon-blr-attachfield"></i>'+
		'Attach file'+
		'</button>'+
		'</div>'+
		'<div class="construct-form-main col-md-8 ">'+
		'<div class="construct-form-main-inner droppable"></div>'+
		'</div>';

	this.iconsArray = [];

};

ConstructForm.prototype = {

	/**
	 * Render window of Constructor Form
	 * @returns {Node}
	 */
	getConstructorForm: function(outputData){

		/**
		 * Init ConstructorForm & EventListeners
		 */
		this.initEventListeners();
		this.initDragDrop();

		/**
		 * Work with the transferred object and render default form
		 */
		for(var key in outputData) {
			var obj = outputData[key];

			switch (obj.type) {
				case 'textField':
					this._getTextField(obj);
					break;
				case 'emailField':
					this._getEmailField(obj);
					break;
				case 'selectField':
					this._getSelectField(obj);
					break;
				case 'textarea':
					this._getTextArea(obj);
					break;
				case 'radioButton':
					this._getRadioButton(obj);
					break;
				case 'checkbox':
					this._getCheckbox(obj);
					break;
				case 'dateField':
					this._getDate(obj);
					break;
				case 'text':
					this._getText(obj);
					break;
				case 'file':
					this._getFileField(obj);
					break;
				default:
					console.log('ERROR: object incorrect');
			}
		}

		return this.innerContent;

	},
	/**
	 * Initialise EventListeners when window loading complete
	 */
	initEventListeners: function (){
		var _this = this;
		var buttonTextField = this.innerContent.querySelector('#text-field-sidebar-btn');
		buttonTextField.addEventListener('click', function(){
			_this._getTextField();
		});

		var buttonEmail = this.innerContent.querySelector('#email-field-sidebar-btn');
		buttonEmail.addEventListener('click', function(){
			_this._getEmailField();
		});

		var buttonSelect = this.innerContent.querySelector('#select-field-sidebar-btn');
		buttonSelect.addEventListener('click', function(){
			_this._getSelectField();
		});

		var buttonTextarea = this.innerContent.querySelector('#textarea-sidebar-btn');
		buttonTextarea.addEventListener('click', function(){
			_this._getTextArea();
		});

		var buttonRadio = this.innerContent.querySelector('#radio-button-sidebar-btn');
		buttonRadio.addEventListener('click', function(){
			_this._getRadioButton();
		});

		var buttonCheckbox = this.innerContent.querySelector('#checkbox-sidebar-btn');
		buttonCheckbox.addEventListener('click', function(){
			_this._getCheckbox();
		});

		var buttonDate = this.innerContent.querySelector('#date-sidebar-btn');
		buttonDate.addEventListener('click', function(){
			_this._getDate();
		});

		var buttonFile = this.innerContent.querySelector('#file-sidebar-btn');
		buttonFile.addEventListener('click', function(){
			_this._getFileField();
		});

		var buttonText = this.innerContent.querySelector('#text-sidebar-btn');
		buttonText.addEventListener('click', function(){
			_this._getText();
		});

	},

	/**
	 * Initialise Sidebar Drag'n'Drop
	 */
	initDragDrop: function (){
		var _selfSidebarDrop = this;
		var DragManager = new function() {
			var dragObject = {};
			var self = this;

			function onMouseDown(e) {

				if (e.which != 1) return;

				if(e.target.closest('.draggable')){
					var elem = e.target.closest('.draggable');
					// Save params for clone object
					var objectClone = elem.cloneNode(true);
					objectClone.style.position = 'absolute';
					objectClone.style.width = '200px';
					var shiftX = e.pageX - getCoords(elem).left;
					var shiftY = e.pageY - getCoords(elem).top;
					objectClone.style.border = '1px #aaaaaa dotted';
					// objectClone.style.backgroundColor = '#f4f4f4';
					objectClone.style.zIndex = 10003000;
					objectClone.style.left = e.pageX - shiftX + 'px';
					objectClone.style.top = e.pageY - shiftY + 'px';
					dragObject.objectClone = objectClone;
					dragObject.dragType = 'sidebar';
					dragObject.elem = objectClone;
				}
				if(e.target.closest('.object-title-bar')){
					var elem = e.target.closest('.object-title-bar').closest('.object-area');
					dragObject.dragType = 'title';
					dragObject.elem = elem;
				}

				if (!elem) return;

				/*
				 * remember that the element is pressed on the current coordinates pageX / pageY
				 */
				dragObject.downX = e.pageX;
				dragObject.downY = e.pageY;

				return false;
			}

			function onMouseMove(e) {

				if (!dragObject.elem){
					return;
				}

				/*
				 * If the transfer is not started
				 */
				if (!dragObject.avatar) {
					var moveX = e.pageX - dragObject.downX;
					var moveY = e.pageY - dragObject.downY;

					if (Math.abs(moveX) < 3 && Math.abs(moveY) < 3) {
						return;
					}

					if(dragObject.dragType == 'sidebar'){
						/*
						 * create clone object
						 */
						document.body.appendChild(dragObject.objectClone);
					}

					/*
					 * transfer start
					 */
					dragObject.avatar = createAvatar(e); // создать аватар
					if(dragObject.dragType == 'sidebar'){
						dragObject.avatar.className += ' destroy-me';
					}

					if (!dragObject.avatar) {
						dragObject = {};
						return;
					}

					/*
					 * avatar created done
					 */
					var coords = getCoords(dragObject.avatar);
					dragObject.shiftX = dragObject.downX - coords.left;
					dragObject.shiftY = dragObject.downY - coords.top;

					startDrag(e);
				}

				/*
				 * render obj with each mouse movement
				 */
				dragObject.avatar.style.left = e.pageX - dragObject.shiftX + 'px';
				dragObject.avatar.style.top = e.pageY - dragObject.shiftY + 'px';

				selectDropArea(e);

				return false;
			}

			/**
			 * when transfer is going
			 */
			function onMouseUp(e) {
				if (dragObject.avatar) {
					finishDrag(e);
				}

				/*
				 * Transfer either did not start, or ended... Clear the "transfer state"
				 */
				dragObject = {};
			}

			function finishDrag(e) {
				var dropElem = findDroppable(e);

				if (!dropElem) {
					self.onDragCancel(dragObject);
				} else {
					self.onDragEnd(dragObject, dropElem);
				}
			}

			function createAvatar(e) {

				var avatar = dragObject.elem;
				var old = {
					parent: avatar.parentNode,
					nextSibling: avatar.nextSibling,
					position: avatar.position || '',
					left: avatar.left || '',
					top: avatar.top || '',
					zIndex: avatar.zIndex || ''
				};

				avatar.rollback = function() {
					old.parent.insertBefore(avatar, old.nextSibling);
					avatar.style.position = old.position;
					avatar.style.left = old.left;
					avatar.style.top = old.top;
					avatar.style.zIndex = old.zIndex
				};

				return avatar;
			}

			function startDrag(e) {

				var avatar = dragObject.avatar;

				/*
				 * init transfer
				 */
				if(dragObject.dragType == 'sidebar'){
					var modalContainer = document.querySelector('#modal-container');
					modalContainer.appendChild(avatar);
					avatar.style.zIndex = 10009999;
					avatar.style.position = 'absolute';
					avatar.style.width = '195px';
				}
				if(dragObject.dragType == 'title'){
					var modalContainer = document.querySelector('#modal-container');
					modalContainer.appendChild(avatar);
					avatar.style.width = '348px';
					avatar.style.zIndex = 10009999;
					avatar.style.position = 'absolute';
				}


			}

			function selectDropArea(event){
				dragObject.avatar.hidden = true;
				var elem = document.elementFromPoint(event.clientX, event.clientY);
				var topDropBlock = document.querySelector('.top-drop');
				var bottomDropBlock = document.querySelector('.bottom-drop');

				/*
				 * REMOVE drop area the TOP of object
				 */
				if(!elem){
					return;
				}
				if(elem.closest('.object-title-bar') == null && elem.closest('.top-drop') == null){
					var forDestroy = document.querySelector('.top-drop');
					if(forDestroy){
						var prevObj = forDestroy.previousSibling;
						if(prevObj){
							prevObj.style.marginBottom = '10px';
						}
						forDestroy.remove();
					}
				}

				/*
				 * REMOVE drop area a BOTTOM of object
				 */
				if(elem.closest('.toggle-area') == null & elem.closest('.bottom-drop') == null){
					var forDestroy = document.querySelector('.bottom-drop');
					if(forDestroy){
						var prevObj = forDestroy.previousSibling;
						prevObj.style.marginBottom = '10px';
						forDestroy.remove();
					}
				}

				/*
				 * CREATE drop area the TOP of object
				 */
				if(elem.closest('.object-title-bar') != null && !topDropBlock){
					var objectEl = elem.closest('.object-area');
					var parentEl = elem.closest('.object-area').parentNode;
					var blockForDrop = document.createElement("div");
					blockForDrop.className = "block-for-drop top-drop";
					var insertedElement = parentEl.insertBefore(blockForDrop, objectEl);
					var prevObj = insertedElement.previousSibling;
					if(prevObj){
						prevObj.style.marginBottom = '0px';
					}
				}

				/*
				 * CREATE drop area on BOTTOM of object
				 */
				if(elem.closest('.toggle-area') != null && !bottomDropBlock){
					if(elem.closest('.toggle-area').lastChild != null){
						var objectEl = elem.closest('.object-area');
						objectEl.style.marginBottom = '0px';
						var parentEl = elem.closest('.object-area').parentNode;
						var blockForDrop = document.createElement("div");
						blockForDrop.className = "block-for-drop bottom-drop";
						var insertedElement = parentEl.insertBefore(blockForDrop, objectEl.nextSibling);
					}
				}

				dragObject.avatar.hidden = false;
			}

			function findDroppable(event) {
				dragObject.avatar.hidden = true;

				var elem = document.elementFromPoint(event.clientX, event.clientY);

				dragObject.avatar.hidden = false;

				if (elem == null) {
					return null;
				}

				var blockForDrop = document.querySelector('.block-for-drop');
				if(elem.closest('.droppable') != null){
					if(blockForDrop){
						if(blockForDrop.className.match('top-drop')){
							var dropElem = {
								block: blockForDrop.nextSibling,
								type: 'insertBefore'
							};
							return dropElem;
						}
						if(blockForDrop.className.match('bottom-drop')){
							var dropElem = {
								block: blockForDrop.previousSibling,
								type: 'insertAfter'
							};
							return dropElem;
						}
					} else {
						var dropElem = {
							block: elem.closest('.droppable'),
							type: 'append'
						};
						return dropElem;
					}
				}

			}

			document.onmousemove = onMouseMove;
			document.onmouseup = onMouseUp;
			document.onmousedown = onMouseDown;

			this.onDragEnd = function(dragObject, dropElem) {

				if(dragObject.dragType == 'sidebar'){
					var forDestroy = document.querySelector('.block-for-drop');

					if(forDestroy){
						forDestroy.remove();
					}
					if(dragObject.elem.id.match('text-field-sidebar-btn') != null){
						_selfSidebarDrop._getTextField(null, dropElem);
					}
					if(dragObject.elem.id.match('email-field-sidebar-btn') != null){
						_selfSidebarDrop._getEmailField(null, dropElem);
					}
					if(dragObject.elem.id.match('select-field-sidebar-btn') != null){
						_selfSidebarDrop._getSelectField(null, dropElem);
					}
					if(dragObject.elem.id.match('textarea-sidebar-btn') != null){
						_selfSidebarDrop._getTextArea(null, dropElem);
					}
					if(dragObject.elem.id.match('radio-button-sidebar-btn') != null){
						_selfSidebarDrop._getRadioButton(null, dropElem);
					}
					if(dragObject.elem.id.match('checkbox-sidebar-btn') != null){
						_selfSidebarDrop._getCheckbox(null, dropElem);
					}
					if(dragObject.elem.id.match('date-sidebar-btn') != null){
						_selfSidebarDrop._getDate(null, dropElem);
					}
					if(dragObject.elem.id.match('text-sidebar-btn') != null){
						_selfSidebarDrop._getText(null, dropElem);
					}
                    if(dragObject.elem.id.match('file-sidebar-btn') != null){
                        _selfSidebarDrop._getFileField(null, dropElem);
                    }
					// delete avatar
					var forDestroy = document.querySelectorAll('.destroy-me');
					forDestroy[0].remove();
				}

				if(dragObject.dragType == 'title'){
					dragObject.elem.style.border = 'none';
					if(dropElem.type === 'append'){
						dragObject.elem.style.width = '100%';
						dragObject.elem.rollback();
					}
					if(dropElem.type === 'insertBefore'){
						var forDestroy = document.querySelector('.block-for-drop');
						if(forDestroy){
							forDestroy.remove();
						}
						var nextObj = dropElem.block;
						var prev = 	nextObj.previousSibling;
						if(prev){
							nextObj.previousSibling.style.marginBottom = '10px';
						}
						dragObject.elem.style.position = 'inherit';
						dragObject.elem.style.width = '100%';
						var parentBlock =  nextObj.closest('.object-area').parentNode;
						parentBlock.insertBefore(dragObject.elem, nextObj);
					}
					if(dropElem.type === 'insertAfter'){
						var forDestroy = document.querySelector('.block-for-drop');
						if(forDestroy){
							forDestroy.remove();
						}
						if(dropElem.type === 'insertAfter'){
							dragObject.elem.style.position = 'inherit';
							dragObject.elem.style.width = '100%';
							var previousObj = dropElem.block;
							previousObj.style.marginBottom = '10px';
							var parentBlock =  previousObj.closest('.object-area').parentNode;
							parentBlock.insertBefore(dragObject.elem, previousObj.nextSibling);
						}
					}
				}

			};
			this.onDragCancel = function(dragObject) {
				if(dragObject.dragType == 'sidebar'){
					dragObject.elem.style.display = 'none';
					// delete avatar
					var forDestroy = document.querySelectorAll('.destroy-me');
					forDestroy[0].remove();
				}
				if(dragObject.dragType == 'title'){
					dragObject.elem.style.width = '100%';
					dragObject.avatar.rollback();
				}
			};

		};


		function getCoords(elem) {
			var box = elem.getBoundingClientRect();

			return {
				top: box.top + pageYOffset,
				left: box.left + pageXOffset
			};
		}
	},
	/**
	 * Get form elements (_formParser) and building DocumentFragment
	 * @returns {DocumentFragment}
	 */
	getFormElements: function (){

		var parserData = this._formParser();
		if(parserData != undefined){
			var documentFragment = document.createDocumentFragment();
			parserData.forEach(function(e) {
				documentFragment.appendChild(e);
			});

			return documentFragment;
		} else {
			return parserData;
		}
	},
	/**
	 * Document Parser when client click on APPLY button
	 * @returns {Array}
	 * @private
	 */
	_formParser: function (){
		var _this = this;
		var constructForm = this.innerContent.querySelector('.construct-form-main-inner');
		var objects = constructForm.querySelectorAll('.object-area');

		if(objects.length > 0){
			var outputData = new Array;

			Array.prototype.forEach.call(objects, function(element, i, item) {
				var counter = i;
				/**
				 * if object - Text field
				 */
				if(item[i].className.match('object-textfield-item') != null){
					var placeholder = item[i].querySelector('.textfield-input').value;
					var attrName = item[i].querySelector('.textfield-name').value;
					if(attrName === ''){
						attrName = 'textfield_'+counter;
					}

					var checkbox = item[i].querySelector('.textfield-checkbox').checked;

					if(checkbox == true){
						var checkbox_class = 'spr-form-required';
					} else {
						var checkbox_class = '';
					}

					var innerContent = '<input type="text" class="spr-text-field form-control '+checkbox_class+'" placeholder="'+placeholder+'" name="'+attrName+'" size="10">';
					var div = document.createElement('div');
					div.className = "form-group text-field-group";
					div.innerHTML = innerContent;

					outputData[i]= div;
				}

				/**
				 * if object - Email field
				 */
				if(item[i].className.match('object-email-item') != null){
					var placeholder = item[i].querySelector('.email-input').value;
					var attrName = item[i].querySelector('.email-name').value;
					if(attrName === ''){
						attrName = 'email_'+counter;
					}
					var checkbox = item[i].querySelector('.email-checkbox').checked;

					if(checkbox == true){
						var checkbox_class = 'spr-form-required';
					} else {
						var checkbox_class = '';
					}

					var innerContent = '<input type="email" class="spr-email-field form-control '+checkbox_class+'" placeholder="'+placeholder+'" name="'+attrName+'" size="10">';
					var div = document.createElement('div');
					div.className = "form-group email-field-group";
					div.innerHTML = innerContent;

					outputData[i]= div;
				}

				/**
				 * if object - Select field
				 */
				if(item[i].className.match('object-select-item') != null){
					var optionsArray = new Array;
					var selectInputs = item[i].querySelectorAll('.select-input');
					var attrName = item[i].querySelector('.select-name').value;
					var check = item[i].querySelector('.check-field-btn.active');
					if(attrName === ''){
						attrName = 'select_'+counter;
					}
					var checkbox = item[i].querySelector('.select-checkbox').checked;

					Array.prototype.forEach.call(selectInputs, function(element, j, item) {
						if(j == 0){
							var select = check ? '' : ' selected';
							optionsArray[j] = '<option value="'+item[j].value+'"' + select + ' disabled>'+item[j].value+'</option>';
						} else {
							check = element.parentElement.querySelector('.check-field-btn.active');
							var select = check ? ' selected' : '';
							optionsArray[j] = '<option value="'+item[j].value+'"' + select + '>'+item[j].value+'</option>';
						}
					});

					if(checkbox == true){
						var checkbox_class = 'spr-form-required';
					} else {
						var checkbox_class = '';
					}

					var icon = item[i].id
						? _this.iconsArray[item[i].id]
						: '<img class="icon svg-default" src="images/gallery/icons/chevron-down.svg" alt="icon">';

                    var innerContent = '<select class="spr-select-field form-control '+checkbox_class+'" name="'+attrName+'">'+
                                            optionsArray.join('') +
                                        '</select>' +
                        				icon;
                    var div = document.createElement('div');
                        div.className = "form-group select-group";
                        div.innerHTML = innerContent;

					outputData[i]= div;
				}

				/**
				 * if object - TextArea field
				 */
				if(item[i].className.match('object-textarea-item') != null){
					var placeholder = item[i].querySelector('.textarea-input').value;
					var attrName = item[i].querySelector('.textarea-name').value;
					if(attrName === ''){
						attrName = 'textarea_'+counter;
					}
					var rows = item[i].querySelector('.textarea-rows').value;
					var checkbox = item[i].querySelector('.textarea-checkbox').checked;

					if(checkbox == true){
						var checkbox_class = 'spr-form-required';
					} else {
						var checkbox_class = '';
					}

					var innerContent = '<textarea class="spr-textarea form-control '+checkbox_class+'"  placeholder="'+placeholder+'" rows="'+rows+'" name="'+attrName+'"></textarea>';
					var div = document.createElement('div');
					div.className = "form-group textarea-group";
					div.innerHTML = innerContent;

					outputData[i]= div;
				}

				/**
				 * if object - RadioButton
				 */
				if(item[i].className.match('object-radio-item') != null){
					var valuesArray = new Array;
					var radioLabel = item[i].querySelector('.radiolabel-input').value;
					var attrName = item[i].querySelector('.radio-name').value;
					if(attrName === ''){
						attrName = 'radio_'+counter;
					}
					var valuesInputs = item[i].querySelectorAll('.radio-input');

					Array.prototype.forEach.call( valuesInputs, function(element, i, item) {
						var buttonChecked = element.parentElement.querySelector('.check-field-btn');

						var checked = buttonChecked.classList.contains('active');
						var checkedAttribute = '';

						if(checked){
							var checkedAttribute = 'checked="true"';
						}

						var j = i+1;
						valuesArray[i] = '<label class="radio-inline">' +
							'<input type="radio" class="spr-radio-button" name="'+attrName+'" id="radio'+j+'" ' +
							'value="option'+j+'" ' + checkedAttribute + '>' +
							'<span class="lbl">' +
							''+item[i].value+''+
							'</span>'+
							'</label>';
					});


					var innerContent = 	'<div class="label-name">'+
						radioLabel+
						'</div>'+
						valuesArray.join('');

					var radio = document.createElement('div');
                    radio.className = 'spr-radio-block radio';
                    radio.innerHTML = innerContent;

                    var div = document.createElement('div');
                    div.className = "form-group radio-group";
                    div.appendChild(radio);

					outputData[i]= div;
				}

				/**
				 * if object - Checkbox
				 */
				if(item[i].className.match('object-checkbox-item') != null){
					var label = item[i].querySelector('.checkbox-input').value;
					var attrName = item[i].querySelector('.checkbox-name').value;
					if(attrName === ''){
						attrName = 'checkbox_'+counter;
					}
					var checkbox = item[i].querySelector('.checkbox-checkbox').checked;
					var checkbox_class = '';

					if(checkbox){
						var checkbox_class = 'spr-form-required';
					}

					var checked = item[i].querySelector('.checked-checkbox').checked;
					var checkedAttribute = '';

					if(checked){
						var checkedAttribute = 'checked="true"';
					}

                    var innerContent = '<input type="checkbox" class="spr-checkbox check '+checkbox_class+'" ' +
	                    'placeholder="'+label+'" name="'+attrName+'"' + checkedAttribute + '>' +
                                       '<span class="lbl lbl-style">'+label+'</span>';
                    var checkbox = document.createElement('label');
                    checkbox.className = "checkbox";
                    checkbox.innerHTML = innerContent;

                    var div = document.createElement('div');
                    div.className = "form-group checkbox-group";
                    div.appendChild(checkbox);

					outputData[i]= div;
				}

				/**
				 * if object - Date
				 */
				if(item[i].className.match('object-date-item') != null){
					var placeholder = item[i].querySelector('.date-input').value;
					var attrName = item[i].querySelector('.date-name').value;
					if(attrName === ''){
						attrName = 'date_'+counter;
					}
					var checkbox = item[i].querySelector('.date-checkbox').checked;

					if(checkbox == true){
						var checkbox_class = 'spr-form-required';
					} else {
						var checkbox_class = '';
					}

                    var icon = item[i].id
                        ? _this.iconsArray[item[i].id]
                        : '<img class="icon svg-default" src="images/gallery/icons/calendar.svg" alt="icon">';

                    var innerContent = '<input type="text" class="spr-date-field form-control datepicker-input '+checkbox_class+'" placeholder="'+placeholder+'" name="'+attrName+'" size="10">' +
                        				icon;
                    var div = document.createElement('div');
                        div.className = "form-group datepicker-group";
                        div.innerHTML = innerContent;

					outputData[i]= div;
				}

				/**
				 * if object - Text
				 */
				if(item[i].className.match('object-text-item') != null){
					var text = item[i].querySelector('.text-div').innerHTML;

					var innerContent = text;
					var div = document.createElement('p');
					if (item[i].dataset.data) {
						div.className = item[i].dataset.data;
					} else {
						div.className = "text text-group txt-form spr-option-no";
					}
					div.innerHTML = innerContent;

					outputData[i]= div;
				}

				/**
				 * if object - Attach
				 */
				if(item[i].className.match('object-file-item') != null){
					var placeholder = item[i].querySelector('.file-input').value;
					var attrName = item[i].querySelector('.file-name').value;
					if(attrName === ''){
						attrName = 'file_'+counter;
					}
					var checkbox = item[i].querySelector('.file-checkbox').checked;

					if(checkbox == true){
						var checkbox_class = 'spr-form-required';
					} else {
						var checkbox_class = '';
					}

                    var icon = item[i].id
                        ? _this.iconsArray[item[i].id]
                        : '<img class="icon svg-default" src="images/gallery/icons/attach.svg" alt="icon">';

					var innerContent = '<label class="form-control" for="file_' + counter + '"><span class="placeholder">'
						+ placeholder+'</span></label>'
						+ '<input type="file" name="'+attrName+'" id="file_' + counter + '" class="inputfile spr-file-field '
						+ checkbox_class+'" data-multiple-caption="{count} files selected" multiple="">' +
                        icon;
					var div = document.createElement('div');
					div.className = "form-group file-group";
					div.innerHTML = innerContent;

					outputData[i]= div;
				}
			});
		}

		return outputData;

	},
	/**
	 * HTML Templates
	 * @param titleLabel
	 * @returns {string}
	 * @private
	 */
	_htmlTitleBar: function (titleLabel){
		return '<div class="col-md-12 object-title-bar">'+
			titleLabel +
			'<button type="button" class="btn btn-sm btn-default delete-object-btn">'+
			'<i class="icon-blr-trash"></i>'+
			'</button>'+
			'</div>';
	},
	_htmlTextInput: function (textInputLabel, objectName, type, inputData){
		return '<div class="form-horizontal field-container row">'+
			'<div class="field-label col-sm-4 control-label">' +
			textInputLabel +
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<input type="'+type+'" class="form-control field-input '+objectName+'-input" name="'+objectName+'_input" value="'+inputData+'">'+
			'</div>'+
			'</div>';
	},
	_htmlTextInputWithChecked: function (textInputLabel, objectName, type, inputData){
		var check = '';
		if (inputData.checked === 'true') check = ' active';
		return '<div class="form-horizontal field-container row">'+
			'<div class="field-label col-sm-4 control-label">' +
			textInputLabel +
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<div class="input-group input-group-border">'+
			'<input type="'+type+'" class="form-control field-input '+objectName+'-input" name="'+objectName+'_input" ' +
			'value="'+inputData.label+'">'+
			'<span class="input-group-btn align-up">'+
			'<button type="button" class="check-field-btn btn btn-default' + check + '" title="checked">'+
			'<i class="icon-blr-sm-check"></i>'+
			'</button>'+
			'</span>'+
			'</div>'+
			'</div>'+
			'</div>';
	},
	_htmlNameInput: function (textInputLabel, objectName, type, inputData){
		return '<div class="form-horizontal field-container row">'+
			'<div class="field-label col-sm-4 control-label">' +
			textInputLabel +
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<input type="'+type+'" class="form-control field-input name-attr '+objectName+'-name" name="'+objectName+'_input" value="'+inputData+'">'+
			'</div>'+
			'</div>';
	},
	_htmlTextValue: function (objectName, options){
		return '<div class="form-horizontal field-container row">'+
			'<div class="field-label col-sm-4 control-label">' +
			'Value'+
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<div class="input-group input-group-border">'+
			'<input type="text" class="form-control field-input '+objectName+'-input" required="required" name="'+objectName+'_input" value="'+options+'">'+
			'<span class="input-group-btn align-up">'+
			'<button type="button" class="del-field-btn btn btn-default" title="Delete">'+
			'<i class="icon-blr-sm-cross"></i>'+
			'</button>'+
			'</span>'+
			'</div>'+
			'</div>'+
			'</div>';
	},
	_htmlTextValueWithChecked: function (objectName, options){
		var check = '';
		if (options.checked === 'true') check = ' active';
		var innerHTML = '<div class="field-label col-sm-4 control-label">' +
			'Value'+
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<div class="input-group input-group-border">'+
			'<input type="text" class="form-control field-input '+objectName+'-input" required="required" name="'+objectName+'_input" value="'+options.label+'">'+
			'<span class="input-group-btn align-up">'+
			'<button type="button" class="del-field-btn btn btn-default" title="Delete">'+
			'<i class="icon-blr-sm-cross"></i>'+
			'</button>'+
			'<button type="button" class="check-field-btn btn btn-default' + check + '" title="Check">'+
			'<i class="icon-blr-sm-check"></i>'+
			'</button>'+
			'</span>'+
			'</div>'+
			'</div>';
		var div = document.createElement('div');
		div.className = "form-horizontal field-container row";
		div.innerHTML = innerHTML;

		return div;
	},
	_htmlAddButton: function (objectName){
		return '<div class="field-container button-row">'+
			'<div class="col-sm-12 text-right add-btn-panel">'+
			'<button type="button" class="btn btn-sm add-btn btn-default '+objectName+'-add-value-btn" value="'+objectName+'">'+
			'+ Add value'+
			'</button>'+
			'</div>'+
			'</div>';
	},
	_htmlAddButtonNew: function (objectName){
		return '<div class="field-container button-row">'+
			'<div class="col-sm-12 text-right add-btn-panel">'+
			'<button type="button" class="btn btn-sm adding-btn btn-default '+objectName+'-add-value-btn" value="'+objectName+'">'+
			'+ Add value'+
			'</button>'+
			'</div>'+
			'</div>';
	},
	_htmlRowsInput: function (objectName, inputRowsData){
		return '<div class="form-horizontal field-container row">'+
			'<div class="field-label col-sm-4 control-label">' +
			'Rows' +
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<input type="number" class="field-input-number form-control '+objectName+'-rows" min="1" placeholder="4" name="'+objectName+'_rows" value="'+inputRowsData+'">'+
			'</div>'+
			'</div>';
	},
	_htmlCheckbox: function (label, objectName, checkBoxData){
		if(checkBoxData == 'true'){
			var checked = 'checked';
		} else {
			var checked = '';
		}
		return '<div class="form-horizontal field-container row">'+
			'<div class="field-label col-sm-4 control-label">' +
			label +
			'</div>'+
			'<div class="col-sm-8 input-width">'+
			'<div class="checkbox">'+
			'<input type="checkbox" class="'+objectName+'-checkbox check" name="'+objectName+'_checkbox" data-required="'+checkBoxData+'" '+checked+'>' +
			'<span class="lbl"></span>'+
			'</div>'+
			'</div>'+
			'</div>';
	},
	/**
	 * Rendering Objects on the page
	 * @param innerContent
	 * @param objectName
	 * @private
	 */
	_appendHtml: function (innerContent, objectName, dropPlace, data, id){
		/* Create Element and Render it */
		var div = document.createElement('div');
		if (id !== null && id !== undefined) div.id = id;
		div.className = "object-area object-"+objectName+"-item";
		div.innerHTML = innerContent;

		if (data) {
			div.dataset.data = data;
		}

		if(!dropPlace){
			var parentBlock =  this.innerContent.querySelector(".construct-form-main-inner");
			parentBlock.appendChild(div);
		}
		if(dropPlace){
			if(dropPlace.type === 'append'){
				var parentBlock =  this.innerContent.querySelector(".construct-form-main-inner");
				parentBlock.appendChild(div);
			}
			if(dropPlace.type === 'insertBefore'){
				var nextObj = dropPlace.block;
				var prev = 	nextObj.previousSibling;
				if(prev){
					nextObj.previousSibling.style.marginBottom = '10px';
				}

				var parentBlock =  nextObj.closest('.object-area').parentNode;
				parentBlock.insertBefore(div, nextObj);
			}
			if(dropPlace.type === 'insertAfter'){
				var previousObj = dropPlace.block;
				previousObj.style.marginBottom = '10px';
				var parentBlock =  previousObj.closest('.object-area').parentNode;
				parentBlock.insertBefore(div, previousObj.nextSibling);
			}
		}

		/* Hanging  EventListener on Object*/

		/**
		 * Name attribute validation
		 */
		var nameAttrInput = div.querySelector('.name-attr');

		if(nameAttrInput != null){
			nameAttrInput.onkeypress  = function(event){
				/**
				 * get Char from keyCode
				 */
				function getChar(event) {
					if (event.which == null) {
						if (event.keyCode < 32) return null;
						return String.fromCharCode(event.keyCode);
					}

					if (event.which != 0 && event.charCode != 0) {
						if (event.which < 32) return null;
						return String.fromCharCode(event.which);
					}

					return null;
				}
				/**
				 * validate char
				 */
				if (event.ctrlKey || event.altKey || event.metaKey) return;
				var char = getChar(event);
				if (!char) return;
				var charValidate = char;

				if(!charValidate.match(/^[a-zA-Z0-9_]$/i)){
					return false;
				}
			};

			/**
			 * length validate
			 */
			//nameAttrInput.onkeyup  = function(event) {
			//	if ( this.value.length >= 10 ) {
			//		this.value = this.value.substr(0, 9);
			//	}
			//};
		}

		/**
		 * Object toggle
		 */
		var titleBar = div.querySelector('.object-title-bar');
		var content = titleBar.nextElementSibling;
		titleBar.addEventListener("click", function(){
			content.classList.toggle("hide");
		}, false);

		/**
		 * Delete Form Object
		 * @type {NodeList}
		 */
		var deleteButtons = div.querySelectorAll('.delete-object-btn');
		for (var i = 0; i < deleteButtons.length; i++) {
			var deleteButton = deleteButtons[i];
			deleteButton.onclick = function () {
				var el = this.closest(".object-area");
				el.parentNode.removeChild(el);
			};
		}

		/**
		 * Delete Value field
		 * @type {NodeList}
		 */
		var valueButtons = div.querySelectorAll('.del-field-btn');
		if(valueButtons.length > 0){
			for (var i = 0; i < valueButtons.length; i++) {
				var valueButton = valueButtons[i];
				valueButton.onclick = function () {
					var el = this.closest(".field-container");
					el.parentNode.removeChild(el);
				};
			}
		}

		/**
		 * Check Value field
		 * @type {NodeList}
		 */
		var valueButtonsCheck = div.querySelectorAll('.check-field-btn');
		if (valueButtonsCheck.length > 0) {
			for ( var i = 0; i < valueButtonsCheck.length; i++ ) {
				var valueButtonCheck     = valueButtonsCheck[ i ];
				valueButtonCheck.onclick = function () {
					var active = div.querySelector( '.check-field-btn.active' );

					if (active) {
						active.classList.remove('active');
					}

					if (this !== active) {
						this.classList.add('active');
					}
				};
			}
		}

		/**
		 * Add Value field
		 * @type {NodeList}
		 */
		var addButtons = div.querySelectorAll('.add-btn');

		if(addButtons.length > 0){
			for (var i = 0; i < addButtons.length; i++) {
				var addButton = addButtons[i];
				addButton.onclick = function () {
					var objectName = this.getAttribute('value');
					var el = this.closest(".row").querySelector('.value-html-area');
					var innerHTML = '<div class="field-label col-sm-4 control-label">' +
						'Value'+
						'</div>'+
						'<div class="col-sm-8 input-width">'+
						'<div class="input-group input-group-border">'+
						'<input type="text" class="form-control field-input '+objectName+'-input" required="required" name="'+objectName+'_input">'+
						'<span class="input-group-btn align-up">'+
						'<button type="button" class="del-field-btn btn btn-default" title="Delete">'+
						'<i class="icon-blr-sm-cross"></i>'+
						'</button>'+
						'</span>'+
						'</div>'+
						'</div>';
					var div = document.createElement('div');
					div.className = "form-horizontal field-container row";
					div.innerHTML = innerHTML;
					el.appendChild(div);
					/**
					 * Delete Value field
					 */
					var valueButtons = div.querySelectorAll('.del-field-btn');
					for (var i = 0; i < valueButtons.length; i++) {
						var valueButton = valueButtons[i];
						valueButton.onclick = function () {
							var el = this.closest(".field-container");
							el.parentNode.removeChild(el);
						};
					}
				};
			}
		}

		/**
		 * Adding Value field
		 * @type {NodeList}
		 */
		var addingButtons = div.querySelectorAll('.adding-btn');

		if(addingButtons.length > 0){
			var _this = this;
			for (var i = 0; i < addingButtons.length; i++) {
				var addingButton = addingButtons[i];
				addingButton.onclick = function () {
					var objectName = this.getAttribute('value');
					var el = this.closest(".row").querySelector('.value-html-area');

					var div = _this._htmlTextValueWithChecked(objectName, '' );

					el.appendChild(div);
					/**
					 * Delete Value field
					 */
					var valueButtons = div.querySelectorAll('.del-field-btn');
					for (var i = 0; i < valueButtons.length; i++) {
						var valueButton = valueButtons[i];
						valueButton.onclick = function () {
							var el = this.closest(".field-container");
							el.parentNode.removeChild(el);
						};
					}

					var valueButtonsCheck = div.querySelectorAll('.check-field-btn');
					for (var i = 0; i < valueButtonsCheck.length; i++) {
						var valueButtonCheck = valueButtonsCheck[i];
						valueButtonCheck.onclick = function () {
							var scope = this.closest('.value-html-area');
							var active = scope.querySelector('.check-field-btn.active');

							if (active) {
								active.classList.remove('active');
							}

							if (this !== active) {
								this.classList.add('active');
							}
						};
					}
				};
			}
		}

	},
	/**
	 * Get Object Action (Building form)
	 * @param obj
	 * @private
	 */
	_getTextField: function(obj, dropElem){
		if(obj != undefined & obj != null){
			var inputData = obj.placeholder || '';
			var nameData = obj.name || '';
			var checkBoxData = obj.required || 'false';
		} else {
			var inputData = '';
			var nameData = '';
			var checkBoxData = 'false';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Text Field';
		var objectClass = 'textfield';
		var type = 'text';
		var inputLabel = 'Placeholder';

		var innerContent =  '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			this._htmlTextInput(inputLabel, objectClass, type, inputData)+
			this._htmlNameInput('Field name', objectClass, type, nameData)+
			this._htmlCheckbox('Required', objectClass, checkBoxData)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace);
	},
	_getEmailField: function (obj, dropElem){
		if(obj != undefined & obj != null){
			var inputData = obj.placeholder || '';
			var nameData = obj.name || '';
			var checkBoxData = obj.required || 'false';
		} else {
			var inputData = '';
			var nameData = '';
			var checkBoxData = 'false';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Email Field';
		var inputLabel = 'Placeholder';
		var objectClass = 'email';
		var type = 'email';
		var innerContent =      '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			this._htmlTextInput(inputLabel, objectClass, type, inputData)+
			this._htmlNameInput('Field name', objectClass, type, nameData)+
			this._htmlCheckbox('Required', objectClass, checkBoxData)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace);
	},
	_getFileField: function (obj, dropElem){
        var id = null;
		if(obj != undefined & obj != null){
			var inputData = obj.placeholder || '';
			var nameData = obj.name || '';
			var checkBoxData = obj.required || 'false';
            if (obj.icon) {
                this.iconsArray.push(obj.icon);
                id = this.iconsArray.length - 1;
            }
		} else {
			var inputData = '';
			var nameData = '';
			var checkBoxData = 'false';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Attach file';
		var inputLabel = 'Placeholder';
		var objectClass = 'file';
		var type = 'text';
		var innerContent =      '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			this._htmlTextInput(inputLabel, objectClass, type, inputData)+
			this._htmlNameInput('Field name', objectClass, type, nameData)+
			this._htmlCheckbox('Required', objectClass, checkBoxData)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace, null, id);
	},
	_getSelectField: function (obj, dropElem){
		var id = null;
		if(obj != undefined && obj != null){
			var optionsData = obj.options || '';
			var nameData = obj.name || '';
			var checkBoxData = obj.required || 'false';
            if (obj.icon) {
                this.iconsArray.push(obj.icon);
                id = this.iconsArray.length - 1;
            }
		} else {
			var optionsData = '';
			var nameData = '';
			var checkBoxData = 'false';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Select Field';
		var inputLabel = 'Default';
		var objectClass = 'select';
		var type = 'text';

		if(optionsData != ''){
			var inputData = obj.options[0].label;
			var htmlInput = this._htmlTextInput(inputLabel, objectClass, type, inputData);
			var htmlName = this._htmlNameInput('Field name', objectClass, type, nameData);
			var htmlValueArray = new Array();
			for (var i = 1; i < optionsData.length; i++) {
				htmlValueArray[i] = this._htmlTextValueWithChecked(objectClass, optionsData[i] ).outerHTML;
			}
			var htmlValue = htmlValueArray.join('');
		} else {
			var inputData = '';
			var htmlInput = this._htmlTextInput(inputLabel, objectClass, type, inputData);
			var htmlName = this._htmlNameInput('Field name', objectClass, type, nameData);
			var options = { label: '' };
			var htmlValue = this._htmlTextValueWithChecked(objectClass, options).outerHTML;
		}
		var innerContent = '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			htmlInput+
			htmlName +
			'<div class="value-html-area">'+
			htmlValue+
			'</div>'+
			this._htmlAddButtonNew(objectClass)+
			this._htmlCheckbox('Required', objectClass, checkBoxData)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace, null, id);
	},
	_getTextArea: function (obj, dropElem){
		if(obj != undefined & obj != null){
			var inputData = obj.placeholder || '';
			var nameData = obj.name || '';
			var checkBoxData = obj.required || 'false';
			var inputRowsData = obj.rows || 4;
		} else {
			var inputData = '';
			var nameData = '';
			var checkBoxData = 'false';
			var inputRowsData = 4;
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Textarea';
		var inputLabel = 'Placeholder';
		var objectClass = 'textarea';
		var type = 'text';
		var innerContent = '<div class="row">'+
			this._htmlTitleBar(titleLabel)+
			'<div class="toggle-area col-md-12">' +
			this._htmlTextInput(inputLabel, objectClass, type, inputData)+
			this._htmlNameInput('Field name', objectClass, type, nameData)+
			this._htmlRowsInput(objectClass, inputRowsData)+
			this._htmlCheckbox('Required', objectClass, checkBoxData)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace);
	},
	_getRadioButton: function (obj, dropElem){
		var optionsData = '';
		var nameData = '';

		if(obj != undefined & obj != null){
			optionsData = obj.buttons || '';
			nameData = obj.name || '';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Radio button';
		var inputLabel = 'Label';
		var objectClass = 'radio';
		var type = 'text';
		if(optionsData != ''){
			var inputData = obj.label;
			var htmlInput = this._htmlTextInput(inputLabel, objectClass+'label', type, inputData);
			var htmlName = this._htmlNameInput('Field name', objectClass, type, nameData);
			var htmlValueArray = new Array();
			for (var i = 0; i < optionsData.length; i++) {
				if(i < 2){
					htmlValueArray[i] = this._htmlTextInputWithChecked('Value', objectClass, type, optionsData[i]);
				} else {
					htmlValueArray[i] = this._htmlTextValueWithChecked(objectClass, optionsData[i] ).outerHTML;
				}
			}
			var htmlValue = htmlValueArray.join('');
		} else {
			var inputData = { label: '' };
			var htmlInput = this._htmlTextInput(inputLabel, objectClass+'label', type, '');
			var htmlName = this._htmlNameInput('Field name', objectClass, type, nameData);
			var htmlValueArray = new Array();
			for (var i = 1; i < 3; i++) {
				htmlValueArray[i] = this._htmlTextInputWithChecked('Value', objectClass, type, inputData);
			}
			var htmlValue = htmlValueArray.join('');
		}
		var innerContent = '<div class="row">'+
			this._htmlTitleBar(titleLabel)+
			'<div class="toggle-area col-md-12">' +
			htmlInput+
			htmlName +
			'<div class="value-html-area">'+
			htmlValue+
			'</div>'+
			this._htmlAddButtonNew(objectClass)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace);
	},
	_getCheckbox: function (obj, dropElem){
		var inputData = '';
		var nameData = '';
		var checkBoxData = 'false';
		var cheked = 'false';

		if(obj != undefined & obj != null){
			inputData = obj.label || '';
			nameData = obj.name || '';
			checkBoxData = obj.required || 'false';
			cheked = obj.checked || 'false';
		}

		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Checkbox';
		var inputLabel = 'Label';
		var objectClass = 'checkbox';
		var type = 'text';
		var innerContent = '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			this._htmlTextInput(inputLabel, objectClass, type, inputData) +
			this._htmlNameInput('Field name', objectClass, type, nameData) +
			this._htmlCheckbox('Required', objectClass, checkBoxData) +
			this._htmlCheckbox('Checked', 'checked', cheked) +
			'</div>' +
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace);
	},
	_getDate: function (obj, dropElem){
		var id = null;
		if(obj != undefined & obj != null){
			var inputData = obj.placeholder || '';
			var nameData = obj.name || '';
			var checkBoxData = obj.required || 'false';
            if (obj.icon) {
                this.iconsArray.push(obj.icon);
                id = this.iconsArray.length - 1;
            }
		} else {
			var inputData = '';
			var nameData = '';
			var checkBoxData = 'false';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}

		var titleLabel = 'Date';
		var inputLabel = 'Placeholder';
		var objectClass = 'date';
		var type = 'text';
		var innerContent = '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			this._htmlTextInput(inputLabel, objectClass, type, inputData)+
			this._htmlNameInput('Field name', objectClass, type, nameData)+
			this._htmlCheckbox('Required', objectClass, checkBoxData)+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace, null, id);
	},
	_getText: function (obj, dropElem){
		var data;
		if(obj != undefined & obj != null){
			var inputData = obj.text && !/Paragraph will be added\. You can edit it in the builder\./.test(obj.text)
				? 'Text added.' : 'Paragraph will be added. You can edit it in the builder.';
			data = obj.class;
		} else {
			var inputData = 'Paragraph will be added. You can edit it in the builder.';
		}
		if(dropElem != undefined){
			var dropPlace = dropElem || '';
		}
		var titleLabel = 'Text';
		var objectClass = 'text';
		var innerContent = '<div class="row">'+
			this._htmlTitleBar(titleLabel) +
			'<div class="toggle-area col-md-12">' +
			'<div class="field-label text-div">'+
				inputData +
			'</div>'+
			'</div>'+
			'</div>';

		this._appendHtml(innerContent, objectClass, dropPlace, data);
	}
};
var dragAndDrop = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    this.options = options;

    this._elCurGrabbing = null;
    this._nextElCurGrabbing = null;
    this._parentElCurGrabbing = null;
    this.listenerDocumentMouseDownArray = [];
    this._displayPropertyEl = 'block';

    this._init();
};

dragAndDrop.prototype = Object.assign(Object.create(Core.prototype), {
    elements: []
    , listenerDocumentMousemove: null
    , listenerDocumentMouseUp: null

    , _triggerClick: false

    , _init: function () {
        if ( !(
                this.options.elements instanceof Object
                || this.options.elements instanceof Array
            ) )
            throw new ReferenceError ("Expected variables options.elements like Object or Array");


        if (Array.isArray(this.options.elements))
            this.elements = this.options.elements;
        else
            this.elements = [this.options.elements];

        this.listenerDocumentMousemove = this._eventMoveDrag.bind(this);
        this.listenerDocumentMouseUp = this._eventEndDrag.bind(this);
    }

    , set: function() {
        var _this = this;
        this.elements.forEach(function (el, indx) {
            var objDispatchEvent = el.btn || el.el;
            _this.listenerDocumentMouseDownArray.push(_this._selectionSectionsItem.bind(_this, el.el));
            objDispatchEvent.addEventListener('mousedown', _this.listenerDocumentMouseDownArray[indx]);
        });
    }

    , destroy: function () {
        var _this = this;
        this.elements.forEach(function (el, indx) {
            var objDispatchEvent = el.btn || el.el;
            objDispatchEvent.removeEventListener('mousedown', _this.listenerDocumentMouseDownArray[indx]);
        });
        _this.listenerDocumentMouseDownArray = [];
    }

    /**
     * add section from section group menu
     * @private
     */
    , _selectionSectionsItem: function(el, e) {
        e.preventDefault();

        var _this = this;

        _this._displayPropertyEl = window.getComputedStyle(el).getPropertyValue('display');
        _this._sectionDropped = true;

        _this._eventStartDrag.call(_this, el);
        _this._createSectionPreview(el);

        var SPP = _this.options.container.querySelectorAll('.spr-start-position-parent-on-drag');
        [].forEach.call(SPP, function (parent) {
            var sP = _this._createStartPosition(el);
            parent.appendChild(sP);
        });

        _this.documentIframe.addEventListener('mousemove', _this.listenerDocumentMousemove);
        _this.documentIframe.addEventListener('mouseup', _this.listenerDocumentMouseUp);
    }
    /**
     * Start drag section from section group menu
     * @param _this
     * @param e
     * @private
     */
    , _eventStartDrag: function(el) {
        var _this = this;
        var body = _this.documentIframe.querySelector('body');
        body.classList.add('cursor-grab');
        el.classList.add('cursor-grab');
        _this._elCurGrabbing = el;
        _this._nextElCurGrabbing = el.nextElementSibling;
        _this._parentElCurGrabbing = el.parentElement;

        if (!_this._triggerClick) {

            _this._triggerClick = true;
            _this._createMarker();
            _this._nextForDropped = null;
        }

        var cChildren = Array.from(_this.options.container.children);
        if (_this.options.dragItems)
            cChildren = Array.from(_this.options.container.querySelectorAll(_this.options.dragItems));

        cChildren.forEach(function (el) {
            if (el.getAttribute('class'))
                el.setAttribute('class', el.getAttribute('class') + ' spr-drag-children-items');
        });
    }
    /**
     * Move dragable section by main it was dragged from section group menu
     * @param _this
     * @param e
     * @private
     */
    , _eventMoveDrag: function(e) {
        var _this = this;
        if (_this._dropPreview && _this._sectionDropped) {
            _this.removeNowrapSuperStructure(_this.documentIframe, null, 'without-spr-child');

            if (_this._elCurGrabbing.parentElement) {
                _this._setStartPosition(_this._elCurGrabbing, _this._elCurGrabbing.parentElement);
                _this._elCurGrabbing.parentElement.insertBefore(_this._marker, _this._elCurGrabbing);
                _this._elCurGrabbing.parentElement.removeChild(_this._elCurGrabbing);
            }

            var widthDropP = _this._dropPreview.getBoundingClientRect().width;
            _this._dropPreview.style.left = e.clientX - (widthDropP / 2) + 'px';
            _this._dropPreview.style.top = e.clientY - 10 + 'px';
            _this._dropPreview.style.display = 'none';
            var sprEditEl = _this.findParent(_this.documentIframe.elementFromPoint(e.clientX, e.clientY), ['spr-drag-children-items']);
            _this._dropPreview.style.display = 'block';

            if (sprEditEl) {
                _this._setPositionMarker(e, _this.sectionClicked, sprEditEl);
            } else {
                console.log('fail');
            }
            if (window.innerWidth > 500 && !_this._fixedRightSide) {
                // _this._hideSections();
                // _this._hideControlPanel();
            }
        }
    }
    , _createMarker: function() {
        var _this = this;
        _this._marker = _this.documentIframe.createElement('div');
        _this._marker.style.display = _this._displayPropertyEl;
        _this._marker.className = 'marker-element';
    }
    , _eventEndDrag: function() {
        var _this = this;
        var body = _this.documentIframe.querySelector('body');

        if (_this._dropPreview
            && !_this._sectionDropped
            && !_this._lockEndDrag) {
            _this._dropPreview = null;
        }

        if (_this._triggerClick) {
            _this._triggerClick = false;

            var parent = _this._marker.parentElement;
            if (parent) {
                parent.insertBefore(_this._elCurGrabbing, _this._marker);

                var SP = _this.options.container.querySelectorAll('.spr-start-position-element-on-drag');
                [].forEach.call(SP, function (sP) {
                    sP.parentElement.removeChild(sP);
                });

                parent.classList.remove('spr-start-position-parent-on-drag');

                var currPageObj = _this.getActivePageObject();
                var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);

                var elHistory = _this._elCurGrabbing;

                _this.setStep(function () {
                    var currentPageObj = _this.getActivePageObject();
                    if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                        _this.leftPanel.cPanels['project-pages'].changeActivePage(currPageObj, activeItem, currPageObj.id)
                    }
                    _this.setPointDragMoveEelement(elHistory, _this._parentElCurGrabbing, parent, _this._nextElCurGrabbing);
                });

                parent.removeChild(_this._marker);
                _this._marker = null;
            }
        }

        setTimeout(function() {

            if (_this._dropPreview) {
                body.removeChild(_this._dropPreview);
                _this._dropPreview = null;
            }
            _this._lockEndDrag = false;

            //if (AOS) AOS.refresh();
            if (_this.windowIframe.AOS) _this.windowIframe.AOS.refresh();
        }, 0);

        if (body.classList.contains('cursor-grab')) {
            body.classList.remove('cursor-grab');
        }

        if (_this._elCurGrabbing && _this._elCurGrabbing.classList.contains('cursor-grab')) {
            _this._elCurGrabbing.classList.remove('cursor-grab');
        }
        _this._sectionDropped = false;
        _this._elCurGrabbing = null;

        _this.documentIframe.removeEventListener('mousemove', _this.listenerDocumentMousemove);
        // document.removeEventListener('mouseup', _this.listenerDocumentMouseUp);
        _this.documentIframe.removeEventListener('mouseup', _this.listenerDocumentMouseUp);

        var cChildren = Array.from(_this.options.container.children);
        if (_this.options.dragItems)
            cChildren = Array.from(_this.options.container.querySelectorAll(_this.options.dragItems));

        cChildren.forEach(function (el) {
            el.setAttribute('class', el.getAttribute('class').replace(/\sspr-drag-children-items/, ''));
        });
    }
    , _createStartPosition: function (el) {
        var b = el.getBoundingClientRect();
        var startPosition = this.documentIframe.createElement('div');
        startPosition.style.height = b.height + 'px';
        startPosition.style.width = b.width + 'px';
        startPosition.className = 'spr-start-position-element-on-drag spr-drag-children-items';

        return startPosition;
    }
    , _setStartPosition: function (el, parent) {
        if (parent.children.length === 1) {
            var sP = this._createStartPosition(el);
            parent.setAttribute('class', parent.getAttribute('class') + ' spr-start-position-parent-on-drag');
            parent.appendChild(sP);
        }
    }
    /**
     * Create and append section preview to body
     * @param src {string}
     * @private
     */
    , _createSectionPreview: function(el) {
        var _this = this;
        var body = _this.documentIframe.querySelector('body');

        _this._dropPreview = _this.documentIframe.createElement('div');
        _this._dropPreview.innerHTML = el.tagName.toLowerCase() + '.' + el.classList[0];
        _this._dropPreview.className = 'preview-element-on-drag';

        body.appendChild(_this._dropPreview);
    }
    /**
     * @param e {Object}: evetn mousemove
     * @param dragSection {HTMLElement}
     * @param li {HTMLElement}: section that is under position mouse
     * @private
     */
    , _setPositionMarker: function(e, dragSection, sprEditEl) {
        var _this = this;

        if (
            sprEditEl === this.options.container
            || !_this._belongsTo(this.options.container, sprEditEl)
        ) return;

        var boundingSprEditEl = sprEditEl.getBoundingClientRect();
        var height = boundingSprEditEl.height;
        var top = boundingSprEditEl.top;
        if (e.clientY < top + (height / 2)
        ) {
            sprEditEl.parentElement.insertBefore(_this._marker, sprEditEl);
        } else {
            sprEditEl.parentElement.insertBefore(_this._marker, sprEditEl.nextSibling);
        }
    }
    /**
     * History point
     * @param li {HTMLElement}
     * @param parent {HTMLElement} is page
     * @param next {HTMLElement}
     * @public
     */
    , setPointDragMoveEelement: function(el, parentElCurGrabbing, parent, next) {
        var _this = this;
        var nextHistory = el.nextElementSibling;

        if (next) {
            parentElCurGrabbing.insertBefore(el, next);
        } else {
            parentElCurGrabbing.appendChild(el);
        }

        var currPageObj = _this.getActivePageObject();
        var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);

        _this.setStep(function () {
            var currentPageObj = _this.getActivePageObject();
            if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                _this.leftPanel.cPanels['project-pages'].changeActivePage(currPageObj, activeItem, currPageObj.id)
            }
            _this.setPointDragMoveEelement(el, parent, parentElCurGrabbing, nextHistory);
        });
    }
});

dragAndDrop.prototype.constructor = dragAndDrop;
var EditorText = function(el) {
    var _this = this;

    this._DOMIdentif = el.tagName.toLowerCase();
    this._DOMEditingEl = el;
    this.wrapContainer = el.parentElement;
    this.overflow = null;
    this.content = el.innerHTML;
    this.href = '';

    this.condition = function() {
        return true;
    };

    var li = this.findParent(el, ['section-item', 'modal-dialog']);

    var nav = this.findParent(el, ['nav']);

    if (nav) {
        _this.wrapContainer = this.findParent(_this.wrapContainer, ['ul']);
        var menu = el;
        while(menu) {
            if (
                menu.classList.contains('sub-menu')
                || menu.classList.contains('mega-menu-container')
            ) {
                menu.classList.add('spr-child-active');
            }
            menu = menu.parentElement;
        }
    }

    if (_this.documentIframe.querySelector('.edit-typography') && !_this._triggerMouseEnter) {
        el.setAttribute('contenteditable', 'true');
        if (_this.currentEditorText && !_this.currentEditorText._triggerMouseEnter) {
            _this.documentIframe.removeEventListener('mousemove', _this.currentEditorText.mouseLeave);
            _this.currentEditorText._DOMEditingEl.removeEventListener('mouseleave', _this.currentEditorText.mouseLeave);
            _this.currentEditorText._DOMEditingEl.removeEventListener('mouseup', _this.currentEditorText.mouseUp);
            //_this.currentEditorText._DOMEditingEl.removeEventListener('touchend', _this.currentEditorText.touchEnd);
            _this.currentEditorText._DOMEditingEl.removeEventListener('keydown', _this.currentEditorText.keyDown);
            _this.currentEditorText._DOMEditingEl.removeEventListener('mouseleave', _this.currentEditorText.mouseLeave);
            _this.currentEditorText._DOMEditingEl.removeEventListener('paste', _this.currentEditorText.paste);
        } else if (_this.currentEditorText && _this.currentEditorText._triggerMouseEnter) {
            _this.currentEditorText.mouseLeave();
        }
        _this.currentEditorText = _this;

        _this.overflow = _this.findParent(_this.wrapContainer, ['nb-off-canvas']);

        //crutch for sarari
        if (el.parentElement.tagName === 'A'){
            _this.href = el.parentElement.getAttribute('href');
            el.parentElement.removeAttribute('href');
        }
//TODO: check whether you need more
        var magnific = el.classList.contains('video-popup')
            || el.classList.contains('image-popup')
            || _this.wrapContainer.classList.contains('video-popup')
            || _this.wrapContainer.classList.contains('image-popup');
        if (magnific) {
            Core.prototype.editingText = true;
            _this.windowIframe.editingText = true;
        }

        this.content = el.innerHTML;

        _this._triggerMouseEnter = true;
    }

    this.clickIngalleryEditTagA = function (e) {
        if (builder.documentIframe.querySelector('.edit-typography') && _this._triggerMouseEnter) {
            e.preventDefault();
            e.stopImmediatePropagation();
            el.style.overflow = 'visible';
            this.style.zIndex = '10';
        }
    };

    this.mouseUp = function (e) {
        if (_this._triggerMouseEnter) {
            _this.showActiveButton(this, e);
        }
    };

    this.keyDown = function(e) {
        _this._eventKeyboard(_this, e, el);
    };

    this.mouseLeave = function(e){
        if (
            _this._triggerMouseEnter
        ) {
            if (_this._triggerChangeText) {
                var newContent = el.innerHTML;
                _this.setStep(function () {
                    _this._changeContent(_this, el, _this.content, newContent);
                });
                _this._triggerChangeText = false;
            }

            if (el.parentElement && el.parentElement.tagName === 'A'){
                el.parentElement.href = _this.href;
            }

            if (_this.wrapContainer
                &&_this.wrapContainer.style.hasOwnProperty('z-index')
                && _this.wrapContainer.style.zIndex === '10'
            ) {
                _this.wrapContainer.style.removeProperty('z-index');
            }

            if (el.style.hasOwnProperty('overflow')
                && el.style.overflow === 'visible'
            ) {
                el.style.removeProperty('overflow');
            }

            _this._triggerMouseEnter = false;
            _this._triggerShowControls = false;
            Core.prototype.editingText = false;

            _this.documentIframe.removeEventListener('mousemove', _this.mouseLeave);
            _this.currentEditorText = null;
            el.removeEventListener('mouseleave', _this.mouseLeave);
            el.removeEventListener('mouseup', _this.mouseUp);
            //el.removeEventListener('touchend', _this.touchEnd);
            el.removeEventListener('keydown', _this.keyDown);
            el.removeEventListener('mouseleave', _this.mouseLeave);
            el.removeEventListener('paste', _this.paste);

            if (_this.wrapContainer) {
                _this.wrapContainer.removeEventListener('click', _this.clickIngalleryEditTagA );
            }
        }
    };

    this.paste = function(e) {
        e = e.originalEvent || e;
        e.preventDefault();
        var cnt = e.clipboardData.getData('text/plain');
        cnt = cnt.replace(/[\n\r]/i, '<br>');
        _this.documentIframe.execCommand('insertHTML', false, cnt);
    };

    _this.wrapContainer.addEventListener('click', _this.clickIngalleryEditTagA );

    el.addEventListener('mouseup', _this.mouseUp);

    el.addEventListener('keydown', _this.keyDown);

    el.addEventListener('paste', _this.paste);
};

EditorText.prototype = Object.assign(Object.create(Core.prototype), {
    _range: null
    , _currentNode: null
    , _startOffset: null
    , _triggerChangeText: false
    , _triggerMouseEnter: false
    , _triggerShowControls: false

    , showActiveButton: function(element, eClick) {
        var _this = this;

        var li = this.findParent(element, ['section-item', 'modal-dialog']);
        var controlGroup = li.querySelector(
            '.wrap-control-element-icons.nowrap'
            + ', .wrap-control-element.type-typography.nowrap'
        );

        var select = _this.windowIframe.getSelection();
        try {
            this._range = select.getRangeAt(0);
        } catch (e) {
            console.log('err');
            this.setElByMousePosition(select, eClick);
        }

        if (_this.main.querySelector('.edit-typography')
            && element.tagName !== 'I'
            && !navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|IEMobile/i)
            // && this._range.startOffset !== this._range.endOffset
            && controlGroup
        ) {
            _this._triggerShowControls = true;
            setTimeout(function(){
                _this._triggerShowControls = false;
            }, 1000);
            controlGroup.style.display = 'block';

            var activeButtons = controlGroup.querySelectorAll('.active');

            Array.prototype.forEach.call(activeButtons, function (element) {
                element.classList.remove('active');
            });

            var textAlign = element.className.match(/text-([^ ]*)/i);
            if (textAlign) {
                switch (textAlign[1]) {
                    case 'left':
                        controlGroup.querySelector('button.left').classList.add('active');
                        break;
                    case 'center':
                        controlGroup.querySelector('button.center').classList.add('active');
                        break;
                    case 'right':
                        controlGroup.querySelector('button.right').classList.add('active');
                        break;
                }
            }

            if (!_this._DOMEditingEl.contains(select.anchorNode)) {
                this.setElByMousePosition(select, eClick);
            }


            var parentNodeSelect = select.anchorNode.parentNode;
            if (select.anchorNode === _this._DOMEditingEl) {
                parentNodeSelect = select.anchorNode;
            }
            var style = parentNodeSelect.nodeName.toLowerCase();

            // if (select.anchorNode.nodeName.toLowerCase() === this._DOMIdentif
            //     && select.anchorNode.childNodes.length === 1
            // ) {
            //     this._range.insertNode(select.anchorNode.childNodes[0]);
            //     // this._range.selectNodeContents(select.anchorNode.childNodes[0]);
            //     try {
            //         select.removeAllRanges();
            //         select.addRange(this._range);
            //     }
            //     catch (e) {}
            //
            //     parentNodeSelect = select.anchorNode;
            //     style = parentNodeSelect.nodeName.toLowerCase();
            // } else if (
            //     select.anchorNode.nodeName.toLowerCase() === this._DOMIdentif
            //     && select.anchorNode.childNodes.length > 1
            // ){
            //     parentNodeSelect = select.anchorNode;
            //     style = parentNodeSelect.nodeName.toLowerCase();
            // }
            var activeStyles = [{style: style, nodeSelect: parentNodeSelect}];
            while (style !== this._DOMIdentif) {
                parentNodeSelect = parentNodeSelect.parentNode;
                style = parentNodeSelect.nodeName.toLowerCase();
                activeStyles.push({style: style, nodeSelect: parentNodeSelect});
            }
            activeStyles.forEach(function (element) {
                switch (element.style) {
                    case 'strong':
                        var bt = controlGroup.querySelector('button.strong');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                    case 'em':
                        var bt = controlGroup.querySelector('button.em');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                    case 'span':
                        if(element.nodeSelect.classList.contains('text-uppercase'))
                            controlGroup.querySelector('button.upper').classList.add('active');
                        break;
                    case 'mark':
                        var bt = controlGroup.querySelector('button.mark');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                    case 'ins':
                        var bt = controlGroup.querySelector('button.ins');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                    case 'del':
                        var bt = controlGroup.querySelector('button.del');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                    case 'bdo':
                        var bt = controlGroup.querySelector('button.rtl');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                    case 'a':
                        var bt = controlGroup.querySelector('button.link');
                        if (!bt) break;
                        bt.classList.add('active');
                        break;
                }
            });
        }
    }
    , setElByMousePosition: function (select, eClick) {
        var _this = this;
        var el = _this.documentIframe.elementFromPoint(eClick.clientX, eClick.clientY);
        this._range = _this.documentIframe.createRange();

        try {
            this._range.setStart(el, 0);
            this._range.setEnd(el, 0);
            select.removeAllRanges();
            select.addRange(this._range);
        }
        catch (e) {}
    }
    /**
     * onKeydown
     * @param _this
     * @param e {Event} onKeydown
     * @param element {HTMLElement} editing
     * @private
     */
    , _eventKeyboard: function(_this, e, element) {
        if (!(e.keyCode === 13 && element.tagName === 'SPAN')) {
            _this._triggerChangeText = true;
        }
        if (e.keyCode === 13 && element.tagName === 'SPAN') {
            e.preventDefault();
            e.stopPropagation();
        } else if (e.keyCode === 13) {
            e.preventDefault();
            e.stopPropagation();
            _this._setEnterInEndLine(element);
        } else if (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) {
            if (_this._triggerMouseEnter) {
                e.preventDefault();
                e.stopPropagation();
                var select = _this.windowIframe.getSelection();
                var range = _this.documentIframe.createRange();
                range.selectNodeContents(element);
                select.removeAllRanges();
                select.addRange(range);
                _this.showActiveButton(element, e);
            }
        }
        if (e.keyCode === 32) {
            e.preventDefault();
            e.stopPropagation();
            _this.documentIframe.execCommand('insertText', false, ' ');
        }
    }
    , _setEnterInEndLine: function(element) {
        var _this = this;
        var select = _this.windowIframe.getSelection();
        if (select.anchorNode.length === select.anchorOffset
            || select.anchorNode === element) {
            var range = _this.documentIframe.createRange();
            var br = document.createElement('br');
            var br2 = document.createElement('br');
            var fragment = document.createDocumentFragment();
            fragment.appendChild(br2);
            if (select.anchorNode === element) {
                var node = select.anchorNode;
                var next = element.childNodes[select.anchorOffset - 1].nextSibling;
            } else {
                var next = select.anchorNode.nextSibling;
                var node = select.anchorNode.parentNode;
            }

            if ((next && next.tagName !== 'BR') || !next) {
                fragment.appendChild(br);
            }

            if (next) {
                node.insertBefore(fragment, next);
            } else {
                node.appendChild(fragment);
            }
            range.setStartAfter(br2);
            range.setEndAfter(br2);
            range.collapse(false);
            select.removeAllRanges();
            select.addRange(range);
        } else {
            _this.documentIframe.execCommand('insertHTML', false, '<br>');
        }
    }
    /**
     * History point
     * @param _this
     * @param el
     * @param content
     * @param newContent
     * @private
     */
    , _changeContent: function(_this, el, content, newContent) {
        el.innerHTML = content;
        _this.setStep(function () {
            _this._changeContent(_this, el, newContent, content);
        });
    }
    /**
     * Change style selection text
     * @param button
     * @param tagName
     * @param className
     * @param href
     * @param targetLink
     * @private
     */
    , _setNode: function(button, tagName, className, href, targetLink) {
        var _this = this;
        if (this._range) {
            var select = _this.windowIframe.getSelection();
            select.removeAllRanges();
            if (this._range.startOffset === this._range.endOffset) {
                var p = this._range.startContainer.parentElement;
                var fragment = document.createDocumentFragment();
                for (var i = 0; i < p.childNodes.length; i++) {
                    fragment.appendChild(p.childNodes[i].cloneNode(true));
                }
                p.innerHTML = '';
                this._range.insertNode(fragment);
            }
            select.addRange(this._range);
            var valElBefore = _this._DOMEditingEl.innerHTML;
            var insertText = this._range.extractContents();
            // var unresolvedNode = false;
            Array.prototype.forEach.call(insertText.childNodes, function(n){
                if (n && n.nodeType === 3 && n.data === "") {
                    insertText.removeChild(n);
                }
                // if (n === _this._DOMEditingEl) {
                //     unresolvedNode = true;
                // }
            });

            // if (unresolvedNode) {
            //     insertText = _this._DOMEditingEl.childNodes[0];
            //     select.removeAllRanges();
            //     this._range.insertNode(insertText);
            // }

            var node = document.createElement(tagName);
            if (className === 'rtl') {
                node.setAttribute('dir', 'rtl');
            } else if (className) {
                node.className = className;
            }
            if (href || targetLink) {
                node.href = href;
                node.target = targetLink;
                node.classList.add('smooth');
                _this.windowIframe.jQuery(node).smoothScroll({
                    speed: 800
                    , exclude: ['.spr-outline-control', '.spr-oc-show']
                    , excludeWithin: ['.spr-outline-control', '.spr-oc-show']
                });
            }
            node.appendChild(insertText);
            this._range.insertNode(node);
            this._range.selectNodeContents(node);
            select.removeAllRanges();
            select.addRange(this._range);

            if (node.parentElement.classList.contains('count-up-data')) {
                node.classList.add('count-up-data');
                node.parentElement.classList.remove('count-up-data');
                if (node.parentElement.className === '') {
                    node.parentElement.removeAttribute('class');
                }
            }

            button.classList.add('active');

            var valElAfter = _this._DOMEditingEl.innerHTML;

            _this.setStep(function() {
                _this._setNodePoint(_this, valElBefore, valElAfter);
            });

            return node;
        }
    }
    , _removeNode: function(button, tagName) {
        var _this = this;
        if (this._range) {
            var fragmentTrigger = false;
            var select = builder.windowIframe.getSelection();
            select.removeAllRanges();
            select.addRange(this._range);
            var valElBefore = _this._DOMEditingEl.innerHTML;
            var anhor = select.anchorNode;
            var node = select.anchorNode.parentNode;
            var nodePrev = anhor;

            if (select.anchorNode.nodeType !== 3) {
                // anhor = select.anchorNode.childNodes[0];
                // node = select.anchorNode;
                // nodePrev = anhor;
                while (anhor.nodeType !== 3 && anhor.childNodes.length) {
                    node = anhor;
                    anhor = anhor.childNodes[0];
                    nodePrev = anhor;
                }

                if (!node) return;
            }

            while (node.nodeName.toLowerCase() !== tagName) {
                nodePrev = node;
                node = node.parentNode;
            }

            if (node.childNodes.length > 1) {
                nodePrev = document.createDocumentFragment();
                while(node.childNodes.length > 0) {
                    nodePrev.appendChild(node.childNodes[0]);
                }
            }

            var nextNode = node.nextSibling;
            var parent = node.parentNode;
            if (node.classList.contains('count-up-data')) {
                parent.classList.add('count-up-data');
                node.classList.remove('count-up-data');
            }
            parent.removeChild(node);

            // if (parent.tagName.toLowerCase() !== this._DOMIdentif) {
                var array = [];
                for (var i=0; i < nodePrev.childNodes.length; i++) {
                    if (nodePrev.childNodes[i].textContent || nodePrev.childNodes[i].innerText) {
                        array.push(nodePrev.childNodes[i]);
                    }
                }
                if (nextNode) {
                    parent.insertBefore(nodePrev, nextNode);
                } else {
                    parent.appendChild(nodePrev);
                }
                // array.forEach(function (el) {
                //     _this._range.selectNodeContents(el);
                // });
                if (array.length === 1) {
                    this._range.selectNodeContents(array[0]);
                } else if (array.length > 1) {
                    _this._range.setStart(array[0], 0);
                    var text = array[array.length - 1].textContent || array[array.length - 1].innerText;
                    _this._range.setEnd(array[array.length - 1], text.length);
                } else if (nodePrev.nodeType === 3) {
                    _this._range.selectNodeContents(nodePrev);
                }

                // this._range.selectNodeContents(anhor.parentElement);
            // } else {
            //     var baseNode = nodePrev.childNodes;
            //     if (baseNode.length > 1) {
            //         // fragmentTrigger = true;
            //         var fragment = document.createDocumentFragment();
            //         for (var i = 0; i < baseNode.length; i++) {
            //             fragment.appendChild(baseNode[i].cloneNode(true));
            //         }
            //         var array = [];
            //         for (i=0; i < fragment.childNodes.length; i++) {
            //             array.push(fragment.childNodes[i]);
            //         }
            //         this._range.insertNode(fragment);
            //         // _this._range.setStart(array[0], 0);
            //         // var text = array[array.length - 1].textContent || array[array.length - 1].innerText;
            //         // _this._range.setEnd(array[array.length - 1], text.length);
            //     } else if (node.childNodes.length > 1) {
            //         fragmentTrigger = true;
            //         var fragment = document.createDocumentFragment();
            //         while(node.childNodes.length > 0) {
            //             fragment.appendChild(node.childNodes[0]);
            //         }
            //         this._range.insertNode(fragment);
            //         this._range.selectNodeContents(nodePrev);
            //     } else {
            //         this._range.insertNode(nodePrev);
            //         this._range.selectNodeContents(nodePrev);
            //     }
            // }
            try {
                select.removeAllRanges();
                if (!fragmentTrigger) {
                    select.addRange( this._range );
                }
            }
            catch (e) {}

            button.classList.remove('active');
            button.blur();

            var valElAfter = _this._DOMEditingEl.innerHTML;

            _this.setStep(function() {
                _this._setNodePoint(_this, valElBefore, valElAfter);
            });
        }
    }
    /**
     * History poin
     * @param _this
     * @param valElBefore {string}
     * @param valElAfter {string}
     * @private
     */
    , _setNodePoint: function(_this, valElBefore, valElAfter) {
        _this._DOMEditingEl.innerHTML = valElBefore;

        _this.setStep(function() {
            _this._setNodePoint(_this, valElAfter, valElBefore);
        });
    }
    , setTextAlign: function(DOM, button, className) {
        var _this = this;
        var textAlign = DOM.className.match(/text-(?!muted)([^ ]*)/i);
        if (textAlign) {
            DOM.classList.remove(textAlign[0]);
            button.parentElement.querySelector('.' + textAlign[1]).classList.remove('active');
        }
        DOM.classList.add(className);
        button.classList.add('active');

        _this.setStep(function() {
            _this.removeTextAlign(DOM, button, className);
        });
    }
    , removeTextAlign: function(DOM, button, className) {
        var _this = this;
        DOM.classList.remove(className);
        button.classList.remove('active');
        button.blur();

        _this.setStep(function() {
            _this.setTextAlign(DOM, button, className);
        });
    }
    , setBold: function(button) {
        this._setNode(button, 'strong');
    }
    , removeBold: function(button) {
        this._removeNode(button, 'strong');
    }
    , setItalic: function(button) {
        this._setNode(button, 'em');
    }
    , removeItalic: function(button) {
        this._removeNode(button, 'em');
    }
    , setMarker: function(button) {
        this._setNode(button, 'mark');
    }
    , removeMarker: function(button) {
        this._removeNode(button, 'mark');
    }
    , setUnderline: function(button) {
        this._setNode(button, 'ins');
    }
    , removeUnderline: function(button) {
        this._removeNode(button, 'ins');
    }
    , setStrikethrough: function(button) {
        this._setNode(button, 'del');
    }
    , removeStrikethrough: function(button) {
        this._removeNode(button, 'del');
    }
    , setUpper: function(button) {
        this._setNode(button, 'span', 'text-uppercase');
    }
    , removeUpper: function(button) {
        this._removeNode(button, 'span');
    }
    , setRtl: function(button) {
        this._setNode(button, 'bdo', 'rtl');
    }
    , removeRtl: function(button) {
        this._removeNode(button, 'bdo');
    }
    , setLink: function(button, href, targetLink) {
        return this._setNode(button, 'a', null, href, targetLink);
    }
    , changeLink: function(DOMEditingEl, DOMElement, href, targetLink) {
        var _this = this;
        var valElBefore = DOMEditingEl.innerHTML;

        DOMElement.href = href;
        DOMElement.target = targetLink;
        DOMElement.classList.add('smooth');

        _this.windowIframe.jQuery(DOMElement).smoothScroll({
            speed: 800
            , exclude: ['.spr-outline-control', '.spr-oc-show']
            , excludeWithin: ['.spr-outline-control', '.spr-oc-show']
        });

        var valElAfter = DOMEditingEl.innerHTML;

        _this.setStep(function() {
            _this._setNodePoint(_this, valElBefore, valElAfter);
        });

        return DOMElement;
    }
    , removeLink: function(button) {
        this._removeNode(button, 'a');
    }
    , setTextAlignLeft: function(DOM, button) {
        this.setTextAlign(DOM, button, 'text-left');
    }
    , removeTextAlignLeft: function(DOM, button) {
        this.removeTextAlign(DOM, button, 'text-left');
    }
    , setTextAlignCenter: function(DOM, button) {
        this.setTextAlign(DOM, button, 'text-center');
    }
    , removeTextAlignCenter: function(DOM, button) {
        this.removeTextAlign(DOM, button, 'text-center');
    }
    , setTextAlignRight: function(DOM, button) {
        this.setTextAlign(DOM, button, 'text-right');
    }
    , removeTextAlignRight: function(DOM, button) {
        this.removeTextAlign(DOM, button, 'text-right');
    }
});

EditorText.prototype.constructor = EditorText;
/*
 * @autor: MultiFour
 * @version: 1.0.0
 */

"use strict";

var Modal = function(id, type, targetObject) {
    var _this = this;


    var footer = document.getElementById('modal-container');
    var modal = this._modal(id, type);
    this._selfDOM = modal;
    footer.appendChild(modal);

    this._targetObject = targetObject;

    this._title.innerHTML = '';
    this._body.innerHTML = '';
    this._footer.innerHTML = '';

    this['_getModal' + type](_this);

    $(modal).on('hidden.bs.modal', function() {
        modal.parentElement.removeChild(modal);
    });

    return modal;
};

Modal.prototype = Object.assign(Object.create(Core.prototype), {
    _selfDOM: null

    , _modalDialog: null
    , _header: null
    , _title: null
    , _body: null
    , _footer: null

    , _elements: null
    , _elementsGallery: null

    , _countDropDown: 0

    , _targetObject: null

    /**
     * Creatig modal dialog
     * @param id
     * @returns {Element}
     * @private
     */
    , _modal: function(id, type) {
        var classModal = type === 'ButtonSettings' ? builder.defaultStyleType + '-modal' : '';
        var modal = document.createElement('div');
        modal.className = 'modal fade d-flex justify-content-center align-items-center' + classModal;
        modal.id = id;
        modal.setAttribute('tabindex', '-1');
        modal.setAttribute('role', 'dialog');

        var content = '<div class="modal-dialog" role="document">'
            + '<div class="modal-content">'
            + '<div class="modal-header d-flex justify-content-between">'
            + '<button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>'
            + '<div class="modal-title d-flex justify-content-start">Modal title</div>'
            + '</div>'
            + '<div class="modal-body clearfix">'
            + '</div>'
            + '<div class="modal-footer">'
            + '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>'
            + '</div>'
            + '</div>'
            + '<div class="modal-preloader">'
            + '<div class="wrapper">'
            + '<div class="timer"><div class="arrow_sec"></div><div class="arrow_min"></div></div>'
            + '</div>'
            + '</div>'
            + '</div>';

        modal.innerHTML = content;

        this._modalDialog = modal.querySelector('.modal-dialog');
        this._header = modal.querySelector('.modal-header');
        this._title = this._header.querySelector('.modal-title');
        this._body = modal.querySelector('.modal-body');
        this._footer = modal.querySelector('.modal-footer');

        return modal;
    }
    /**
     * Constructor for elements of modal
     * @param arrElements
     * @param classSide
     * @private
     */
    , _constructModalBody: function(arrElements, classSide) {
        var elements = this._getElements(arrElements);

        if (this._elements) {
            for (var attrname in elements) {
                this._elements[attrname] = elements[attrname];
            }
        } else {
            this._elements = elements;
        }

        var side = document.createElement('div');
        side.className = classSide;

        for (var element in elements) {
            side.appendChild(elements[element]);
        }

        this._body.appendChild(side);
    }
    /**
     * Create elements for modal from arrElements
     * @param arrElements {Array} function names
     * @returns {Array} elements for modals
     * @private
     */
    , _getElements: function(arrElements) {
        var _this = this;
        var arr = {};

        arrElements.forEach(function(element) {
            if (typeof element === 'string') {
                arr[element] = _this['_' + element]();
            } else {
                arr[element.name] = _this['_' + element.func](element.args);
            }
        });

        return arr;
    }
    /**
     * -------------------------------------------- Part - create modal elements ------------------------------------
     */
    /**
     *
     * @param {type} args
     * @returns {HTMLElement}
     * @private
     */
    , _choiceElement: function(args) {
        var _this = this;
        var cElement = document.createElement('div');
        cElement.className = 'item clearfix';
        if (args.buttons && Array.isArray(args.buttons)) {
            args.buttons.forEach(function(element){
                var item = document.createElement('div');
                item.className = element.className;
                item.innerHTML = '<i class="ok supra icon-check2"></i>'
                    + '<span class="bg-white-circle"></span>'
                    + element.html
                    + '<div class="wrap"></div>';

                cElement.appendChild(item);

                item.addEventListener('click', _this._choosen);
                if (args.callback) item.addEventListener('click', args.callback);
            });
        } else {
            cElement.innerHTML = '<div class="' + args.className + '">'
                + '<i class="ok supra icon-check2"></i>'
                + '<span class="bg-white-circle"></span>'
                + args.html
                + '<div class="wrap"></div>'
                + '</div>';
            cElement.children[0].addEventListener('click', _this._choosen);
        }

        return cElement;
    }
    /**
     *
     * @private
     */
    , _choosen: function() {
        var choosen = this.parentElement.querySelector('.choosen');
        if (choosen) {
            choosen.classList.remove('choosen');
        }
        this.classList.add('choosen');
    }
    /**
     *
     * @param args {Obj}
     * @returns {HTMLElement}
     * @private
     */
    , _inputImage: function(args) {
        var _this = this;
        args.elClass = args.elClass || '';
        var item = document.createElement('div');
        item.className = 'item clearfix nofloat nopadding ' + args.elClass;
        item.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" class="choice-images" />'
            + '<i class="icon-blr-gallery"></i>';

        item.querySelector('i').addEventListener('click', function() {
            var modGallery = new Modal('supra-modal-gallery', 'Gallery', {
                parentModal: _this
                , targetElement: item
                , type: args.type || 'normal'
            });
        });

        return item;
    }
    /**
     *
     * @param args
     * @returns {Element}
     * @private
     */
    , _inputImageForVideo:  function(args) {
        var _this = this;
        args.elClass = args.elClass || '';
        var item = document.createElement('div');
        item.className = 'item clearfix nofloat nopadding ' + args.elClass;
        item.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" class="choice-images" />'
            + '<i class="icon-folder-picture"></i>';

        item.querySelector('i').addEventListener('click', function() {
            var modGallery = new Modal('supra-modal-gallery', 'GalleryVideo', {
                parentModal: _this
                , targetElement: item
                , type: args.type
            });
        });

        return item;
    }
    /**
     *
     * @param args {Obj}
     * @returns {HTMLElement}
     * @private
     */
    , _inputVideo: function(args) {
        var _this = this;
        args.elClass = args.elClass || '';
        var item = document.createElement('div');
        item.className = 'item clearfix nofloat nopadding ' + args.elClass;
        item.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" class="choice-videos" data-type="' + args.type + '"/>'
            + '<i class="icon-folder-film"></i>';

        item.querySelector('i').addEventListener('click', function() {
            var modGallery = new Modal('supra-modal-gallery', 'GalleryVideo', {
                parentModal: _this
                , targetElement: item
                , type: args.type
            });
        });

        return item;
    }
    /**
     *
     * @returns {HTMLElement}
     * @private
     */
    , _separator: function() {
        var separator = document.createElement('div');
        separator.className = 'separator-or';
        separator.innerHTML = '<hr>'
            + '<div class="wrap flex-center">'
            + '<span class="flex-center">OR</span>'
            + '</div>';
        return separator;
    }
    /**
     *
     * @param {type} dropDown
     * @private
     */
    , _addEventListToDropdown: function(dropDown) {
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var eventCheckSelect = new CustomEvent(
                    'supra.check.select'
                    , {'detail': val}
                );
                dropDown.dispatchEvent(eventCheckSelect);
            });
        });
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._dropDown.dropDown|Element}
     * @private
     */
    , _dropDown: function(args) {
        var dropDown = document.createElement('div');
        var classItem = args.outerClass ? '' + args.outerClass : '';
        dropDown.className = 'item clearfix' + classItem;
        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">';
        args.menu.forEach(function(element) {
            ul += '<li><a href="#">' + firstUp(element) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = args.menu[0] ? firstUp(args.menu[0]) : '';
        var curentValue = args.menu[0] ? args.menu[0] : '';
        var callBackVal = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        if (callBackVal !== '') {
            var curentValue = callBackVal;
            visibleCValue = curentValue;
            if (args.mode !== 'lower') {
                visibleCValue = firstUp(curentValue);
            }
        }

        curentValue = replaceSpace(curentValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';

        dropDown.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn btn-default dropdown-toggle ' + args.elClass + '" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '">'
            + '<span>' + visibleCValue + '</span>'
            +' <i class="icon-chevron-down-select supra"></i>'
            + '</button>'
            + ul
            + '</div>';

        this._addEventListToDropdown(dropDown);


        this._countDropDown ++;

        return dropDown;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._switch.sw|Element}
     * @private
     */
    , _switch: function(args) {
        var sw = document.createElement('div');
        sw.className = 'item clearfix ' + args.elClass;
        var check = args.checked ? 'switch-on' : 'switch-off';
        var checkedInput = args.checked ? 'checked' : '';
        sw.innerHTML = '<div class="switch-group ' + args.type + '">' +
            '<label>' + args.title + '</label>' +
            '<div class="switch ' + check + '">'
            + '<input type="checkbox" name="switch" ' + checkedInput + '/>'
            + '<div class="wrap clearfix">'
            + '<span class="flex-center">ON</span>'
            + '<span class="switch-label flex-center"></span>'
            + '<span class="flex-center">OFF</span>'
            + '</div>'
            + '</div>' +
            '</div>';

        if (args.callback) args.callback(sw);

        return sw;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._switchSkin.sw|Element}
     * @private
     */
    , _switchSkin: function(args) {
        var _this = this;
        args.elClass = args.elClass || '';
        var sw = document.createElement('div');
        sw.className = 'item clearfix ' + args.elClass;
        sw.innerHTML = '<div class="switch-group ' + args.type + '">' +
            '<label>' + args.title + '</label>' +
            '<div class="switch-skin ' + args.mode + '">'
            + '<button data-skin="light-skin" class="light-skin text-center">'
            + '<span>Light</span>'
            + '</button>'
            + '<button data-skin="dark-skin" class="dark-skin text-center">'
            + '<span>Dark</span>'
            + '</button>'
            + '</div>' +
            '</div>';

        sw.querySelector('.switch-skin').addEventListener('click', function(e) {
            e.preventDefault();
            var button = e.target;
            if (button.tagName !== 'button') {
                button = _this.findParent( e.target, ['button']);
            }

            this.className = this.className.replace(/(dark|light)-skin/i, '');
            this.classList.add(button.dataset.skin);
        });

        return sw;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._switchSkin.sw|Element}
     * @private
     */
    , _switchCustom: function(args) {
        var _this = this;
        args.elClass = args.elClass || '';

        var buttons = '';
        args.items.forEach(function(el){
            var active = args.value === el.data ? ' active' : '';
            buttons += '<button data-value="' + el.data + '" class="text-center' + el.class + active + '">'
                + '<span>' + el.title + '</span>'
                + '</button>\n';
        });

        var sw = document.createElement('div');
        sw.className = 'item clearfix ' + args.elClass;
        sw.innerHTML = '<div class="switch-group ' + args.type + '">' +
            '<label>' + args.title + '</label>' +
            '<div class="switch-custom">'
            + buttons
            + '</div>' +
            '</div>';

        sw.querySelector('.switch-custom').addEventListener('click', function(e) {
            e.preventDefault();
            var button = e.target;
            if (button.tagName !== 'button') {
                button = _this.findParent( e.target, ['button']);
            }

            var active = sw.querySelector('.active');
            if (active) active.classList.remove('active');
            button.classList.add('active');
        });

        return sw;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._switchVisibility.v|Element}
     * @private
     */
    , _switchVisibility: function(args) {
        args.elClass = args.elClass || '';
        var v = document.createElement('div');
        v.className = 'item clearfix ' + args.elClass;
        var mode = {
            mobile: args.mode.mobile ? ' active' : ''
            , tablet: args.mode.tablet ? ' active' : ''
            , desktop: args.mode.desktop ? ' active' : ''
        };

        var count = 0;
        for(var check in mode) {
            if (mode[check] === ' active') count++;
        }
        v.innerHTML = '<div class="switch-group ' + args.type + '">' +
            '<label>' + args.title + '</label>' +
            '<div data-total="' + count + '" class="switch-visibility">'
            + '<button data-device="mobile" class="text-center' + mode.mobile + '">'
            + '<i class="icon-blr-mobile"></i>'
            + '</button>'
            + '<button data-device="tablet" class="text-center' + mode.tablet + '">'
            + '<i class="icon-blr-tablet"></i>'
            + '</button>'
            + '<button data-device="desktop" class="text-center' + mode.desktop + '">'
            + '<i class="icon-blr-desktop"></i>'
            + '</button>'
            + '</div>' +
            '</div>';

        v.querySelector('.switch-visibility').addEventListener('click', function(e) {
            e.preventDefault();
            var button = e.target;
            if (button.tagName !== 'button') {
                button = controls.findParent( e.target, ['button']);
            }

            if (button.classList.contains('active') && this.dataset.total*1 > 1) {
                button.classList.remove( 'active' );
                this.dataset.total--;
            } else if (!button.classList.contains('active')) {
                button.classList.add( 'active' );
                this.dataset.total++;
            }

        });

        return v;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._switchAlign.v|Element}
     * @private
     */
    , _switchAlign: function(args) {
        args.elClass = args.elClass || '';
        var sa = document.createElement('div');
        sa.className = 'item clearfix ' + args.elClass;
        var alignLeft = ''
            , alignCenter = ''
            , alignRight = '';
        switch (args.mode) {
            case 'text-left':
                alignLeft = ' active';
                break;
            case 'text-center':
                alignCenter = ' active';
                break;
            case 'text-right':
                alignRight = ' active';
                break;
        }

        sa.innerHTML = '<div class="switch-group ' + args.type + '">' +
            '<label>' + args.title + '</label>' +
            '<div class="switch-align">'
            + '<button data-align="left" class="flex-center' + alignLeft + '">'
            + '<i class="icon-text-align-left"></i>'
            + '</button>'
            + '<button data-align="center" class="flex-center' + alignCenter + '">'
            + '<i class="icon-text-align-center"></i>'
            + '</button>'
            + '<button data-align="right" class="flex-center' + alignRight + '">'
            + '<i class="icon-text-align-right"></i>'
            + '</button>'
            + '</div>' +
            '</div>';

        sa.querySelector('.switch-align').addEventListener('click', function(e) {
            e.preventDefault();
            var button = e.target;
            if (button.tagName !== 'button') {
                button = controls.findParent( e.target, ['button']);
            }

            if (!button.classList.contains('active')) {
                this.querySelector('button.active').classList.remove('active');
                button.classList.add( 'active' );
            }
        });

        return sa;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._radio.radioGroup|Element}
     * @private
     */
    , _radio: function(args) {
        var radioGroup = document.createElement('div');
        radioGroup.className = 'item clearfix ' + args.marginTop;
        var items = '';
        var radioName = args.name || 'radio';
        args.items.forEach(function(name, indx) {
            var checked = indx === 0 ? 'checked' : '';
            items += '<label class="radio-inline">'
                + '<input type="radio" name="' + radioName + '" value="' + name.toLowerCase().replace(/[\s\/]/ig, '-') + '" ' + checked + '>'
                + '<span class="lbl">' + name + '</span>'
                + '</label>';
        });
        var title = args.title !== undefined && args.title !== '' ? '<label>' + args.title + '</label>' : '' ;
        radioGroup.innerHTML = title
            + '<div class="supra radio nomargintop">'
            + items
            + '</div>';

        return radioGroup;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._checkbox.checkbox|Element}
     * @private
     */
    , _checkbox: function(args) {
        var checkbox = document.createElement('div');
        checkbox.className = 'item clearfix';
        checkbox.innerHTML = '<div class="supra checkbox">'
            + '<label>'
            + '<input type="checkbox" name="check">'
            + '<span class="lbl">' + args.name + '</span>'
            + '</label>'
            + '</div>';
        checkbox.querySelector('input').checked = args.checked;
        return checkbox;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._figure.figure|Element}
     * @private
     */
    , _figure: function(args) {
        var _this = this;
        var figure = document.createElement('div');
        figure.className = 'item clearfix';
        figure.innerHTML = '<figure>'
            + '<div class="wrap-hover">'
            + '<img src="" alt="image" />'
            + '<div class="img" style="display: none;"></div>'
            + '<div class="bg-test bg"></div>'
            + '<i class="icon-folder-picture flex-center before-square"></i>'
            + '</div>'
            + '<figcaption>600x800</figcaption>'
            + '</figure>';

        figure.querySelector('i').addEventListener('click', function() {
            var modGallery = new Modal('supra-modal-gallery', 'Gallery', {
                parentModal: _this
                , targetElement: args.callback()
                , type: 'normal'
            });
        });

        var img = figure.querySelector('img');
        var figcaption = figure.querySelector('figcaption');
        img.addEventListener('load', function() {
            if (args.section) {
                var widthSection = args.section.getBoundingClientRect().width;
                var ptWidth = Math.round(this.naturalWidth / widthSection * 100);
                var divImg = figure.querySelector('.img');

                divImg.dataset.percent = ptWidth;
                if (args.sizeAuto) {
                    divImg.style.backgroundSize = ptWidth + '% auto';
                    divImg.style.webkitBackgroundSize = ptWidth + '% auto';
                }
            }
            figcaption.innerHTML = this.naturalWidth + 'x' + this.naturalHeight;
        });

        return figure;
    }
    , _AOSPreview: function(args) {
        var _this = this;
        var aos = document.createElement('div');
        aos.className = 'aospreview';
        aos.innerHTML = '<div class="aoselement-preview"><div>';
        return aos;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._inputText.input|Element}
     * @private
     */
    , _inputText: function(args) {
        var input = document.createElement('div');
        args.elClass = args.elClass || '';
        args.value = args.value || '';
        args.disabled = args.disabled || '';
        args.placeholder = args.placeholder || '';
        input.className = 'item clearfix nopadding nofloat ' + args.elClass;

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';
        input.innerHTML = title
            + '<input type="text" class="choice-text ' + '" '
            + 'placeholder="' + args.placeholder + '" '
            + 'value="' + args.value +'" '
            + args.disabled + '>';
        return input;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._inputTextPassword.input|Element}
     * @private
     */
    , _inputTextPassword: function(args) {
        var input = document.createElement('div');
        args.elClass = args.elClass || '';
        args.value = args.value || '';
        args.disabled = args.disabled || '';
        args.placeholder = args.placeholder || '';
        input.className = 'item clearfix nopadding nofloat ' + args.elClass;

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';
        input.innerHTML = title
            + '<input type="text" class="choice-text d-none' + '" '
            + 'placeholder="' + args.placeholder + '" '
            + 'value="' + args.value +'" '
            + args.disabled + '>'
            + '<input type="password" class="choice-text ' + '" '
            + 'placeholder="' + args.placeholder + '" '
            + 'value="' + args.value +'" '
            + args.disabled + '>'
            + '<i class="icon-blr-show-pswd"></i>';

        input.querySelector('i').addEventListener('click', function (e) {
            var text = input.querySelector('input[type=text]');
            var pswd = input.querySelector('input[type=password]');
            if ( /show-pswd/i.test(this.className) ) {
                text.classList.remove('d-none');
                pswd.classList.add('d-none');
                text.value = pswd.value;
                this.className = 'icon-blr-hide-pswd';
            } else if ( /hide-pswd/i.test(this.className) ) {
                pswd.classList.remove('d-none');
                text.classList.add('d-none');
                pswd.value = text.value;
                this.className = 'icon-blr-show-pswd';
            }
        });

        return input;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._inputRange.range|Element}
     * @private
     */
    , _inputRange: function(args) {
        var range = document.createElement('div');
        args.elClass = args.elClass || '';
        range.className = 'item clearfix ' + args.elClass;
        var title = args.title && args.title !== '' ? '<label>' + args.title + '</label>' : '';
        var opacity = args.opacity();
        if (opacity) {
            range.innerHTML = title + '<input type="range" value="' + opacity*100 + '"/>';
        } else {
            range.innerHTML = '<input type="range" value="100"/>';
        }

        return range;
    }
    /**
     *
     * @returns {Modal.prototype._pageSettinsButton.btnGroup|Element}
     * @private
     */
    , _pageSettinsButton: function() {
        var _this = this;
        var btnGroup = document.createElement('div');
        btnGroup.className = 'item clearfix';

        btnGroup.innerHTML = '<div class="btn-group gray-buttons-group" role="group" aria-label="...">'
            + '<button id="general" type="button" '
            + 'class="supra-btn btn-default-dark col-sm-4 col-md-4 col-lg-4 active">General</button>'
            + '<button id="seo" type="button" '
            + 'class="supra-btn btn-default-dark col-sm-4 col-md-4 col-lg-4">SEO</button>'
            + '<button id="s-preloader" type="button" '
            + 'class="supra-btn btn-default-dark col-sm-4 col-md-4 col-lg-4">Preloader</button>'
            + '</div>';

        var buttons = btnGroup.querySelectorAll('button');
        Array.prototype.forEach.call(buttons, function(element) {
            element.addEventListener('click', function() {
                _this.selection(this);
                var parent = _this.findParent(this, ['btn-page-control']);
                var className = parent.className;
                var pattern = new RegExp('(general|seo|s-preloader)','i');
                if (parent) parent.className = className.replace(pattern, this.id);
            });
        });
        return btnGroup;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._textArea.textArea|Element}
     * @private
     */
    , _textArea: function(args) {
        var textArea = document.createElement('div');
        textArea.className = 'item clearfix' + args.elClass;
        var label = args.title !== '' ? '<label>' + args.title + '</label>' : '';

        textArea.innerHTML = '<div class="">'
            + label
            + '<textarea>' + args.value + '</textarea>'
            + '</div>';

        return textArea;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._description.p|Element}
     * @private
     */
    , _description: function(args) {
        var p = document.createElement('div');
        p.className = 'item clearfix';

        p.innerHTML = '<p class="small desc">' + args.value + '</p>';

        return p;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._label.l|Element}
     * @private
     */
    , _label: function(args) {
        var l = document.createElement('label');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        l.className = 'item clearfix lbl' + classItem;

        l.innerHTML = args.value;

        return l;
    }
    /**
     *
     * @param {type} args
     * @returns {Modal.prototype._preloaderType.preloader|Element}
     * @private
     */
    , _preloaderType: function(args) {
        var _this = this;
        var preloader = document.createElement('div');
        preloader.id = 'prev-preload';
        preloader.className = 'item icons clearfix';

        preloader.innerHTML = '<label>' + args.title + '</label>';

        args.html.forEach(function(element, indx){
            preloader.appendChild(_this._preloaderItem(_this, element, args.dataName[indx], args.active));
        });

        return preloader;
    }
    /**
     * This function called from this._getModalGallery(), this._getModalGalleryVideo()
     * and this._getModalIconsGallery()
     * @param {type} args
     * @returns {Modal.prototype._galleryItems.gallery|Element}
     * @private
     */
    , _galleryItems: function(args) {
        var _this = this;
        var gallery = document.createElement('div');
        gallery.className = 'item ' + args.className + ' clearfix';
        if (args.className === 'gallery' && args.type !== 'jpg') {
            gallery.innerHTML = '<nav>\n' +
                '  <div class="nav nav-tabs" id="nav-tab" role="tablist">\n' +
                '  </div>\n' +
                '</nav>\n' +
                '<div class="tab-content" id="nav-tabContent">\n' +
                '</div>';
            var navTabs = gallery.querySelector('.nav-tabs');
            var tabContent = gallery.querySelector('.tab-content');

            var keys = Object.keys(args.data);
            _this.indexes = {};
            var selected = false;
            var triggerS = false;
            keys.forEach(function (k, indx) {
                var nameFile = _this._targetObject.targetElement.querySelector('input').value;
                var nameId = /images.*\/[^./]+\./i.test(nameFile) ? nameFile.match(/images.*\/([^./]+)\./i)[1].toLowerCase() : '';
                var folder = /gallery\/[^/]+\//i.test(nameFile) ? nameFile.match(/gallery\/([^/]+)/i)[1].toLowerCase() : '';
                var endIndex = args.data[k].length > 48 ? 48 : args.data[k].length;
                if (nameId !== '' && !triggerS) {
                    for (var i = 0; i !== args.data[k].length; i++) {
                        if (
                            new RegExp('^' + nameId + '\\.', 'i').test(args.data[k][i].name)
                            && (
                                ( folder && new RegExp('/' + folder + '/', 'i').test(args.data[k][i].path) )
                                || (k === 'general')
                            )
                        ) {
                            endIndex = i < endIndex ? endIndex : i + 1;
                            selected = true;
                            triggerS = true;
                            break;
                        }
                    }
                }

                var navItem = document.createElement('a');
                navItem.className = 'nav-item nav-link' + (selected ? ' active' : '');
                navItem.id = 'nav-' + k + '-tab';
                navItem.dataset.toggle = 'tab';
                navItem.setAttribute('href', '#nav-' + k);
                navItem.setAttribute('role', 'tab');
                navItem.setAttribute('aria-controls', 'nav-' + k);
                navItem.setAttribute('aria-selected', 'true');
                navItem.innerHTML = firstUp(k);
                navTabs.appendChild(navItem);

                var navPane = document.createElement('div');
                navPane.className = 'tab-pane fade height-500' + (selected ? ' show active' : '');
                navPane.id = 'nav-' + k;
                navPane.setAttribute('role', 'tabpanel');
                navPane.setAttribute('aria-labelledby', 'nav-' + k + '-tab');
                var wrapper = document.createElement('div');
                wrapper.className = 'wrapper';
                navPane.appendChild(wrapper);
                tabContent.appendChild(navPane);

                _this.indexes[k] = {
                    start: endIndex
                    , end: (endIndex + 24 < args.data[k].length) ? endIndex + 24 : args.data[k].length
                };

                if (selected) {
                    for (var i = 0; i !== endIndex; i++) {
                        wrapper.appendChild(_this._getItemForGallery(
                            args.data[k][i].name
                            , args.data[k][i].width
                            , args.data[k][i].height
                            , args.data[k][i].path
                            , null
                            , args.data[k][i].srcset
                        ));
                    }
                    var preloader = _this._body.querySelector('.preloader');
                    _this._body.classList.remove('modal-gallery');
                    _this._body.removeChild(preloader);
                    _this.indexes[k].first = true;
                    selected = false;
                }

                navItem.addEventListener('click', function () {
                    var key = this.innerHTML.toLowerCase();
                    if (!_this.indexes[key].first) {
                        for (var i = 0; i !== endIndex; i++) {
                            wrapper.appendChild(_this._getItemForGallery(
                                args.data[key][i].name
                                , args.data[key][i].width
                                , args.data[key][i].height
                                , args.data[key][i].path
                                , null
                                , args.data[key][i].srcset
                            ));
                        }
                        _this.indexes[key].first = true;
                    }
                });

                navPane.addEventListener('scroll', function(){
                    if (
                        this.scrollTop > (wrapper.clientHeight - this.clientHeight - 100)
                        && _this.indexes[k].end <= args.data[k].length
                    ) {
                        for (var i = _this.indexes[k].start; i !== _this.indexes[k].end; i++) {
                            wrapper.appendChild(_this._getItemForGallery(args.data[k][i].name
                                , args.data[k][i].width
                                , args.data[k][i].height
                                , args.data[k][i].path
                                , null
                                , args.data[k][i].srcset
                            ));
                        }
                        _this.indexes[k].start += 24;
                        if (_this.indexes[k].end < args.data[k].length) {
                            _this.indexes[k].end += 24;
                            if (_this.indexes[k].end > args.data[k].length)
                                _this.indexes[k].end = args.data[k].length;
                        } else {
                            _this.indexes[k].end += 24;
                        }
                    }
                });
            });

            if (!triggerS) {
                gallery.querySelector('.nav-tabs .nav-item').classList.add('active');
                var tabContent = gallery.querySelector('.tab-content .tab-pane');
                tabContent.classList.add('active');
                tabContent.classList.add('show');
                for (var i = 0; i !== 48; i++) {
                    tabContent.querySelector('.wrapper').appendChild(_this._getItemForGallery(
                        args.data['general'][i].name
                        , args.data['general'][i].width
                        , args.data['general'][i].height
                        , args.data['general'][i].path
                        , null
                        , args.data['general'][i].srcset
                    ));
                }
                var preloader = _this._body.querySelector('.preloader');
                _this._body.classList.remove('modal-gallery');
                _this._body.removeChild(preloader);
                _this.indexes['general'].first = true;
            }
        } else if (args.className === 'gallery' && args.type === 'jpg') {
            args.data.forEach(function (element) {
                gallery.appendChild(_this._getItemForGallery(element.name
                    , element.width
                    , element.height
                    , './video/gallery/' + element.name));
            });
        } else if (args.className === 'gallery-video') {
            args.data.forEach(function (element) {
                gallery.appendChild(_this._getItemForGalleryVideo(element.name
                    , element.width
                    , element.height
                    , './video/gallery/' + element.name));
            });
        }
        //TODO: should be delete
        // else {
        //     args.data.forEach(function (element) {
        //         gallery.appendChild(_this._getItemForIconsGallery(element));
        //     });
        // }

        return gallery;
    }
    /**
     *
     * @param {type} _this
     * @param {type} el
     * @param {type} dataName
     * @param {type} activeItem
     * @returns {Modal.prototype._preloaderItem.item|Element}
     * @private
     */
    , _preloaderItem: function(_this, el, dataName, activeItem) {
        var item = document.createElement('div');
        var active = dataName === activeItem ? ' active' : '';
        item.dataset.value = dataName;
        item.className = 'choice-element d-flex justify-content-center align-items-center flex-column' + active;
        item.innerHTML = el;

        item.addEventListener('click', function(){
            _this.selection(this);
            if (this.querySelector('.icon-blr-picture')) {
                _this._body.classList.add('show-input-img');
            } else {
                if (_this._body.classList.contains('show-input-img')) {
                    _this._body.classList.remove('show-input-img');
                }
            }
        });

        return item;
    }
    /**
     *
     * @param {type} _this
     * @returns {Modal.prototype._upload.upload|Element}
     * @private
     */
    , _upload: function(_this) {
        var upload = document.createElement('div');
        upload.className = 'upload';
        upload.innerHTML = '<button><i class="icon-blr-cloud-upload"></i>Upload</button>'
            + '<input type="file" name="image" />';
        var inputFile = upload.querySelector('input');
        upload.querySelector('button').addEventListener('click', function() {
            if (typeof download === 'function') {
                inputFile.click();
            } else {
                var downloadButton = document.querySelector('.btn-success.download');
                var modal = new Modal('supra-modal', 'Demo', downloadButton);
                $(modal).modal('show');
            }
        });
        inputFile.addEventListener('change', function() {

            if (inputFile.files && inputFile.files[0]) {
                var nameFile = replaceSpace(inputFile.files[0].name);
                var nameTrigger = false;
                //var index = 1;

                var navActiveItem = _this._body.querySelector('.nav-tabs .nav-item.active');
                var navActivePane = _this._body.querySelector('.tab-content .tab-pane.active .wrapper');
                var key = navActiveItem ? navActiveItem.innerHTML.toLowerCase() : 'general';
                var images = _this._elementsGallery[key];
                key = key === 'general' ? '' : key + '/';

                var form = new FormData();
                form.append('data', inputFile.files[0]);
                form.append('name_file', nameFile);
                form.append('sub_folder', key);
                builder.ajax(form, 'addgallery');

                images.forEach(function(element) {
                    if (nameFile === element.name) {
                        nameTrigger = true;
                    }
                });

                if (!nameTrigger) {
                    var reader = new FileReader();
                    reader.readAsDataURL(inputFile.files[0]);

                    reader.addEventListener('load', function(e) {
                        var gallery = _this._body.querySelector('.item.gallery');
                        gallery = navActivePane ? navActivePane : gallery;
                        var image = new Image();
                        image.src = e.target.result;

                        image.addEventListener('load', function() {
                            var newElement = _this._getItemForGallery(
                                nameFile
                                , this.naturalWidth
                                , this.naturalHeight
                                , e.target.result
                                , './images/gallery/' + key + nameFile);

                            gallery.appendChild(newElement);

                            builder.selection(newElement);

                            var body = gallery.parentElement;
                            var heightBody = body.getBoundingClientRect().height;
                            var heightGalleryWrapper = gallery.getBoundingClientRect().height;

                            body.scrollTop = heightGalleryWrapper - heightBody;
                        });
                    });
                } else {

                    var nameId = /[^./]+\./i.test(nameFile) ? nameFile.match(/([^./]+)\./i)[1].toLowerCase() : '';
                    if (nameId !== '') {

                        var gallery = _this._body.querySelector('.item.gallery');
                        var body = gallery.parentElement.parentElement;
                        var choosenEelement = body.querySelector('[data-id=' + nameId + ']');
                        if (choosenEelement) {
                            var img = choosenEelement.querySelector('img');
                            var imgSrc = clearTimeStamp(img.getAttribute('src'));

                            imgSrc += '?t=' + Date.now();
                            img.setAttribute('src', imgSrc);
                            choosenEelement.dataset.src = imgSrc;

                            builder.selection(choosenEelement);
                            var scrollTopBody = body.scrollTop;
                            var positionTopBody = body.getBoundingClientRect().top;
                            var positionChEl = choosenEelement.getBoundingClientRect().top;

                            body.scrollTop = scrollTopBody + positionChEl - positionTopBody;
                        }
                    }
                }
            }
        });

        return upload;
    }
    /**
     *
     * @param {type} _this
     * @returns {Modal.prototype._upload.upload|Element}
     * @private
     */
    , _search: function() {
        var _this = this;
        var search = document.createElement('div');
        search.className = 'search';
        search.innerHTML = '<i class="icon-blr-lg-search"></i>' +
            '<input type="text" name="search" />';
        var inputSearch = search.querySelector('input');

        inputSearch.addEventListener('keyup', function() {
            var navActiveItem = _this._body.querySelector('.nav-tabs .nav-item.active');
            var navActivePane = _this._body.querySelector('.tab-content .tab-pane.active .wrapper');
            var key = navActiveItem.innerHTML.toLowerCase();
            navActivePane.innerHTML = '';

            var result = _this._elementsGallery[key].filter(function(element){
                return new RegExp(inputSearch.value, 'i').test(element.name);
            });

            result.forEach(function (element) {
                navActivePane.appendChild(_this._getItemForGallery(
                    element.name
                    , element.width
                    , element.height
                    , element.path
                    , null
                    , element.srcset
                ));
            });

            if (inputSearch.value === '') {
                _this.indexes[key].end = result.length;
            }
        });

        return search;
    }
    /**
     *
     * @param {type} _this
     * @returns {Modal.prototype._upload.upload|Element}
     * @private
     */
    , _uploadVideo: function(_this, type) {
        var upload = document.createElement('div');
        upload.className = 'upload';
        upload.innerHTML = '<button><i class="supra icon-blr-cloud-upload"></i>Upload</button>'
            + '<input type="file" name="image" accept=".' + type + '"/>';
        var inputFile = upload.querySelector('input');
        upload.querySelector('button').addEventListener('click', function() {
            if (typeof download === 'function') {
                inputFile.click();
            } else {
                var downloadButton = document.querySelector('.btn-success.download');
                downloadButton.dataset.href = builderOptions.fullVersionSource;
                var modal = new Modal('supra-modal', 'Demo', downloadButton);
                $(modal).modal('show');
            }
        });
        inputFile.addEventListener('change', function() {

            if (inputFile.files && inputFile.files[0]) {
                var itemsGallery = _this._elementsGallery;
                var nameFile = replaceSpace(inputFile.files[0].name);
                var nameTrigger = false;
                var index = 1;

                itemsGallery.forEach(function (element) {
                    if (nameFile === element.name) {
                        nameTrigger = true;
                    }
                });

                var form = new FormData();
                form.append('data', inputFile.files[0]);
                form.append('name_file', nameFile);
                builder.ajax(form, 'addgalleryvideo', function(data) {
                    var error = JSON.parse(data).error;
                    if (error) {
                        var modal = new Modal('supra-modal', 'Attention', {response: error});
                        $(modal).modal('show');
                    } else if (!nameTrigger) {
                        if (type === 'jpg') {
                            var reader = new FileReader();
                            reader.readAsDataURL(inputFile.files[0]);

                            reader.addEventListener('load', function(e) {
                                var gallery = _this._body.querySelector('.item.gallery');
                                var image = new Image();
                                image.src = e.target.result;

                                image.addEventListener('load', function() {

                                    gallery.appendChild(_this._getItemForGallery(
                                        nameFile
                                        , this.naturalWidth
                                        , this.naturalHeight
                                        , e.target.result
                                        , './video/gallery/' + nameFile)
                                    );
                                });
                            });
                        } else {
                            var gallery = _this._body.querySelector('.item.gallery-video');
                            gallery.appendChild(_this._getItemForGalleryVideo(
                                nameFile
                                , ''
                                , ''
                                , './video/gallery/' + nameFile)
                            );
                        }
                    }
                });
            }
        });

        return upload;
    }
    /**
     *
     * @param {type} name
     * @param {type} width
     * @param {type} height
     * @param {type} src
     * @param {type} path
     * @returns {Modal.prototype._getItemForGallery.item|Element}
     * @private
     */
    , _getItemForGallery: function(name, width, height, src, path, srcset) {
        var path = path || src;
        var item = document.createElement('figure');
        var _this = this;
        var nameId = /[^.]+\./i.test(name) ? name.match(/([^.]+)\./i)[1].toLowerCase() : '';
        item.className = 'selecting-item';
        item.dataset.src = path;
        item.dataset.id = nameId.replace(/@/, '_');

        var image = new Image();
        image.src = src;
        image.setAttribute('alt', 'section');
        if (srcset) {
            srcset = './images/gallery/' + srcset;
            //image.setAttribute('srcset', srcset);
            item.dataset.srcset = srcset;
        }
        var format = 1.085;
        if (window.innerWidth < 501) format = 0.75;
        if (!/\.svg/.test(src)) {
            this._imageSizig(width, height, format, image);

            item.innerHTML = '<div class="wrap-hover d-flex justify-content-center align-items-center">'
                + '</div>'
                + '<figcaption>'
                + '<p>' + clearTimeStamp(name) + '</p>'
                + '<p>' + width + 'x' + height + '</p>'
                + '</figcaption>';

            item.querySelector('.wrap-hover').appendChild(image);

            item.addEventListener('click', function () {
                builder.selection(this);
            });
        } else {
            var image = new Image();
            image.src = src;

            image.addEventListener('load', function() {
                _this._imageSizig(this.naturalWidth, this.naturalHeight, format, image);

                item.innerHTML = '<div class="wrap-hover d-flex justify-content-center align-items-center">'
                    + '</div>'
                    + '<figcaption>'
                    + '<p>' + clearTimeStamp(name) + '</p>'
                    + '<p>' + this.naturalWidth + 'x' + this.naturalHeight + '</p>'
                    + '</figcaption>';

                item.querySelector('.wrap-hover').appendChild(image);

                item.addEventListener('click', function () {
                    builder.selection(this);
                });
            });
        }

        return item;
    }
    /**
     *
     * @param {type} name
     * @param {type} src
     * @param {type} path
     * @returns {Modal.prototype._getItemForGallery.item|Element}
     * @private
     */
    , _getItemForGalleryVideo: function(name, width, height, path) {
        var nameId = /[^.]+\./i.test(name) ? name.match(/([^.]+)\./i)[1].toLowerCase() : '';
        var item = document.createElement('figure');
        item.className = 'selecting-item video-item';
        item.dataset.src = path;
        item.dataset.id = nameId;

        var content = '<span class="icon-clapboard-play flex-center"></span>';
        if (width !== '' && height !== '') {
            content = '';
            var image = new Image();
            image.src = path.match(/\.[^.]*/i)[0] + '.jpg';
            image.setAttribute('alt', 'section');
            var format = 1.085;
            if (window.innerWidth < 501) format = 0.75;
            this._imageSizig(width, height, format, image);
        }

        item.innerHTML = '<div class="wrap-hover  d-flex justify-content-center align-items-center">'
            + content
            + '</div>'
            + '<figcaption>'
            + '<p class="name-video">' + name + '</p>'
            + '</figcaption>';

        if (width !== '' && height !== '') {
            item.querySelector('.wrap-hover').appendChild(image);
        }

        item.addEventListener('click', function(){
            builder.selection(this);
        });

        return item;
    }
    //TODO: should be delete
    /**
     *
     * @param {type} icon
     * @returns {Modal.prototype._getItemForIconsGallery.item|Element}
     * @private
     */
    // , _getItemForIconsGallery: function(icon) {
    //     var item = document.createElement('div');
    //     item.className = 'ico choice-element flex-center';
    //
    //     item.innerHTML = '<i class="ok supra icon-check2"></i>'
    //         + '<span class="bg-white-circle"></span>'
    //         + '<i class="' + icon.slice(1) + '"></i>';
    //
    //     item.addEventListener('click', function(){
    //         builder.selection(this);
    //     });
    //     return item;
    // }
    /**
     *
     * @param {type} width
     * @param {type} height
     * @param {type} format
     * @param {type} DOMimage
     * @returns {undefined}
     * @private
     */
    , _imageSizig: function(width, height, format, DOMimage) {
        if (height <= width && (width/height) > format) {
            DOMimage.style.width = '100%';
        } else {
            DOMimage.style.height = '100%';
            DOMimage.style.width = 'auto';
        }
    }
    /**
     *
     * @param {type} classButton
     * @param {type} nameButton
     * @param {type} callback
     * @returns {Modal.prototype._getButton.button|Element}
     * @private
     */
    , _getButton: function(classButton, nameButton, callback) {
        var button = document.createElement('button');
        button.className = classButton;
        button.setAttribute('type', 'button');
        button.innerHTML = nameButton;

        button.addEventListener('click', function() {
            callback();
        });

        return button;
    }
    , _colorpickerDouble: function(args) {
        args.elClass = args.elClass || '';
        var item = document.createElement('div');
        item.className = 'item clearfix nofloat nopadding ' + args.elClass;
        var cp1 = document.createElement('input');
        cp1.setAttribute('type', 'text');
        cp1.setAttribute('name', 'colorpicker_main');
        cp1.value = args.callback()[0];
        var cp2 = document.createElement('input');
        cp2.setAttribute('type', 'text');
        cp2.setAttribute('name', 'colorpicker_grnt');
        cp2.value = args.callback()[1];

        item.appendChild(cp1);
        item.appendChild(cp2);

        $(this._selfDOM).on('show.bs.modal', function() {
            $(cp1).spectrum({
                color: args.callback()[0]
                , showPalette: true
                , preferredFormat: "hex"
                , allowEmpty: false
                , showAlpha: true
                , localStorageKey: "spectrum.weber"
                , change: args.changeMain
                , hide: args.cancel
            });

            $(cp2).spectrum({
                color: args.callback()[2]
                , showPalette: true
                , preferredFormat: "hex"
                , allowEmpty: false
                , showAlpha: true
                , localStorageKey: "spectrum.weber"
                , change: args.changeGrnt
                , hide: args.cancel
            });
        });

        return item;
    }
    /**
     *
     * @returns {HTMLElement}
     * @private
     */
    , _aweberLink: function(args) {
        args.elClass = args.elClass || '';

        var link = document.createElement('div');
        link.className = 'item clearfix nopadding nofloat ' + args.elClass;

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';
        link.innerHTML = title + '<a href="' + baseUri + 'ajax.php?mode=getawebercredentials" target="_blank">Verify your account'
            + '</a>';
        return link;
    }
    /**
     * -------------------------------------------- Part - create modal type ----------------------------------------
     */

    /**
     * To create modal dialog for tuning section, nav and popus background
     */

    /**
     * This function called from this._inputImage()
     * @private
     */
    , _getModalGallery: function (_this) {
        this._title.classList.add('flex-first');
        this._title.innerHTML = '<h4>Choose image</h4>';
        this._title.appendChild(this._upload(_this));
        this._elementsGallery = null;

        this._body.classList.add('modal-gallery');
        this._body.classList.add('g-items');
        var preloader = document.createElement('div');
        preloader.className = 'loading-round preloader';
        this._body.appendChild(preloader);

        var form = new FormData();
        form.append('type', this._targetObject.type);
        Core.prototype.ajax(form, 'getgallery', function(data) {
            data = JSON.parse(data);
            _this._constructModalBody([
                    {
                        name: 'gallery'
                        , func: 'galleryItems'
                        , args: {data: data.gallery, className: 'gallery'}
                    }
                ], 'col-sm-12 col-md-12 col-lg-12 nopadding'
            );
            _this._elementsGallery = data.gallery;

            _this._title.appendChild(_this._search());

            var nameFile = _this._targetObject.targetElement.querySelector('input').value;
            var nameId = /images.*\/[^./]+\./i.test(nameFile) ? nameFile.match(/images.*\/([^./]+)\./i)[1].toLowerCase() : '';
            if (nameId !== '') {
                var gallery = _this._body.querySelector('.tab-content .tab-pane.active .wrapper');
                var choosenEelement = gallery.querySelector('[data-id=' + nameId.replace(/@/, '_') + ']');
                if (choosenEelement) {
                    builder.selection(choosenEelement);
                    var scrollTopBody = gallery.parentElement.scrollTop;
                    var positionTopBody = gallery.parentElement.getBoundingClientRect().top;
                    var positionChEl = choosenEelement.getBoundingClientRect().top;

                    gallery.parentElement.scrollTop = scrollTopBody + positionChEl - positionTopBody;
                }
            }
        });

        var modalG = $(_this._selfDOM).modal('show');

        //this is need to create new button because modal-footer will be overloaded
        var cancel = this._getButton('supra-btn btn-default', 'Cancel', function() {
            var modal = _this._targetObject;

            $(_this._selfDOM).modal('hide');
        });

        var apply = this._getButton('supra-btn btn-primary', 'Apply', function() {
            var selectedImg = _this._elements.gallery.querySelector('.tab-content .tab-pane.active .active');
            var modal = _this._targetObject;
            if (selectedImg) {
                var src = selectedImg.dataset.src;
                var postfix = '';
                if (modal.targetElement.classList.contains('retina')) {
                    postfix += ' 2x';
                } else {
                    var cElement = _this.findParent(modal.targetElement, ['c-element']);
                    var retinaInput = cElement ? cElement.querySelector('.input-img input') : null;
                    if (retinaInput && selectedImg.dataset.srcset) {
                        retinaInput.value =
                            selectedImg.dataset.srcset;
                    } else if (retinaInput) {
                        retinaInput.value = '';
                    }
                }
                src = src.replace(/^\.\//, '');
                modal.targetElement.querySelector('input').value = clearTimeStamp(src) + postfix;
                var figure = modal.parentModal._elements.figure;
                if (figure) {
                    var img = figure.querySelector('img');
                    var divImg = figure.querySelector('.img');

                    if (modal.targetElement.classList.contains('video')) {
                        var $video = builder.windowIframe.jQuery(figure).find('.bg-video');
                        var dataVide = $video.data('vide');
                        var mp4 = dataVide.path.mp4;
                        var ogv = dataVide.path.ogv;
                        $video.data('vide').destroy();
                        $video.vide({
                            mp4: mp4,
                            ogv: ogv,
                            poster: src.slice(2)
                        }, {posterType: 'jpg'});
                    } else {
                        img.src = src;
                        //if (selectedImg.dataset.srcset) {
                        //    img.setAttribute('srcset', selectedImg.dataset.srcset + ' 2x');
                        //} else {
                        //    img.removeAttribute('srcset');
                        //}
                        divImg.style.backgroundImage = 'url(\'' + src + '\')';
                    }
                }
            }

            $(_this._selfDOM).modal('hide');
        });

        this._footer.appendChild(cancel);
        this._footer.appendChild(apply);

    }
    /**
     *
     * @private
     */
    , _getModalGalleryVideo: function (_this) {
        this._title.innerHTML = '<h4>Choose video</h4>';
        var className = 'gallery-video';
        if (_this._targetObject.type === 'jpg') {
            this._title.innerHTML = '<h4>Choose poster</h4>';
            className = 'gallery';
        }
        this._title.appendChild(this._uploadVideo(_this, _this._targetObject.type));
        this._elementsGallery = null;

        var form = new FormData();
        form.append('data', _this._targetObject.type);
        Core.prototype.ajax(form, 'getgalleryvideo', function(data) {
            data = JSON.parse(data);
            _this._constructModalBody([
                    {
                        name: 'gallery'
                        , func: 'galleryItems'
                        , args: {data: data.gallery, className: className, type: _this._targetObject.type}
                    }
                ], 'col-sm-12 col-md-12 col-lg-12 nopadding'
            );
            _this._elementsGallery = data.gallery;
        });

        // var modalPreloader = _this._targetObject.parentModal._selfDOM.querySelector('.modal-preloader');
        // modalPreloader.classList.toggle('active');

        var modalG = $(_this._selfDOM).modal('show');

        modalG.on('shown.bs.modal', function(){
            // modalPreloader.classList.toggle('active');

            var body = _this._body;
            var nameFile = _this._targetObject.targetElement.querySelector('input').value;
            var nameId = /video.*\/[^./]+\./i.test(nameFile) ? nameFile.match(/video.*\/([^./]+)\./i)[1].toLowerCase() : '';

            if (nameId !== '') {
                var choosenEelement = body.querySelector('[data-id=' + nameId + ']');
                if (choosenEelement) {
                    builder.selection(choosenEelement);
                    var gallery = body.querySelector('.item.gallery');
                    var scrollTopBody = body.scrollTop;
                    var positionTopBody = body.getBoundingClientRect().top;
                    var positionChEl = choosenEelement.getBoundingClientRect().top;

                    body.scrollTop = scrollTopBody + positionChEl - positionTopBody;
                }
            }
        });

        this._body.classList.add('height-500');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-primary', 'Apply', function() {
            if (_this._elements.gallery.getElementsByClassName('active')) {
                var modal = _this._targetObject;
                var selectedVideo = _this._elements.gallery.getElementsByClassName('active')[0];
                if (selectedVideo) {
                    var src = selectedVideo.dataset.src;
                    var postfix = '';
                    modal.targetElement.querySelector('input').value = src + postfix;
                    var figure = modal.parentModal._elements.figure;
                    if (figure) {
                        var $video = builder.windowIframe.jQuery(figure).find('.bg-video');
                        var dataVide = $video.data('vide');
                        var mp4 = dataVide ? dataVide.path.mp4 : '';
                        var ogv = dataVide ? dataVide.path.ogv : '';
                        var poster = dataVide ? dataVide.path.poster : '';
                        if ($video.data('vide'))
                            $video.data('vide').destroy();
                        if (_this._targetObject.type === 'mp4') {
                            $video.vide({
                                mp4: src.slice(2),
                                ogv: ogv,
                                poster: poster
                            }, {posterType: 'jpg'});
                        } else if (_this._targetObject.type === 'ogv') {
                            $video.vide({
                                mp4: mp4,
                                ogv: src.slice(2),
                                poster: poster
                            }, {posterType: 'jpg'});
                        } else {
                            $video.vide({
                                mp4: mp4,
                                ogv: ogv,
                                poster: src.slice(2)
                            }, {posterType: 'jpg'});
                        }
                    }
                }
            }

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);

    }
    /**
     *
     *
     */
    , _getModalCodeEditor: function(_this) {
        var li = _this._targetObject;
        var section = '';
        var i = 0;
        while (li.children[i].nodeName !== 'STYLE') {
            section += li.children[i].outerHTML + '\n';
            i++;
        }

        //for popup
        if (li.children[0].classList.contains('modal')) {
            section = li.children[0].innerHTML + '\n';
        }

        _this._title.innerHTML = '<h4>Section code editor</h4>';

        _this._constructModalBody([
                {
                    name: 'textArea'
                    , func: 'textArea'
                    , args: {
                    title: ''
                    , elClass: 'col-sm-12 col-md-12 col-lg-12 nopadding'
                    , value: ''
                }
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding seo'
        );
        _this._elements.textArea.querySelector('textarea').value = section;
        $(_this._selfDOM).on('show.bs.modal', function() {
            _this.editor = CodeMirror.fromTextArea(_this._elements.textArea.querySelector('textarea'), {
                lineNumbers: true,
                mode: "text/html"
            });
        });

        _this._modalDialog.classList.add('html-code-editor');

        var argsSave = {
            textArea: _this._elements.textArea.querySelector('textarea').value
        };

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-primary', 'Apply', function() {

            _this._elements.textArea.querySelector('textarea').value = _this.editor.getValue();

            var args = {
                textArea: _this._elements.textArea.querySelector('textarea').value
            };

            _this._applyCodeEditor(_this, li, args, argsSave);

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _applyCodeEditor: function(_this, li, args, argsSave) {
        //for popup
        if (li.children[0].classList.contains('modal')) {
            li.children[0].removeChild(li.children[0].children[0]);

            li.children[0].innerHTML = args.textArea + li.children[0].innerHTML;
        } else {
            while (li.children[0].nodeName !== 'STYLE') {
                li.removeChild(li.children[0]);
            }

            li.innerHTML = args.textArea + li.innerHTML;
        }

        if (li.querySelector('.spr-gallery')) {
            _this.clearGalleryOnPage(li);
        }
        _this.reloadScript(li);
        _this.rebuildControl(li);
        _this._refreshParallax(li);
        _this._reloadMagnific(li);
        _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(li);
        _this._reloadVideoBg(li, 'run');

        builder.setControlsElementOnSection( li, li, 'edit-sections', false );

        _this.setStep(function() {
            _this._applyCodeEditor(_this, li, argsSave, args);
        });
    }
    /**
     *
     * @private
     */
    , _getModalDelete: function(_this) {
        _this._header.innerHTML = '<h5 class="text-center">Are you sure you want to delete this section?</h5>';
        _this._body.classList.add('nopadding');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-danger', 'Delete', function() {
            var page = _this._targetObject.page;
            var section = _this._targetObject.section;

            page.deleteSection(section);

            //if (AOS) AOS.refresh();
            if (builder.windowIframe.AOS) builder.windowIframe.AOS.refresh();

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _getModalDeleteElement: function(_this) {
        _this._header.innerHTML = '<h5 class="text-center">Are you sure you want to delete this element?</h5>';
        _this._body.classList.add('nopadding');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-danger', 'Delete', function() {
            var DOMElement = _this._targetObject;
            var li = _this.findParent(DOMElement, ['section-item']);
            _this.getActivePageObject().sections[li.children[0].id].deleteElement(DOMElement);

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _getModalDeleteProject: function(_this) {
        _this._header.innerHTML = '<h5 class="text-center">If you start new project, current project will be deleted. Are you sure you want to start new project?</h5>';
        _this._body.classList.add('nopadding');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-primary', 'Start new project', function() {

            _this.leftPanel.cPanels['project-pages'].createNewProject();

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _getModalReplace: function(_this) {
        var page = _this._targetObject;
        var key = Object.keys(page.sections[builder.sectionClicked.dataset.group])[0];
        //var section = page.sections[builder.sectionClicked.dataset.group][key].html;
        var section = page.getDOMSelf().querySelector('#' + key).parentElement;

        var nameSection = 'footer';
        if (section.classList.contains('nav') && builder) {
            nameSection = 'header';
        }

        _this._header.innerHTML = '<h5 class="flex-center">You can add only one navigation per page.</h5>'
            + '<h5 class="flex-center">Do you want raplace ' + nameSection + '?</h5>';
        _this._body.classList.add('nopadding');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-danger', 'Replace', function() {

            page.deleteSection(section, null, null, 'replace');
            if (document.body.classList.contains('off-canvas-active')) {
                document.body.classList.remove('off-canvas-active');
            }

            if (section.classList.contains('nav') && builder) {
                page.addSection(builder.sectionClicked, 'nav', builder.defaultStyleType);
            } else if (section.classList.contains('footer') && builder) {
                page.addSection(builder.sectionClicked, 'footer', builder.defaultStyleType);
            }

            if (document.body.classList.contains('cursor-grab')) {
                document.body.classList.remove('cursor-grab');
            }
            if (builder.documentIframe.body.classList.contains('cursor-grab')) {
                builder.documentIframe.body.classList.remove('cursor-grab');
            }
            if (builder._elCurGrabbing && builder._elCurGrabbing.classList.contains('cursor-grab')) {
                builder._elCurGrabbing.classList.remove('cursor-grab');
            }

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     *
     */
    , _getModalPageSettings: function(_this) {
        var page = _this._targetObject.page;
        var modalDialog = _this._selfDOM.querySelector('.modal-dialog');
        modalDialog.classList.add('page-settings');
        _this._title.innerHTML = '<h4>Page settings</h4>';

        _this._constructModalBody([
                {
                    name: 'buttonGroup'
                    , func: 'pageSettinsButton'
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding btn-page-control general'
        );

        var skin = 'light-skin';
        var skinPage = 'light-page';
        if (page.getDOMSelf().classList.contains('dark-page')) {
            skin = 'dark-skin';
            skinPage = 'dark-page';
        }

        modalDialog.classList.add(skinPage);

        _this._constructModalBody([
                {
                    name: 'name'
                    , func: 'inputText'
                    , args: {
                    title: 'Name'
                    , elClass: 'col-sm-12 col-md-12 col-lg-12'
                    , placeholder: 'Index'
                    , value: page.getPageName()
                }
                }
                , {
                    name: 'title'
                    , func: 'inputText'
                    , args: {
                        title: 'Title'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12'
                        , placeholder: 'Title'
                        , value: page.getPageTitle()
                    }
                }
                , {
                    name: 'favicon'
                    , func: 'inputImage'
                    , args: {
                        title: 'Favicon'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12'
                        , placeholder: 'Favicon'
                    }
                }
                , {
                    name: 'skin'
                    , func: 'switchSkin'
                    , args: {
                        title: 'Skin'
                        , type: ''
                        , mode: skin
                        , elClass: 'col-sm-12 col-md-6 col-lg-5 nopadding'
                    }
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding general'
        );

        _this._constructModalBody([
                {
                    name: 'textAreaDesc'
                    , func: 'textArea'
                    , args: {
                    title: 'Meta Description'
                    , elClass: 'col-sm-6 col-md-6 col-lg-6 nopadding-right-10'
                    , value: page.getMetaDes()
                }
                }
                , {
                    name: 'textAreaKeyw'
                    , func: 'textArea'
                    , args: {
                        title: 'Meta Keywords'
                        , elClass: 'col-sm-6 col-md-6 col-lg-6 nopadding-left-10'
                        , value: page.getMetaKey()
                    }
                }
                , {
                    name: 'textAreaJs'
                    , func: 'textArea'
                    , args: {
                        title: 'Included JavaScript (Google Analitics e.t.c.)'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12 nopadding'
                        , value: page.getJs()
                    }
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding d-flex flex-wrap seo'
        );

        _this._constructModalBody([
                {
                    name: 'preloaderType'
                    , func: 'preloaderType'
                    , args: {
                    title: ''
                    , elClass: 'col-sm-12 col-md-12 col-lg-12'
                    , html: [
                        'None'
                        , '<i class="icon-blr-picture"></i><span>Image</span>'
                        , '<div class="clock"><div class="arrow_sec"></div><div class="arrow_min"></div></div>'
                        , '<div class="circles"><div class="bounce1"></div>'
                        + '<div class="bounce2"></div><div class="bounce3"></div></div>'
                        , '<div class="loading-round"></div>'
                        , '<div class="loading-round-border"></div>'
                        , '<div class="battery"><div class="load-line"></div></div>'
                        , '<div class="location_indicator"></div>'
                    ]
                    , dataName: ['none', 'img', 'anim_clock', 'anim_jp'
                        , 'l_round', 'lb_round', 'battery', 'l_indicator']
                    , active: page.preloader ? page.preloader.name : 'none'
                }
                }
                , {
                    name: 'inputImage'
                    , func: 'inputImage'
                    , args: {
                        title: 'Image path'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12 pre-input-img'
                        , type: 'normal'
                    }
                }
                , {
                    name: 'inputImageRetina'
                    , func: 'inputImage'
                    , args: {
                        title: 'Retina image path'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12 pre-input-img retina'
                        , type: 'retina'
                    }
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding gallery s-preloader'
        );

        _this._elements.favicon.querySelector('input').value = page.getPageFavicon();

        if (page.preloader && page.preloader.name === 'img') {
            var src = page.preloader.html.match(/src="([^"]*)"/i)[1];
            var srcset = page.preloader.html.match(/srcset="([^"]*)"/i)[1];
            this._elements.inputImage.querySelector('input').value = clearTimeStamp(src);
            this._elements.inputImageRetina.querySelector('input').value = clearTimeStamp(srcset);
            this._body.classList.add('show-input-img');
        }

        _this._elements.skin.querySelector('.switch-skin').addEventListener('click', function () {
            var modalDialog = _this._selfDOM.querySelector('.modal-dialog');
            if (this.classList.contains('dark-skin')) {
                modalDialog.classList.remove('light-page');
                modalDialog.classList.add('dark-page');
            } else {
                modalDialog.classList.remove('dark-page');
                modalDialog.classList.add('light-page');
            }
        });

        var preloader = _this._elements.preloaderType.querySelector('.active');

        var argsSave = {
            pageName: _this._elements.name.querySelector('input').value
            , pageTitle: _this._elements.title.querySelector('input').value
            , favicon: _this._elements.favicon.querySelector('input').value
            , skin: _this._elements.skin.querySelector('.switch-skin').classList.contains('dark-skin')
            , description: _this._elements.textAreaDesc.querySelector('textarea').value
            , keywords: _this._elements.textAreaKeyw.querySelector('textarea').value
            , js: _this._elements.textAreaJs.querySelector('textarea').value
            , preloader: preloader
            , imgPath: _this._elements.inputImage.querySelector('input').value
            , retinaPath: _this._elements.inputImageRetina.querySelector('input').value
            , preloaderHtml: preloader ? preloader.innerHTML : ''
        };

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-primary', 'Apply', function() {

            preloader = _this._elements.preloaderType.querySelector('.active');

            var args = {
                pageName: _this._elements.name.querySelector('input').value
                , pageTitle: _this._elements.title.querySelector('input').value
                , favicon: _this._elements.favicon.querySelector('input').value
                , skin: _this._elements.skin.querySelector('.switch-skin').classList.contains('dark-skin')
                , description: _this._elements.textAreaDesc.querySelector('textarea').value
                , keywords: _this._elements.textAreaKeyw.querySelector('textarea').value
                , js: _this._elements.textAreaJs.querySelector('textarea').value
                , preloader: preloader
                , imgPath: _this._elements.inputImage.querySelector('input').value
                , retinaPath: _this._elements.inputImageRetina.querySelector('input').value
            };

            _this._applyPageSettings(_this, page, args, argsSave);

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _applyPageSettings: function(_this, page, args, argsSave) {
        if (args.pageName.charAt(0).search(/[0-9]/) !== -1) {
            args.pageName = 'p-' + args.pageName;
        }
        page.setPageName(args.pageName.toLowerCase());
        _this.leftPanel.cPanels['project-pages'].setPageItemsName(args.pageName.toLowerCase(), _this._targetObject.pageItem);
        page.setPageTitle(args.pageTitle);
        page.setPageFavicon(args.favicon);
        _this._skinCheck(_this, args.skin, page.getDOMSelf(), 'light-page', 'dark-page');

        page.setMetaDes(args.description);
        page.setMetaKey(args.keywords);
        page.setJs(args.js);

        if (args.preloader) {
            switch (args.preloader.dataset.value) {
                case 'img':
                    var img = '<img src="'
                        + args.imgPath + '?t=' + Date.now() + '" srcset="'
                        + args.retinaPath.replace(/\s2x/, '?t=' + Date.now() + ' 2x') + '" alt="preloader image"/>';
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader">' + img + '</div>'
                    };
                    break;
                case 'anim_clock':
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader"><div class="clock"><div class="arrow_sec"></div><div class="arrow_min"></div></div></div>'
                    };
                    break;
                case 'anim_jp':
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader"><div class="circles"><div class="bounce1"></div>'
                        + '<div class="bounce2"></div><div class="bounce3"></div></div></div>'
                    };
                    break;
                case 'l_round':
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader"><div class="loading-round"></div></div>'
                    };
                    break;
                case 'lb_round':
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader"><div class="loading-round-border"></div></div>'
                    };
                    break;
                case 'battery':
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader"><div class="battery"><div class="load-line"></div></div></div>'
                    };
                    break;
                case 'l_indicator':
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: '<div id="preloader"><div class="location_indicator"></div></div>'
                    };
                    break;
                case 'none':
                default:
                    page.preloader = {
                        name: args.preloader.dataset.value
                        , html: ''
                    };
                    break;
            }
        } else {
            page.preloader = null;
        }

        // builder.setStep(function() {
        //     _this._applyPageSettings(_this, page, argsSave, args);
        // });
    }
    /**
     * Ftp settings
     *
     */
    , _getModalFtpSettings: function(_this) {
        var modalDialog = _this._selfDOM.querySelector('.modal-dialog');
        modalDialog.classList.add('ftp-settings');
        _this._title.innerHTML = '<h4>Ftp settings</h4>';

        var ftp = window.localStorage.ftp ? JSON.parse(window.localStorage.ftp)
            : {
                'type': '',
                'mode': '',
                'host': '',
                'dir': '',
                'user': '',
                'pass': ''
            };

        var ftpType = ftp.type || 'ftp';

        _this._constructModalBody([
            {
                name: 'type'
                , func: 'switchCustom'
                , args: {
                    title: 'Type'
                    , type: ''
                    , items: [
                        {
                            class: '',
                            data: 'ftp',
                            title: 'FTP'
                        },
                        {
                            class: '',
                            data: 'ftps',
                            title: 'FTPS'
                        }
                    ]
                    , value: ftpType
                    , elClass: 'col-sm-12 col-md-6 col-lg-5 nopadding'
                }
            }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding radio-control ' + ftpType
        );

        _this._constructModalBody([
                {
                    name: 'mode'
                    , func: 'radio'
                    , args: {
                        items: ['explicit', 'implicit']
                        , name: 'mode'
                        , marginTop: ''
                        , value: ftp.mode
                    }
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding ftps'
        );

        _this._constructModalBody([
                {
                    name: 'host'
                    , func: 'inputText'
                    , args: {
                    title: 'Host'
                    , elClass: 'col-sm-12 col-md-12 col-lg-12'
                    , placeholder: 'example.com or 192.0.0.1'
                    , value: ftp.host
                }
                }
                , {
                    name: 'user'
                    , func: 'inputText'
                    , args: {
                        title: 'Username'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12'
                        , value: ftp.user
                    }
                }
                , {
                    name: 'pass'
                    , func: 'inputTextPassword'
                    , args: {
                        title: 'Password'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12'
                        , value: ftp.pass
                    }
                }
                , {
                    name: 'dir'
                    , func: 'inputText'
                    , args: {
                        title: 'Directory'
                        , elClass: 'col-sm-12 col-md-12 col-lg-12'
                        , placeholder: '/'
                        , value: ftp.dir
                    }
                }
            ], 'col-sm-12 col-md-12 col-lg-12 nopadding ftps ftp'
        );

        // var radio = _this._elements.radio.querySelectorAll('.radio-inline input');
        // radio[0].checked = true;
        // if (ftp.type === 'ftps') {
        //     radio[1].checked = true;
        //     var radioControl = _this.findParent(radio[1], ['radio-control']);
        //     radioControl.className = radioControl.className.replace(/(ftp|ftps)/i, '');
        //     radioControl.classList.add('ftps');
        // }
        var type = _this._elements.type;
        type.addEventListener('click', function (e) {
            e.preventDefault();
            var button = this.querySelector('.active');
            var radioControl = _this.findParent(this, ['radio-control']);
            radioControl.className = radioControl.className.replace(/(ftp|ftps)/i, '');
            radioControl.classList.add(button.dataset.value);
        });

        // Array.prototype.forEach.call(radio, function(item) {
        //     item.addEventListener('change', function(e) {
        //         e.preventDefault();
        //         var radioControl = _this.findParent(this, ['radio-control']);
        //         radioControl.className = radioControl.className.replace(/(ftp|ftps)/i, '');
        //         radioControl.classList.add(this.value);
        //     });
        // });

        var mode = _this._elements.mode.querySelectorAll('.radio-inline input');
        mode[0].checked = true;
        if (ftp.mode === 'implicit')
            mode[1].checked = true;
        var argsSave = {
            type: _this._elements.type.querySelector('.active').dataset.value
            , mode: _this._elements.mode.querySelector('.radio-inline input:checked').value
            , host: _this._elements.host.querySelector('input').value
            , dir: _this._elements.dir.querySelector('input').value
            , user: _this._elements.user.querySelector('input').value
            , pass: _this._elements.pass.querySelector('input:not(.d-none)').value
        };

        //this is need to create new button because modal-footer will be overloaded
        var cancel = this._getButton('supra-btn btn-default', 'Cancel', function() {
            _this._targetObject.ftpBtn.classList.remove('no-click');
        });
        cancel.dataset.dismiss = 'modal';
        this._footer.appendChild(cancel);

        var apply = this._getButton('supra-btn btn-primary', 'Apply', function() {
            _this._targetObject.i.className = 'icon-blr-lg-ftp-uploading';
            _this._targetObject.span.innerHTML = 'Uploading...';

            var args = {
                type: _this._elements.type.querySelector('.active').dataset.value
                , mode: _this._elements.mode.querySelector('.radio-inline input:checked').value
                , host: _this._elements.host.querySelector('input').value
                , dir: _this._elements.dir.querySelector('input').value
                , user: _this._elements.user.querySelector('input').value
                , pass: _this._elements.pass.querySelector('input:not(.d-none)').value
            };

            _this._applyFtpSettings(_this, args, argsSave);

            $(_this._selfDOM).modal('hide');
        });

        $(_this._selfDOM).on('hide.bs.modal', function() {
            if (!_this._targetObject.i.classList.contains('icon-blr-lg-ftp-uploading')) {
                _this._targetObject.ftpBtn.classList.remove('no-click');
            }
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _applyFtpSettings: function(_this, args, argsSave) {
        var data = prepareContentToDownload(builder);

        window.localStorage.ftp = JSON.stringify({
            'type': args.type,
            'mode': args.mode,
            'host': args.host,
            'dir': args.dir,
            'user': args.user,
            'pass': args.pass
        });

        var form = new FormData();
        form.append('type', args.type);
        form.append('mode', args.mode);
        form.append('host', args.host);
        form.append('dir', args.dir);
        form.append('user', args.user);
        form.append('pass', args.pass);
        form.append('data', JSON.stringify(data));

        _this.ajax(form, 'ftpUpload', function (data) {
            if (data) {
                data = JSON.parse(data);
                var modal = new Modal('supra-modal', 'Attention', {response: data.message});
                $(modal).modal('show');
            }

            _this._targetObject.i.className = 'supra icon-blr-lg-ftp-publishing';
            _this._targetObject.span.innerHTML = 'FTP Publish';
            _this._targetObject.ftpBtn.classList.remove('no-click');
        });

        // builder.setStep(function() {
        //     _this._applyPageSettings(_this, page, argsSave, args);
        // });
    }
    /**
     *
     * @private
     */
    , _getModalConstructorForm: function (_this){
        /**
         * Get data form items (inputs, selects, labels, textarea etc.)
         * @type {NodeList}
         */
        var targetForm = this._targetObject;
        this._body.style.height = '530px';

        var formData = targetForm.querySelectorAll('input:not([type=submit]), select, div.spr-radio-block, textarea, p.txt-form');

        if(formData.length > 0){
            var outputData = new Array;

            Array.prototype.forEach.call(formData, function(item, i, element) {
                /**
                 * if element - text-field
                 */
                if(element[i].className.match('spr-text-field') != null){
                    var type = 'textField';
                    var placeholder = element[i].getAttribute('placeholder');
                    var name = element[i].getAttribute('name');

                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    outputData[i]= {
                        type: type,
                        placeholder: placeholder,
                        name: name,
                        required: required
                    };

                }

                /**
                 * if element - email-field
                 */
                if(element[i].className.match('spr-email-field') != null){
                    var type = 'emailField';
                    var placeholder = element[i].getAttribute('placeholder');
                    var name = element[i].getAttribute('name');

                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    outputData[i]= {
                        type: type,
                        placeholder: placeholder,
                        name: name,
                        required: required
                    };
                }

                /**
                 * if element - select
                 */
                if(element[i].className.match('spr-select-field') != null){
                    var type = 'selectField';
                    var name = element[i].getAttribute('name');

                    var optionsItems = element[i].querySelectorAll('option');
                    var options = new Array;
                    if(optionsItems.length > 0){
                        Array.prototype.forEach.call(optionsItems, function(element, i, optionsItem) {
                            options[i] = {
                                label: optionsItem[i].textContent
                                , checked: element.hasAttribute('selected') ? 'true' : false
                            };
                        });
                    }


                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    var icon = element[i].parentElement.querySelector('img, svg');

                    outputData[i]= {
                        type: type,
                        options: options,
                        name: name,
                        required: required,
                        icon: icon ? icon.outerHTML : null
                    };

                }

                /**
                 * if element - textarea
                 */
                if(element[i].className.match('spr-textarea') != null){
                    var type = 'textarea';
                    var placeholder = element[i].getAttribute('placeholder');
                    var name = element[i].getAttribute('name');
                    var rows = element[i].getAttribute('rows');

                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    outputData[i]= {
                        type: type,
                        rows: rows,
                        placeholder: placeholder,
                        name: name,
                        required: required
                    };
                }

                /**
                 * if element - radio button
                 */
                if(element[i].className.match('spr-radio-block') != null){
                    var type = 'radioButton';
                    var label = element[i].querySelector('.label-name').textContent;
                    var radioLabels = element[i].querySelectorAll('.lbl');
                    var radioButton = element[i].querySelector('.spr-radio-button');
                    var name = radioButton.getAttribute('name');
                    var radioButtons = element[i].querySelectorAll('.spr-radio-button');


                    var buttons = new Array;
                    if(radioLabels.length > 0){
                        Array.prototype.forEach.call(radioLabels, function(element, i, radioLabel) {
                            var checked = radioButtons[i].hasAttribute('checked') ? radioButtons[i].getAttribute('checked') : false;
                            buttons[i] = {
                                label: radioLabel[i].textContent
                                , checked: checked
                            };
                        });
                    }

                    outputData[i]= {
                        type: type,
                        label: label,
                        name: name,
                        buttons: buttons
                    };
                }

                /**
                 * if element - checkbox
                 */
                if(element[i].className.match('spr-checkbox') != null){
                    var type = 'checkbox';
                    var placeholder = element[i].getAttribute('placeholder');
                    var name = element[i].getAttribute('name');

                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    if(element[i].hasAttribute('checked') && element[i].getAttribute('checked') === 'true'){
                        var checked = 'true';
                    } else {
                        var checked = 'false';
                    }

                    outputData[i]= {
                        type: type,
                        label: placeholder,
                        name: name,
                        required: required,
                        checked: checked
                    };
                }

                /**
                 * if element - date
                 */
                if(element[i].className.match('spr-date-field') != null){
                    var type = 'dateField';
                    var placeholder = element[i].getAttribute('placeholder');
                    var name = element[i].getAttribute('name');

                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    var icon = element[i].parentElement.querySelector('img, svg');

                    outputData[i]= {
                        type: type,
                        placeholder: placeholder,
                        name: name,
                        required: required,
                        icon: icon ? icon.outerHTML : null
                    };
                }

                /**
                 * if element - text
                 */
                if(element[i].className.match('txt-form') != null){
                    var type = 'text';
                    var text = element[i].innerHTML;
                    var className = element[i].className;
                    outputData[i]= {
                        type: type,
                        text: text,
                        class: className
                    };
                }

                /**
                 * if element - file
                 */
                if(element[i].className.match('spr-file-field') != null){
                    var type = 'file';
                    var placeholder = element[i].parentElement.querySelector('label span.placeholder').innerHTML;
                    var name = element[i].getAttribute('name');

                    if(element[i].className.match('.spr-form-required')){
                        var required = 'true';
                    } else {
                        var required = 'false';
                    }

                    var icon = element[i].parentElement.querySelector('img, svg');

                    outputData[i]= {
                        type: type,
                        placeholder: placeholder,
                        name: name,
                        required: required,
                        icon: icon ? icon.outerHTML : null
                    };
                }
            });
        }

        var constructorForm = new ConstructForm();
        /**
         * Render Header of Modal window
         */
        this._title.innerHTML = '<h4>Form Constructor</h4>';
        /**
         * Render Body of Modal window
         */
        var constrformHtml = constructorForm.getConstructorForm(outputData);
        this._body.appendChild(constrformHtml);

        this._body.classList.add('height-500');
        /**
         * Render Footer of Modal window
         */
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';
        var apply = this._getButton('supra-btn btn-primary', 'Apply', function() {
            var fields = constructorForm.getFormElements();

            if(fields != undefined){
                _this._applyConstructorForm(_this, targetForm, fields, null);

                $(_this._selfDOM).modal('hide');
            }

        });
        this._footer.appendChild(apply);

    }
    /**
     *
     * @private
     */
    , _skinCheck: function(_this, skin, element, light, dark, pLight, pDark) {
        pLight = pLight || light;
        pDark = pDark || dark;
        if (skin) {
            if (element.className.search(RegExp(pLight, 'i')) !== -1) {
                element.className = element.className.replace(RegExp(pLight + '\\s*', 'i'), ' ');
            }
            element.classList.add(dark);
        } else {
            if (element.className.search(RegExp(pDark, 'i')) !== -1) {
                element.className = element.className.replace(RegExp(pDark + '\\s*', 'i'), ' ');
            }
            element.classList.add(light);
        }
    }
    , _applyConstructorForm: function (_this, targetForm, fields, oldFields, saveScript){
        var li = this.findParent(targetForm, ['section-item']);
        var script = li.querySelector('script');
        var patternRule = new RegExp('(\\$\\(\'#' + targetForm.id + '\'\\)\\.validate\\({[\\s\\S]*?rules:\\s*{)[\\s\\S]*?(},[\\t\\s\\n]*errorPlacement)', 'im');
        var patternData = new RegExp('(\\$\\(\'#' + targetForm.id + '\'\\)\\.submit\\(function\\s\\(\\)\\s{[\\s\\S]*?\\/\\/\\ssubmit\\sthe\\sform)[\\s\\t\\n]*(\\/\\/data\\sarea)?([\\s\\S]*?\\/\\/end\\sdata\\sarea\n\t)?', 'im');
        var patternDataAjax = new RegExp('(\\$\\(\'#' + targetForm.id + '\'\\)\\.submit\\(function\\s\\(\\)\\s{[\\s\\S]*?data:\\s){[\\s\\S]*?}(,)', 'im');
        var patternTestFirstTime = new RegExp('(\\$\\(\'#' + targetForm.id + '\'\\)\\.submit\\(function\\s\\(\\)\\s{[\\s\\S]*?data:\\s){\\s*data:\\sJSON.*}(,)', 'im');

        var formButton = targetForm.querySelector('.buttons-control');
        if (!formButton) formButton = targetForm.querySelector('button[type="submit"]');

        if(fields){
            var fieldsOnForm = targetForm.querySelectorAll('.form-group, div.spr-radio-block, p.txt-form, .input-group');
            var oldFields = document.createDocumentFragment();
            if(fieldsOnForm.length > 0){
                Array.prototype.forEach.call( fieldsOnForm,function(item) {
                    oldFields.appendChild(item);
                });
            };
        }

        var rule = '';
        Array.prototype.forEach.call(fields.children, function(el){
            var field = el.querySelector('[name]');
            if (field) {
                var name = field.hasAttribute( 'name' ) ? field.getAttribute( 'name' ) : '';
                var placeholder = field.hasAttribute( 'placeholder' ) ? field.getAttribute( 'placeholder' ) : '';
                var required = field.classList.contains( 'spr-form-required' );
                if ( required )
                    rule += '\n\t\t' + name + ': "required",';
            }
        });

        var dataSendScript = "\n\t\t//data area"
            + "\n\tvar data = [];"
            + "\n\tvar $fields = $(this).find('.form-group, div.radio');"
            + "\n\t$fields.each(function(indx, el){"
            + "\n\t\tif ($( el ).hasClass('radio')) {"
            + "\n\t\t\tvar name = $( el ).find('.label-name').html();"
            + "\n\t\t\tvar $radioinput = $(el).find('input');"
            + "\n\t\t\t$( el).find('input').each(function(indx, el){"
            + "\n\t\t\t\tif ( $(el)[0].checked) {"
            + "\n\t\t\t\t\tvar value = $(el).parent().find('span.lbl').html();"
            + "\n\t\t\t\t\tdata.push({ name: name, value: value, name_attr: $radioinput.attr('name') });"
            + "\n\t\t\t\t\treturn;"
            + "\n\t\t\t\t}"
            + "\n\t\t\t});"
            + "\n\t\t} else if ($( el ).find('input').attr('type') === 'checkbox') {"
            + "\n\t\t\tvar $input = $( el ).find( 'input' );"
            + "\n\t\t\tdata.push( {name: $input.attr( 'placeholder' ), value: 'checked', name_attr: $input.attr('name')} );"
            + "\n\t\t} else if ($( el ).find('select')[0]) {"
            + "\n\t\t\tvar name = $( el ).find('select option' ).val();"
            + "\n\t\t\tvar $select = $(el).find('select');"
            + "\n\t\t\tdata.push({ name: name, value: $select.val(), name_attr: $select.attr('name')});"
            + "\n\t\t} else if ($( el ).find('textarea')[0]) {"
            + "\n\t\t\tvar $textarea = $(el).find('textarea');"
            + "\n\t\t\tdata.push({ name: $textarea.attr('placeholder'), value: $textarea.val(), name_attr: $textarea.attr('name') });"
            + "\n\t\t} else {"
            + "\n\t\t\tvar $input = $(el).find('input');"
            + "\n\t\t\tdata.push({ name: $input.attr('placeholder'), value: $input.val(), name_attr: $input.attr('name') });"
            + "\n\t\t}"
            + "\n\t});//end data area\n\t";

        if (!saveScript) {
            if ( !patternTestFirstTime.test( script.innerHTML ) ) {
                saveScript = script.innerHTML;
                //script.innerHTML = script.innerHTML.replace( patternData, '$1' + dataSendScript );
                //script.innerHTML = script.innerHTML.replace( patternDataAjax, '$1{ data: JSON.stringify(data), id: this.id }$2' );
            }
            script.innerHTML = script.innerHTML.replace( patternRule, '$1' + rule + '\n\t$2' );
        } else {
            script.innerHTML = saveScript;
            saveScript = null;
        }

        /**
         * Appending new form data from constructor form
         */
        if (targetForm === formButton.parentElement) {
            //@TODO: temporarily for subscribe
            if (fields.querySelector('button') && formButton) {
                formButton.parentElement.removeChild(formButton);
                targetForm.appendChild(fields);
            } else {
                targetForm.insertBefore(fields, formButton);
            }
        } else {
            var button = document.createElement('div');
            button.className = 'buttons-control child-event';
            button.innerHTML = '<button type="submit" data-loading-text="•••" data-complete-text="Completed!" data-reset-text="Try again later..." class="btn btn-block btn-primary contact_submit" style="transition: all 0s ease 0s; margin: 0px; width: 100%;"><i class="icon-paper-plane icon-position-left icon-size-m"></i><span class="spr-option-textedit-link">Send Message</span></button><div class="btn-group wrap-control-element outside-top" data-controls="[&quot;getButtonSettings&quot;]" role="group" data-obj-control=""><button class="supra-btn btn-control-1" type="button"><i class="icon-pencil"></i></button></div>';
            targetForm.innerHTML = '';
            targetForm.appendChild(fields);
            targetForm.appendChild(button);

            this.rebuildControl(targetForm);
        }

        this.convertAllImagesToSvg(targetForm);
        setTimeout(function(){
            _this.clearControlElements(li);
            builder.setControlsElementOnSection( li, li, 'edit-elements', false );
        }, 500);

        this.setStep(function() {
            _this._applyConstructorForm(_this, targetForm, oldFields, fields, saveScript);
        });
    }
    /**
     *
     * @private
     */
    , _getModalDemo: function (_this) {
        this._header.innerHTML = "<h5 class=\"text-center\">You're using demo version, download feature is only available in the full version of the builder.</h5>";
        _this._body.classList.add('nopadding');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Cancel</button>';

        var apply = this._getButton('supra-btn btn-success', 'Buy full version', function() {

            window.location = _this._targetObject.dataset.href || window.location.href;

            $(_this._selfDOM).modal('hide');
        });
        this._footer.appendChild(apply);
    }
    /**
     *
     * @private
     */
    , _getModalAttention: function (_this) {
        this._header.innerHTML = "<h5 class=\"text-center\">" + _this._targetObject.response + "</h5>";
        _this._body.classList.add('nopadding');

        //this is need to create new button because modal-footer will be overloaded
        this._footer.classList.add('one-button');
        this._footer.innerHTML = '<button type="button" class="supra-btn btn-default" data-dismiss="modal">Ok</button>';
    }
    /**
     * --------------------------------------- Some helpful functions --------------------------------------------
     */
    , _getBgStyle: function(image, bgOptionSize, bgOptionRepeat, opacityVal) {
        return '\n\tbackground-image: url(\''
            + image
            + '\');\n'
            + '\tbackground-size: ' + bgOptionSize + ';\n'
            + '\t-webkit-background-size: ' + bgOptionSize + ';\n'
            + '\tbackground-repeat: ' + bgOptionRepeat + ';\n'
            + '\t-webkit-background-repeat: ' + bgOptionRepeat + ';\n'
            + '\topacity: ' + opacityVal + ';\n';
    }
    , _getSectionBgStyle: function(image, bgOptionSize, bgOptionRepeat, opacityVal, position) {
        return '\n\tbackground-image: url(\''
            + image
            + '\');\n'
            + '\tbackground-size: ' + bgOptionSize + ';\n'
            + '\t-webkit-background-size: ' + bgOptionSize + ';\n'
            + '\tbackground-repeat: ' + bgOptionRepeat + ';\n'
            + '\t-webkit-background-repeat: ' + bgOptionRepeat + ';\n'
            + '\tbackground-position: ' + position + ';\n'
            + '\topacity: ' + opacityVal + ';\n';
    }
    , _setCustomSizeOnFigure: function(widthEl, heightEl, divImg, section) {
        var w = widthEl.value || widthEl
            ,h = heightEl.value || heightEl;
        var width = w.match(/(([0-9]*?)(px|%)|auto)/i);
        var height = h.match(/(([0-9]*?)(px|%)|auto)/i);
        var sectionBRect = section.getBoundingClientRect();
        var widthSection = sectionBRect.width;
        var heightSection = sectionBRect.height;
        if (width && height) {
            w =width ? width[1] : 'auto';
            h =height ? height[1] : 'auto';
            if (widthEl.value)
                widthEl.value = w;
            if (heightEl.value)
                heightEl.value = h;
            if (width[3] === 'px')
                w = width[2]/widthSection * 100 + '%';
            if (height[3] === 'px')
                h = height[2]/heightSection * 100 + '%';

            divImg.style.backgroundSize = w + ' ' + h;
            divImg.style.backgroundSize = w + ' ' + h;
        }
    }
});

Modal.prototype.constructor = Modal;
var ControlButton = function () {

};

ControlButton.prototype = Object.assign(Object.create(Core.prototype), {
    /**
     *
     * @param _this
     * @param classButton {string}
     * @param classIcon {string} icon into button
     * @param Obj {HTMLElement} editing element on current page
     * @param ObjControl {object} EditorText or some else
     * @returns {Element}
     * @private
     */
    _button: function(_this, classButton, classIcon, Obj, ObjControl, optClass, elementStyle) {
        var button = document.createElement('button');
        button.className = classButton;
        button.setAttribute('type', 'button');
        var icon = document.createElement('i');
        icon.className = classIcon;
        button.appendChild(icon);

        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            _this.doThis(Obj, ObjControl, this, optClass, elementStyle);
        });

        return button;
    }
});

ControlButton.prototype.constructor = ControlButton;
var ControlDOMSections = function (arrControl, Obj, className, ObjControl) {
    return this.getGroupControl(arrControl, Obj, className, ObjControl)
};

ControlDOMSections.prototype = Object.assign(Object.create(ControlDOMSections.prototype), {
    /**
     * Creage group button control according to arrControl
     * @param Controls {Object} setting in options
     * @param Obj {HTMLElement} For which creating group button control
     * @param className {string}
     * @param ObjControl {object} EditorText or some else
     * @returns {Element}
     */
    getGroupControl: function(Controls, Obj, className, ObjControl) {
        var _this = this;
        var arrControl = Obj.classList.contains('edit-typography')
            ? Controls.editTypography : Controls.controlsElements;
        var buttonGroup = document.createElement('div');
        buttonGroup.className = className;
        buttonGroup.dataset.controls = JSON.stringify(Controls.controlsElements);
        if (Controls.editTypography)
            buttonGroup.dataset.typography = JSON.stringify(Controls.editTypography);
        if (Controls.elementSettings)
            buttonGroup.dataset.settings = JSON.stringify(Controls.elementSettings);
        if (Controls.elementStyle)
            buttonGroup.dataset.style = JSON.stringify(Controls.elementStyle);
        if (Controls.settingsSection)
            buttonGroup.dataset.settings = JSON.stringify(Controls.settingsSection);
        if (Controls.dragItems)
            buttonGroup.dataset.dragItems = JSON.stringify(Controls.dragItems);
        if (Controls.context)
            buttonGroup.dataset.context = JSON.stringify(Controls.context);
        buttonGroup.setAttribute('role', 'group');
        buttonGroup.dataset.objControl = ObjControl ? 'editor-text' : '';

        if (buttonGroup.classList.contains('wrap-control')) {
            var wrapper = document.createElement('div');
            var flexdirection = (Obj && Obj.tagName === 'NAV') ||
            Obj.parentElement.dataset.group === 'sep' || Obj.parentElement.dataset.group === 'separators'
                ? ' flex-row flex-wrap flex-sm-nowrap' : '';
            wrapper.className = 'wrapper d-flex justify-content-center align-items-center' + flexdirection;
            buttonGroup.appendChild(wrapper);
            var div = document.createElement('div');
            div.className = 'd-flex';

            if (arrControl) {
                arrControl.forEach(function (element) {
                    var match = element.match(/\((.*)\)/);
                    var optClass = match ? match[1] : null;
                    var Class = element.match(/[^(]*/);
                    if (element === 'ID') {
                        wrapper.appendChild(new window[Class](Obj, ObjControl, optClass));
                    } else if (element === 'SettingsSection') {
                        div.appendChild(new window[Class](Obj, ObjControl, optClass, Controls.settingsSection));
                    } else {
                        div.appendChild(new window[Class](Obj, ObjControl, optClass));
                    }
                });
            }

            wrapper.appendChild(div);
        } else {
            if (arrControl) {
                arrControl.forEach(function (element) {
                    var match = element.match(/\((.*)\)/);
                    var optClass = match ? match[1] : null;
                    var Class = element.match(/[^(]*/);
                    if (/ElementStyle/.test(element)) {
                        buttonGroup.appendChild(new window[Class](Obj, ObjControl, optClass, Controls.elementStyle));
                    } else if (/ElementSettings/.test(element)) {
                        buttonGroup.appendChild(new window[Class](Obj, ObjControl, optClass, Controls.elementSettings));
                    } else {
                        buttonGroup.appendChild(new window[Class](Obj, ObjControl, optClass));
                    }
                });
            }
        }

        return buttonGroup;
    }
});

ControlDOMSections.prototype.constructor = ControlDOMSections;
var ControlElements = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    this._name = options.name;
    this._selfDOM = document.createDocumentFragment();
    this._elements = {};

    this._mode = options.defaultActiveMode;
    this._media = options.defaultActiveMedia;

    this.addElements(options);
};

ControlElements.prototype = Object.assign(Object.create(Core.prototype), {
    getDOMSelf: function () {
        var _this = this;

        for (var el in this._elements) {
            _this._selfDOM.appendChild(this._elements[el].getDOMSelf());
        }

        return this._selfDOM;
    }
    , getElements: function () {
        return this._elements;
    }
    , changeValues: function (media, mode) {
        this._media = media;
        this._mode = mode;

        for (var el in this._elements) {
            this._elements[el].selectValue(media, mode);
        }
    }
    , addElements: function (options) {
        var _this = this;
        options.elements.forEach(function (el) {
            var elementObj = new window[el.name](Object.assign(el, {
                tag: options.tag || null
                , controlElements: _this
                , mode: _this._mode || null
                , mediaMode: _this._media || null
            }));
            var itemName = el.itemName || el.name;

            var arrNames = [];
            for (var index in _this._elements) {
                arrNames.push(index);
            }
            itemName = _this.uniqueName(itemName, arrNames);

            _this._elements[itemName] = elementObj;
            //need for media properties
            Core.prototype.globalStyleElements.push(elementObj);
            _this._selfDOM.appendChild(elementObj.getDOMSelf());
        });
    }
});

ControlElements.prototype.constructor = ControlElements;
var ControlAOSSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;
    this._cElements = null;
    this._topBtnGroup = null;

    this._animation = '';
    this._easing = '';
    this._duration = '1000';
    this._delay = '';
    this._repeat = '';

    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlAOSSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var cElement = document.createElement('div');
        cElement.className = 'c-element check-buttons';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'DropDown'
                    , itemName: 'animation'
                    , menu: ['-','fade','fade-up','fade-down','fade-left','fade-right','fade-up-right'
                    ,'fade-up-left','fade-down-right','fade-down-left'
                    ,'flip-up','flip-down','flip-left','flip-right'
                    ,'slide-up','slide-down','slide-left','slide-right'
                    ,'zoom-in','zoom-in-up','zoom-in-down','zoom-in-left','zoom-in-right','zoom-out'
                    ,'zoom-out-up','zoom-out-down','zoom-out-left','zoom-out-right'
                    ,'stretch-left','stretch-right','stretch-horizontal','stretch-top','stretch-bottom'
                    ,'rotate-in','rotate-in-down-left','rotate-in-down-right','rotate-in-up-left','rotate-in-up-right']
                    , title: 'Animation'
                    , callback: function() {

                        return _this._targetObject.dataset.aos || 'None';
                    }
                }
                , {
                    name: 'DropDown'
                    , itemName: 'ease'
                    , menu: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-back'
                        , 'ease-out-back', 'ease-in-out-back', 'ease-in-sine', 'ease-out-sine'
                        , 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad'
                        , 'ease-in-cubic', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic'
                        , 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart']
                    , title: 'Timing function'
                    , callback: function() {

                        return _this._targetObject.dataset.aosEasing || 'Linear';
                    }
                }
                , {
                    name: 'HalfInput'
                    , itemName: 'duration'
                    , title: 'Duration'
                    , postfix: ''
                    , step: 100
                    , callback: function() {

                        return _this._targetObject.dataset.aosDuration || '';
                    }
                }
                , {
                    name: 'HalfInput'
                    , itemName: 'delay'
                    , title: 'Delay'
                    , postfix: ''
                    , step: 100
                    , callback: function() {

                        return _this._targetObject.dataset.aosDelay || '';
                    }
                }
                , {
                    name: 'HalfDropdown'
                    , itemName: 'repeat'
                    , menu: ['Once', 'Every']
                    , title: 'Timing function'
                    , callback: function() {

                        return _this._targetObject.dataset.aosOnce === 'true' ? 'Once' : 'Every';
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().animation.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = firstDown(e.detail.val);
            var saveValue = _this._animation;
            _this._animation = val;

            _this.setAnimation(val, saveValue)
        });

        this._cElements.getElements().ease.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = firstDown(e.detail.val);
            var saveValue = _this._easing;
            _this._easing = val;

            _this.setEase(val, saveValue);
        });

        this._cElements.getElements().duration.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = firstDown(e.detail.val);

            if (val !== '') {
                _this._targetObject.dataset.aosDuration = val;
            } else {
                delete _this._targetObject.dataset.aosDuration;
            }
        });

        this._cElements.getElements().duration.getDOMSelf().querySelector('input').addEventListener('blur', function (e) {
            var val = this.value;
            var saveValue = _this._duration;
            _this._duration = val;

            _this.setDuration(val, saveValue);
        });

        this._cElements.getElements().delay.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = firstDown(e.detail.val);

            if (val !== '') {
                _this._targetObject.dataset.aosDelay = val;
            } else {
                delete _this._targetObject.dataset.aosDelay;
            }
        });

        this._cElements.getElements().delay.getDOMSelf().querySelector('input').addEventListener('blur', function (e) {
            var val = this.value;
            var saveValue = _this._delay;
            _this._delay = val;

            _this.setDelay(val, saveValue);
        });

        this._cElements.getElements().repeat.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = firstDown(e.detail.val);
            var saveValue = _this._repeat;
            _this._repeat = val;

            _this.setRepeat(val, saveValue);
        });
    }
    , setAnimation: function (val, saveVal) {
        var _this = this;
        if (_this._targetObject.getAttribute('class').match(/(\s?aos-[^\s]*)+/i)) {
            _this._targetObject.setAttribute('class',
                _this._targetObject.getAttribute('class').replace(/(\s?aos-[^\s]*)+/ig, '').trim());
            if (_this._targetObject.getAttribute('class') === '') _this._targetObject.removeAttribute('class');
        }

        if (!(val === '-' || val === '')) {
            _this._targetObject.style.transition = '';

            _this._targetObject.dataset.aos = val;

            if (builder.windowIframe.AOS) {
                setTimeout(function(){
                    _this._targetObject.setAttribute('class', _this._targetObject.getAttribute('class') + ' aos-init aos-animate');
                    setTimeout(function(){
                        _this.windowIframe.AOS.refresh();
                    }, _this._duration*2);
                }, _this._duration*1);
            }
        } else {
            delete _this._targetObject.dataset.aos;
        }

        _this.setStep(function () {
            _this.setAnimation(saveVal, val);
        });
    }
    , setEase: function (val, saveVal) {
        var _this = this;
        if (_this._targetObject.getAttribute('class').match(/(\s?aos-[^\s]*)+/i)) {
            _this._targetObject.setAttribute('class', _this._targetObject.getAttribute('class').replace(/(\s?aos-[^\s]*)+/ig, '').trim());
            if (_this._targetObject.getAttribute('class') === '') _this._targetObject.removeAttribute('class');
        }

        if (val !== '') {
            _this._targetObject.dataset.aosEasing = val;

            if (builder.windowIframe.AOS) {
                setTimeout(function(){
                    _this._targetObject.setAttribute('class', _this._targetObject.getAttribute('class') + ' aos-init aos-animate');
                    setTimeout(function(){
                        _this.windowIframe.AOS.refresh();
                    }, _this._duration*2);
                }, _this._duration*1);
            }
        } else {
            delete _this._targetObject.dataset.aosEasing;
        }

        _this.setStep(function () {
            _this.setEase(saveVal, val);
        });
    }
    , setDuration: function (val, saveVal) {
        var _this = this;
        if (val !== '') {
            _this._targetObject.dataset.aosDuration = val;
        } else {
            delete _this._targetObject.dataset.aosDuration;
        }

        _this.setStep(function () {
            _this.setDuration(saveVal, val);
        });
    }
    , setDelay: function (val, saveVal) {
        var _this = this;
        if (val !== '') {
            _this._targetObject.dataset.aosDelay = val;
        } else {
            delete _this._targetObject.dataset.aosDelay;
        }

        _this.setStep(function () {
            _this.setDelay(saveVal, val);
        });
    }
    , setRepeat: function (val, saveVal) {
        var _this = this;
        if (val === 'once') {
            _this._targetObject.dataset.aosOnce = "true";
        } else {
            delete _this._targetObject.dataset.aosOnce;
        }

        _this.setStep(function () {
            _this.setRepeat(saveVal, val);
        });
    }
});

ControlAOSSettingsPL2.prototype.constructor = ControlAOSSettingsPL2;
var ControlBgNavPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;
    this._cElements = null;
    this._topBtnGroup = null;

    this._bgColor = '';

    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlBgNavPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var li = this._targetObject;
        var section = li.children[0];
        var bgStyleSelector = '#' + li.children[0].id + ' .bg';
        var style = li.querySelector('style').innerHTML;

        var bgsection = '\\s\\.bg-wrap';
        // for navigations
        if (li.classList.contains('nav')) {
            section = section.querySelector('.nav-bg');
            bgStyleSelector = '.nav-bg';
            bgsection = '\\s.nav-bg';
        }
        // for popups
        if (section.classList.contains('modal')) {
            bgsection = '\\s.modal-content';
        }

        var cElement = document.createElement('div');
        cElement.className = 'c-element check-buttons';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'BgColor'
                    , menu: [
                        '-'
                        , 'Solid color'
                        , 'Radial gradient'
                        , 'Vertical gradient'
                        , 'Horizontal gradient'
                        , 'Angle gradient'
                    ]
                    , title: 'Background color'
                    , outerClass: 'image-mode video-mode none-mode'
                    , callback: function() {
                        var patternStyleGradient = new RegExp('#' + li.children[0].id + bgsection + '\\s?\{[\\s\\S]*?background:\\s*([^;]*);', 'im');
                        var gradient = style.match(patternStyleGradient);
                        _this._bgColor = gradient ? gradient[1] : '-';
                        return _this._bgColor;
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().BgColor.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._bgColor;
            _this._bgColor = val;

            _this.setBgColor(val, saveVal);
        });
    }
    , setBgColor: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: '(background-color|background-image|background(?!-image|-color))'
            , tag: '.bg-wrap'
            , value: val !== '-' ? 'background: ' + val : val
        });

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , section: _this._targetObject.querySelector('.offcanvas')
            , property: '(background-color|background-image|background(?!-image|-color))'
            , tag: ''
            , value: val !== '-' ? 'background: ' + val : val
        });

        _this.setStep(function () {
            _this.setBgColor(saveVal, val);
        });
    }
});

ControlBgNavPL2.prototype.constructor = ControlBgNavPL2;
var ControlBgSectionsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
        activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling bg-settings supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;
    this._cElements = null;
    this._topBtnGroup = null;

    this._image = '';
    this._opacity = 1;
    this._position = '';
    this._size = '';
    this._repeat = '';
    this._mp4 = '';
    this._ogv = '';
    this._poster = '';
    this._bgColor = '';
    this._parallax = {
        value: ''
        , select: false
    };

    this.selectMode = 'image';

    this.stack = {
        image: ''
        , video: ''
        , none: ''
    };

    this._loadValues();

    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlBgSectionsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var li = this._targetObject;
        var section = li.children[0];
        var bgStyleSelector = '#' + li.children[0].id + ' .bg';
        var style = li.querySelector('style').innerHTML;

        var bgsection = '\\s\\.bg-wrap';
        // for navigations
        if (li.classList.contains('nav')) {
            section = section.querySelector('.nav-bg');
            bgStyleSelector = '.nav-bg';
            bgsection = '\\s.nav-bg';
        }

        var cElement = document.createElement('div');
        cElement.className = 'c-element check-buttons';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'ImagePreview'
                    , itemName: 'ImagePreview'
                    , title: 'Background path'
                    , outerClass: 'image-mode'
                    , callback: function() {
                        var patternImage = new RegExp(bgStyleSelector + ' ?\{[\\s\\S]*(?:background-image|background(?!-image)):\\s*(url\\(\'?[^\']*\'?\\);)', 'im');
                        var src = style.match(patternImage);
                        _this._image = (src && src[1] !== '') ? src[1] : '';
                        _this._image = /url/.test(_this._image) ? _this._image.match(/url\(['"]?([^']*)['"]?\)/)[1] : _this._image;
                        return _this._image;
                    }
                }
                , {
                    name: 'Opacity'
                    , itemName: 'OpacityImage'
                    , title: 'Opacity'
                    , outerClass: 'image-mode video-mode'
                    , callback: function() {
                        var patternOpacity = new RegExp(bgStyleSelector + '[\\s]*\{[\\s\\S]*?opacity:[\\s]*([^;]*)', 'im');
                        var opacity = style.match(patternOpacity);
                        _this._opacity = opacity ? opacity[1] : 1;
                        return _this._opacity;
                    }
                }
                , {
                    name: 'BgPosition'
                    , title: 'Background position'
                    , outerClass: 'image-mode'
                    , callback: function() {
                        var patternStylePosition = new RegExp(bgStyleSelector + '\\s?\{[\\s\\S]*?background-position:\\s*([^;]*);', 'im');
                        var position = style.match(patternStylePosition);
                        _this._position = position ? position[1] : '';
                        return _this._position;
                    }
                }
                , {
                    name: 'BgSize'
                    , menu: [
                        '-'
                        , 'Auto'
                        , 'Cover'
                        , 'Contain'
                        , 'Custom (width x height)'
                    ]
                    , title: 'Background size'
                    , outerClass: 'image-mode'
                    , callback: function() {
                        var patternStyleSize = new RegExp(bgStyleSelector + '\\s?\{[\\s\\S]*?background-size:\\s*([^;]*);', 'im');
                        var bgOptions = style.match(patternStyleSize);

                        var WidthVal = 'auto';
                        var HeightVal = 'auto';

                        if (bgOptions && (bgOptions[1] !== 'auto' || bgOptions[1] !== 'cover')) {
                            var WidthValMatch = bgOptions ? bgOptions[1].match(/([0-9]*(?:px|%)|auto)\s/i) : null;
                            WidthVal = WidthValMatch ? WidthValMatch[1] : 'auto';
                        }

                        if (bgOptions && (bgOptions[1] !== 'auto' || bgOptions[1] !== 'cover')) {
                            var HeightValMatch = bgOptions ? bgOptions[1].match(/\s([0-9]*(?:px|%)|auto)/i) : null;
                            HeightVal = HeightValMatch ? HeightValMatch[1] : 'auto';
                        }

                        if (bgOptions && (bgOptions[1] === 'auto' || bgOptions[1] === 'cover' || bgOptions[1] === 'contain')) {
                            _this._size = bgOptions ? bgOptions[1] : 'Auto';
                            return _this._size;
                        } else if (bgOptions) {
                            _this._size = bgOptions ? WidthVal + ' ' + HeightVal : 'Auto';
                            return _this._size;
                        }
                        return 'none';
                    }
                }
                , {
                    name: 'DropDown'
                    , itemName: 'BgRepeat'
                    , menu: ['-', 'repeat', 'repeat-x', 'repeat-y', 'no-repeat']
                    , title: 'Background repeat'
                    , outerClass: 'image-mode'
                    , callback: function() {
                        var patternStyleRepeat = new RegExp(bgStyleSelector + '\\s?\{[\\s\\S]*?background-repeat:\\s*([^;]*);', 'im');
                        var repeat = style.match(patternStyleRepeat);
                        _this._repeat = repeat ? repeat[1] : '-';
                        return _this._repeat;
                    }
                }
                , {
                    name: 'VideoBase'
                    , itemName: 'videoMP4'
                    , title: 'MP4 video path'
                    , outerClass: 'video-mode'
                    , type: 'mp4'
                    , callback: function() {
                        return _this._mp4 === '' ? _this._mp4 : _this._mp4 + '.mp4';
                    }
                }
                , {
                    name: 'VideoBase'
                    , itemName: 'videoOGV'
                    , title: 'OGV video path'
                    , outerClass: 'video-mode'
                    , type: 'ogv'
                    , callback: function() {
                        return _this._ogv === '' ? _this._ogv : _this._ogv + '.ogv';
                    }
                }
                , {
                    name: 'VideoBase'
                    , itemName: 'poster'
                    , title: 'Poster path (.jpg only)'
                    , outerClass: 'video-mode'
                    , type: 'jpg'
                    , callback: function() {
                        return _this._poster === '' ? _this._poster : _this._poster + '.jpg';
                    }
                }
                , {
                    name: 'BgColor'
                    , menu: [
                        '-'
                        , 'Solid color'
                        , 'Radial gradient'
                        , 'Vertical gradient'
                        , 'Horizontal gradient'
                        , 'Angle gradient'
                    ]
                    , title: 'Background color'
                    , outerClass: 'image-mode video-mode none-mode'
                    , callback: function() {
                        var patternStyleGradient = new RegExp('#' + li.children[0].id + bgsection + '\\s?\{[\\s\\S]*?(?:background|background-color):\\s*([^;]*);', 'im');
                        var gradient = style.match(patternStyleGradient);
                        _this._bgColor = gradient ? gradient[1] : '-';
                        return _this._bgColor;
                    }
                }
                , {
                    name: 'ButtonsSwitch'
                    , title: 'Parallax speed'
                    , itemName: 'parallax'
                    , outerClass: 'image-mode video-mode'
                    , buttons: [
                        {
                            title: '-5'
                            , value: '-5'
                        }
                        , {
                            title: '-2'
                            , value: '-2'
                        }
                        , {
                            title: '+2'
                            , value: '2'
                        }
                        , {
                            title: '+5'
                            , value: '5'
                        }
                    ]
                    , isActive: function (value) {
                        var parallax = _this._targetObject.querySelector('.bg.parallax');
                        if (parallax && parallax.dataset.rellaxSpeed === value) {
                            _this._parallax = {
                                value: parallax.dataset.rellaxSpeed
                                , select: parallax.dataset.rellaxSpeed !== ''
                            };
                            return true;
                        }
                        return false;
                    }
                    , onlyOne: true
                    , allowSelectNothing: true
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(this._getTopBtnGroup());
        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _loadValues: function () {
        var _this = this;
        var li = this._targetObject;
        var bgStyleSelector = '#' + li.children[0].id + ' .bg';
        var section = li.children[0];
        var bg = section.querySelector('.bg');
        var style = li.querySelector('style').innerHTML;

        var video = false;
        if (bg && bg.classList.contains('bg-video') && this.windowIframe.jQuery(bg).data('vide')) {
            var videPath = this.windowIframe.jQuery(bg).data('vide').path;
            var poster = videPath.jpg;
            if (!poster)
                poster = bg.dataset.videBg.match(/jpg:\s*([^,\s]*)/)[1] ? bg.dataset.videBg.match(/jpg:\s*([^,\s]*)(?:\.jpg)?/)[1] : '';
            video = true;
            _this._mp4 = videPath.mp4;
            _this._ogv = videPath.ogv;
            _this._poster = poster.replace(/\.jpg/, '');
        } else if (bg && bg.classList.contains('bg-video')) {
            video = true;
            _this._mp4 = bg.dataset.videBg.match(/mp4:\s*([^,\s]*)/)[1] ? bg.dataset.videBg.match(/mp4:\s*([^,\s]*)(?:\.mp4)?/)[1].replace(/\.mp4/, '') : '';
            _this._ogv = bg.dataset.videBg.match(/ogv:\s*([^,\s]*)/)[1] ? bg.dataset.videBg.match(/ogv:\s*([^,\s]*)(?:\.ogv)?/)[1].replace(/\.ogv/, '') : '';
            _this._poster = bg.dataset.videBg.match(/jpg:\s*([^,\s]*)/)[1] ? bg.dataset.videBg.match(/jpg:\s*([^,\s]*)(?:\.jpg)?/)[1].replace(/\.jpg/, '') : '';
        }

        var patternImage = new RegExp(bgStyleSelector + ' ?{[\\s\\S]*(?:background-image|background(?!-image)):\\s*url\\(\'?/?([^\']*)\'?\\);', 'im');

        var src = (style.match(patternImage) && style.match(patternImage)[1] !== '') ? style.match(patternImage)[1] : '';

        _this._getTopBtnGroup().className = _this._getTopBtnGroup().className.replace(/image|video|none/, '');
        if (src !== '' && !video) {
            _this._getTopBtnGroup().classList.add('image');
            _this._getTopBtnGroup().querySelector('[data-value=image]').classList.add('active');
        } else if (video) {
            _this._getTopBtnGroup().classList.add('video');
            _this._getTopBtnGroup().querySelector('[data-value=video]').classList.add('active');
        } else {
            _this._getTopBtnGroup().classList.add('none');
            _this._getTopBtnGroup().querySelector('[data-value=none]').classList.add('active');
        }
    }
    , _getTopBtnGroup: function () {
        if (this._topBtnGroup) {
            return this._topBtnGroup;
        }

        var _this = this;

        var topBtnGroup = document.createElement('div');
        topBtnGroup.className = 'btn-group image';
        topBtnGroup.setAttribute('role', 'group');
        topBtnGroup.innerHTML = '<button data-value="image" type="button" class="supra-btn btn-default"><span>Image</span></button>'
            + '<button data-value="video" type="button" class="supra-btn btn-default"><span>Video</span></button>'
            + '<button data-value="none" type="button" class="supra-btn btn-default"><span>None</span></button>';

        var buttons = topBtnGroup.querySelectorAll('button');
        [].forEach.call(buttons, function (button) {
            button.addEventListener('click', function (e) {
                var parent = this.parentElement;
                var active = parent.querySelector('.active');
                if (active !== this) {
                    active.classList.remove('active');
                    this.classList.add('active');
                    parent.className = parent.className.replace(/image|video|none/i, '');
                    parent.classList.add(this.dataset.value);

                    var section = _this._targetObject.children[0];
                    var style = _this._targetObject.querySelector('style');
                    var bg = _this._targetObject.querySelector('.bg');

                    switch (this.dataset.value) {
                        case 'image':
                            if (_this.windowIframe.jQuery(bg).data('vide')) {
                                _this.windowIframe.jQuery(bg).data('vide').destroy();
                                bg.classList.remove('bg-video');
                                delete bg.dataset.videBg;
                                delete bg.dataset.videOptions;
                            }

                            if (!new RegExp('\\t?#' + section.id + '\\s*\\.bg\\s*{[\\s\\S]*?}').test(style.innerHTML)) {
                                style.innerHTML += _this.stack.image;
                            }

                            _this.selectMode = 'image';
                            break;
                        case 'video':
                            bg.dataset.videBg = 'mp4: ' + _this._mp4 + ', ogv: '
                                + _this._ogv + ', jpg: ' + _this._poster;
                                bg.dataset.videOptions = 'posterType: jpg';
                            _this.windowIframe.jQuery(bg).vide({
                                mp4: _this._mp4,
                                ogv: _this._ogv,
                                poster: _this._poster
                            }, {posterType: 'jpg'});

                            if (!new RegExp('\\t?#' + section.id + '\\s*\\.bg\\s*{[\\s\\S]*?}').test(style.innerHTML)) {
                                style.innerHTML += _this.stack.video;
                            }

                            if (!bg.classList.contains('bg-video'))
                                bg.classList.add('bg-video');

                            _this.selectMode = 'video';
                            break;
                        case 'none':
                            var pattern1 = new RegExp('\\t?#' + section.id + '\\s*\\.bg\\s*{[\\s\\S]*?}');
                            var match1 = style.innerHTML.match(pattern1);
                            _this.stack.image = _this.stack.video = match1 ? match1[0] : '';
                            style.innerHTML = style.innerHTML.replace(pattern1, '');

                            if (_this.windowIframe.jQuery(bg).data('vide')) {
                                _this.windowIframe.jQuery(bg).data('vide').destroy();
                                bg.classList.remove('bg-video');
                                delete bg.dataset.videBg;
                                delete bg.dataset.videOptions;
                            }
                            _this.selectMode = 'none';
                            break;
                    }
                }
            });
        });

        this._topBtnGroup = topBtnGroup;

        return topBtnGroup;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().ImagePreview.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._image;
            _this._image = val;

            _this.setImage(val, saveVal);
        });

        this._cElements.getElements().BgPosition.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._position;
            _this._position = val;

            _this.setPosition(val, saveVal);
        });

        this._cElements.getElements().BgSize.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._size;
            _this._size = val;

            _this.setBgSize(val, saveVal);
        });

        this._cElements.getElements().BgRepeat.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._repeat;
            _this._repeat = val;

            _this.setRepeat(val, saveVal);
        });

        this._cElements.getElements().BgColor.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._bgColor;
            _this._bgColor = val;

            _this.setBgColor(val, saveVal);
        });

        this._cElements.getElements().OpacityImage.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;

            _this.globalStyle.changeSectionStyle({
                li: _this._targetObject
                , property: 'opacity'
                , tag: '.bg'
                , value: 'opacity: ' + val
            });
        });

        var listenMouseUp = function (e) {
            var val = _this._cElements.getElements().OpacityImage.getDOMSelf().querySelector('.runner').dataset.val;
            var saveVal = _this._opacity;
            _this._opacity = val;

            _this.setOpacity(val, saveVal);

            document.removeEventListener('mouseup', listenMouseUp);
            _this._selfDOM.classList.remove('wrap');
        };

        var listenMouseDown = function (e) {
            document.addEventListener('mouseup', listenMouseUp);
            _this._selfDOM.classList.add('wrap');
        };

        _this._cElements.getElements().OpacityImage.getDOMSelf()
            .querySelector('.runner').addEventListener('mousedown', listenMouseDown);

        this._cElements.getElements().parallax.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = {
                value: e.detail.btn.dataset.value
                , select: e.detail.btn.classList.contains('active')
            };
            var saveVal = _this._parallax;
            _this._parallax = {
                value: e.detail.btn.dataset.value
                , select: e.detail.btn.classList.contains('active')
            };

            _this.setParallax(val, saveVal);
        });

        this._cElements.getElements().videoMP4.getDOMSelf().addEventListener('custom.event', function (e) {
            var src = e.detail.val;
            src = src.replace(/^\.\//, '');
            var saveSrc = _this._mp4;
            _this._mp4 = src;

            if (_this._ogv === '') {
                _this._cElements.getElements().videoOGV.getDOMSelf().querySelector('input').value = 'video/video_bg.ogv';
                _this._ogv = 'video/video_bg.ogv';
            }
            if (_this._poster === '') {
                _this._cElements.getElements().poster.getDOMSelf().querySelector('input').value = 'video/video_bg.jpg';
                _this._poster = 'video/video_bg.jpg';
            }

            _this.setMP4(src, saveSrc);
        });

        this._cElements.getElements().videoOGV.getDOMSelf().addEventListener('custom.event', function (e) {
            var src = e.detail.val;
            src = src.replace(/^\.\//, '');
            var saveSrc = _this._ogv;
            _this._ogv = src;

            if (_this._mp4 === '') {
                _this._cElements.getElements().videoMP4.getDOMSelf().querySelector('input').value = 'video/video_bg.mp4';
                _this._mp4 = 'video/video_bg.mp4';
            }
            if (_this._poster === '') {
                _this._cElements.getElements().poster.getDOMSelf().querySelector('input').value = 'video/video_bg.jpg';
                _this._poster = 'video/video_bg.jpg';
            }

            _this.setOGV(src, saveSrc);
        });

        this._cElements.getElements().poster.getDOMSelf().addEventListener('custom.event', function (e) {
            var src = e.detail.val;
            src = src.replace(/^\.\//, '');
            var saveSrc = _this._poster;
            _this._poster = e.detail.val;

            if (_this._mp4 === '') {
                _this._cElements.getElements().videoMP4.getDOMSelf().querySelector('input').value = 'video/video_bg.mp4';
                _this._mp4 = 'video/video_bg.mp4';
            }
            if (_this._ogv === '') {
                _this._cElements.getElements().videoOGV.getDOMSelf().querySelector('input').value = 'video/video_bg.ogv';
                _this._ogv = 'video/video_bg.ogv';
            }

            _this.setPoster(src, saveSrc);
        });
    }
    , setImage: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: 'background-image'
            , tag: '.bg'
            , value: val !== '' && val !== 'none' ? 'background-image: url(\'' + val + '\')' : 'none'
        });

        _this.setStep(function () {
            _this.setImage(saveVal, val);
        });
    }
    , setPosition: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: 'background-position'
            , tag: '.bg'
            , value: 'background-position: ' + val
        });

        _this.setStep(function () {
            _this.setPosition(saveVal, val);
        });
    }
    , setBgSize: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: 'background-size'
            , tag: '.bg'
            , value: val !== '-' ? 'background-size: ' + val : val
        });

        _this.setStep(function () {
            _this.setBgSize(saveVal, val);
        });
    }
    , setRepeat: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: 'background-repeat'
            , tag: '.bg'
            , value: val !== '-' ? 'background-repeat: ' + val : val
        });

        _this.setStep(function () {
            _this.setRepeat(saveVal, val);
        });
    }
    , setBgColor: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: '(background-color|background-image|background(?!-image|-color))'
            , tag: '.bg-wrap'
            , value: val !== '-' ? 'background: ' + val : val
        });

        _this.setStep(function () {
            _this.setBgColor(saveVal, val);
        });
    }
    , setOpacity: function (val, saveVal) {
        var _this = this;

        _this.globalStyle.changeSectionStyle({
            li: _this._targetObject
            , property: 'opacity'
            , tag: '.bg'
            , value: 'opacity: ' + val
        });

        _this.setStep(function () {
            _this.setOpacity(saveVal, val);
        });
    }
    , setParallax: function (val, saveVal) {
        var _this = this;
        var li = _this._targetObject;

        var bg = li.querySelector('.bg');
        if (bg.classList.contains('parallax') && val.select) {
            bg.dataset.rellaxSpeed = val.value;
            _this.reloadScript(li);
        } else if (val.select) {
            bg.classList.add('parallax');
            bg.dataset.rellaxSpeed = val.value;
            if (_this.windowIframe.rellax) _this.windowIframe.rellax.destroy();
            _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
                center: true
            });
        } else if (!val.select) {
            bg.classList.remove('parallax');
            delete bg.dataset.rellaxSpeed;
            if (_this.windowIframe.rellax)
                _this.windowIframe.rellax.destroy();
            if (_this.main.querySelector('parallax')) {
                _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
                    center: true
                });
            }
        }

        _this.setStep(function () {
            _this.setParallax(saveVal, val);
        });
    }
    , setMP4: function (src, saveSrc) {
        var _this = this;

        var li = _this._targetObject;
        var bg = li.querySelector('.bg');
        var script = li.querySelector('script');
        var ogvSrc = _this._ogv;
        var posterSrc = _this._poster;

        if (!bg.classList.contains('bg-video')) {
            bg.classList.add('bg-video');
            script.innerHTML += '//delete\nvide_run();\n//deleteend';
        } else if (_this.windowIframe.jQuery(bg).data('vide')) {
            _this.windowIframe.jQuery(bg).data('vide').destroy();
        } else {
            bg.innerHTML = '';
        }
        bg.dataset.videBg = 'mp4: ' + src + ', ogv: '
            + ogvSrc + ', jpg: ' + posterSrc;
            bg.dataset.videOptions = 'posterType: jpg';
        _this.windowIframe.jQuery(bg).vide({
            mp4: src,
            ogv: ogvSrc,
            poster: posterSrc
        }, {posterType: 'jpg'});

        _this.setStep(function () {
            _this.setMP4(saveSrc, src);
        });
    }
    , setOGV: function (src, saveSrc) {
        var _this = this;

        var li = _this._targetObject;
        var bg = li.querySelector('.bg');
        var script = li.querySelector('script');
        var mp4Src = _this._mp4;
        var posterSrc = _this._poster;

        if (!bg.classList.contains('bg-video')) {
            bg.classList.add('bg-video');
            script.innerHTML += '//delete\nvide_run();\n//deleteend';
        } else if (_this.windowIframe.jQuery(bg).data('vide')) {
            _this.windowIframe.jQuery(bg).data('vide').destroy();
        } else {
            bg.innerHTML = '';
        }
        bg.dataset.videBg = 'mp4: ' + mp4Src + ', ogv: '
            + src + ', jpg: ' + posterSrc;
            bg.dataset.videOptions = 'posterType: jpg';
        _this.windowIframe.jQuery(bg).vide({
            mp4: mp4Src,
            ogv: src,
            poster: posterSrc
        }, {posterType: 'jpg'});

        _this.setStep(function () {
            _this.setOGV(saveSrc, src);
        });
    }
    , setPoster: function (src, saveSrc) {
        var _this = this;

        var li = _this._targetObject;
        var bg = li.querySelector('.bg');
        var script = li.querySelector('script');
        var ogvSrc = _this._ogv;
        var mp4Src = _this._mp4;

        if (!bg.classList.contains('bg-video')) {
            bg.classList.add('bg-video');
            script.innerHTML += '//delete\nvide_run();\n//deleteend';
        } else if (_this.windowIframe.jQuery(bg).data('vide')) {
            _this.windowIframe.jQuery(bg).data('vide').destroy();
        } else {
            bg.innerHTML = '';
        }
        bg.dataset.videBg = 'mp4: ' + mp4Src + ', ogv: '
            + ogvSrc + ', jpg: ' + src;
        bg.dataset.videOptions = 'posterType: jpg';
        _this.windowIframe.jQuery(bg).vide({
            mp4: mp4Src,
            ogv: ogvSrc,
            poster: src
        }, {posterType: 'jpg'});

        _this.setStep(function () {
            _this.setPoster(saveSrc, src);
        });
    }
});

ControlBgSectionsPL2.prototype.constructor = ControlBgSectionsPL2;
var ControlCountdownElementSettings = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;
    this._li = null;
    this._deadline = '';
    this._confirm = '';
    this._rLink = '';
    this._target = false;
    this._popup = '';

    this._cElements = null;
    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlCountdownElementSettings.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var li = _this._li = _this.findParent(_this._targetObject, ['section-item']);
        var section = _this._section = li.children[0];
        var script = li.querySelector('script');

        var deadlineMatch = script.innerHTML.match(/countdown\('([^']*)/i);
        var deadline = deadlineMatch ? deadlineMatch[1] : '';

        var redirectMatch = script.innerHTML.match(/finish\.countdown[\s\S]*?window\.location\s*=\s*(?:'|")([^'"]*)/i);
        var redirect = redirectMatch ? redirectMatch[1] : '';

        var valueTargetMatch = script.innerHTML.match(/openCountdownWindow/i);
        var valueTarget = valueTargetMatch ? true : false;

        var popupIdMatch = script.innerHTML.match(/finish\.countdown[\s\S]*?\$\('(#[^']*)'\)\.modal/i);
        var popupId = popupIdMatch ? popupIdMatch[1] : '';

        var popups = _this.popupThumbArray.map(function (popup) {
            return '#' + popup.id;
        });

        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'BaseInput'
                    , itemName: 'deadline'
                    , title: 'Enter deadline date'
                    , callback: function () {
                        return _this._deadline = deadline;
                    }
                }
                , {
                    name: 'Radio'
                    , itemName: 'radio'
                    , title: 'Confirm'
                    , outerClass: 'none'
                    , items: ['None', 'Modal popup', 'Redirect']
                    , callback: function () {
                        if (valueTarget || redirect !== '') {
                            return 'Redirect';
                        } else if (popupId !== '') {
                            return 'Modal popup';
                        } else {
                            return 'None';
                        }
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'url'
                    , title: 'Url'
                    , placeholder: 'http://URL.com'
                    , outerClass: 'redirect-mode'
                    , callback: function () {
                        return _this._rLink = redirect;
                    }
                }
                , {
                    name: 'Checkbox'
                    , itemName: 'checkbox'
                    , title: '- Open in the new tab'
                    , outerClass: 'redirect-mode'
                    , callback: function () {
                        return _this._target = valueTarget;
                    }
                }
                , {
                    name: 'DropDown'
                    , itemName: 'modal'
                    , menu: popups
                    , title: 'Modal popup'
                    , outerClass: 'modal-popup-mode'
                    , callback: function() {
                        return _this._popup = popupId;
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().deadline.getDOMSelf().querySelector('input').addEventListener('blur', function (e) {
            // var val = this.value.toLowerCase().replace(/\s/g, '-');
            var val = this.value;
            var saveVal = _this._deadline;
            _this._deadline = val;

            _this.setDeadline(val, saveVal);
        });

        this._cElements.getElements().radio.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._confirm;
            _this._confirm = val;

            var items = [
                'none'
                , 'modal-popup'
                , 'redirect'
            ];

            _this.setModeConfirm(val, saveVal);

            this.className = this.className.replace(new RegExp(items.join('|')), '');
            this.classList.add(val);
        });

        this._cElements.getElements().modal.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._popup;
            _this._popup = val;

            _this.setPopup(val, saveVal);
        });

        this._cElements.getElements().url.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._rLink;
            _this._rLink = val;

            _this.setRLink(val, saveVal);
        });

        this._cElements.getElements().checkbox.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._target;
            _this._target = val;

            _this.setTarget(val, saveVal);
        });
    }
    , setDeadline: function (val, saveVal) {
        var _this = this;

        _this.changeConfirmMethod({
            deadline: val
            , radio: _this._confirm
            , redirect: _this._rLink
            , target: _this._target
            , popup: _this._popup
        });

        _this.setStep(function () {
            _this.setDeadline(saveVal, val);
        });
    }
    , setModeConfirm: function (val, saveVal) {
        var _this = this;

        _this.changeConfirmMethod({
            deadline: _this._deadline
            , radio: val
            , redirect: _this._rLink
            , target: _this._target
            , popup: _this._popup
        });

        _this.setStep(function () {
            _this.setModeConfirm(saveVal, val);
        });
    }
    , setPopup: function (val, saveVal) {
        var _this = this;

        _this.changeConfirmMethod({
            deadline: _this._deadline
            , radio: _this._confirm
            , redirect: _this._rLink
            , target: _this._target
            , popup: val
        });

        _this.setStep(function () {
            _this.setPopup(saveVal, val);
        });
    }
    , setRLink: function (val, saveVal) {
        var _this = this;

        _this.changeConfirmMethod({
            deadline: _this._deadline
            , radio: _this._confirm
            , redirect: val
            , target: _this._target
            , popup: _this._popup
        });

        _this.setStep(function () {
            _this.setRLink(saveVal, val);
        });
    }
    , setTarget: function (val, saveVal) {
        var _this = this;

        _this.changeConfirmMethod({
            deadline: _this._deadline
            , radio: _this._confirm
            , redirect: _this._rLink
            , target: val
            , popup: _this._popup
        });

        _this.setStep(function () {
            _this.setTarget(saveVal, val);
        });
    }
    , changeConfirmMethod: function (options) {
        var script = this._li.querySelector('script');

        //deadline
        script.innerHTML = script.innerHTML.replace(/(countdown\(')[^']*/i, '$1' + options.deadline);

        var whenCountdownIsFinished = '';

        if (options.radio === 'redirect') {
            //redirect
            if (options.target && options.redirect !== '') {
                whenCountdownIsFinished = '\n\twindow.openCountdownWindow = function () {'
                    + '\n\t\twindow.open(\'https://google.com.ua\');'
                    + '\n\t\t$(document).off(\'click\', window.openCountdownWindow);'
                    + '\n\t};'
                    + '\n\t$(document).on(\'click\', window.openCountdownWindow);';
            } else if (options.redirect !== '') {
                whenCountdownIsFinished = '\n\twindow.location = "' + args.redirect + '";'
            }

        } else if (options.radio === 'modal-popup') {
            whenCountdownIsFinished = '\n\t$(\'' + options.popup + '\').modal(\'show\');'
        }

        script.innerHTML = script.innerHTML.replace(/(finish\.countdown[\s\S]*?\{)[\s\S]*?(\}\/\/end\sfinish\.countdown)/i, '$1'
            + whenCountdownIsFinished + '\n$2');

        this.reloadScript(this._li);
    }
});

ControlCountdownElementSettings.prototype.constructor = ControlCountdownElementSettings;
var ControlDataElementSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this._li = options.li;
    this.caller = options.caller;
    this.elementsArray = Object.keys(options.obj.dataset);

    this._cElements = null;
    this._init();

    this.openPanelElement();
};

ControlDataElementSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;
        var cElement = document.createElement('div');
        var classStyle = ' light';
        if (this.findParent(this._targetObject, ['dark'])) classStyle = ' dark';
        cElement.className = 'c-element' + classStyle;

        this.elementsArray = this.elementsArray.map(function (el) {
            return {
                name: 'DataElementInput'
                , title: firstUp(el)
                , targetObject: _this._targetObject
                , datasetItem: el
                , callback: function () {
                    return _this._targetObject.dataset[el];
                }
            };
        });

        var cElements = new ControlElements({
            name: _this.name
            , elements: this.elementsArray
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
});

ControlDataElementSettingsPL2.prototype.constructor = ControlDataElementSettingsPL2;
var ControlElementSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this._li = options.li;
    this.caller = options.caller;
    this.elementsArray = options.elementSettings;
    this.datasetArray = Object.keys(options.obj.dataset);

    this._cElements = null;
    this._init();

    this.openPanelElement();
};

ControlElementSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;
        var cElement = document.createElement('div');
        var classStyle = ' light';
        if (this.findParent(this._targetObject, ['dark'])) classStyle = ' dark';
        cElement.className = 'c-element' + classStyle;

        this.elementsArray = this.elementsArray.map(function (el) {
            if (/\(.*\)/.test(el)) {
                return {
                    name: el.match(/^(.*)\(/)[1]
                    , customCE: el.match(/.*\(([^)]*)\)/)[1]
                    , targetObject: _this._targetObject
                    , li: _this._li
                };
            } else {
                return {
                    name: el
                    , targetObject: _this._targetObject
                    , li: _this._li
                };
            }
        });

        this.elementsArray = this.elementsArray.concat(this.datasetArray.map(function (el) {
            return {
                name: 'DataElementInput'
                , title: firstUp(el)
                , targetObject: _this._targetObject
                , datasetItem: el
                , callback: function () {
                    return _this._targetObject.dataset[el];
                }
            };
        }));

        var cElements = new ControlElements({
            name: _this.name
            , elements: this.elementsArray
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
});

ControlElementSettingsPL2.prototype.constructor = ControlElementSettingsPL2;
var ControlElementStylePL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this._li = options.li;
    this.caller = options.caller;
    this.elementsArray = options.elementStyle;

    this._cElements = null;
    this._init();

    this.openPanelElement();
};

ControlElementStylePL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;
        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        this.elementsArray = this.elementsArray.map(function (el) {
            return {
                name: el
                , targetObject: _this._targetObject
            };
        });

        var cElements = new ControlElements({
            name: _this.name
            , elements: this.elementsArray
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
});

ControlElementStylePL2.prototype.constructor = ControlElementStylePL2;
var ControlFormSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;
    this._section = '';

    this._subject = '';
    this._address = '';
    this._host = '';
    this._userName = '';
    this._password = '';
    this._secure = 'tls';
    this._port = '';
    this._apiKeymailchimp = '';
    this._listIdmailchimp = '';
    this._apiKeymailerlite = '';
    this._listIdmailerlite = '';
    this._apiKeyactivecampaing = '';
    this._listIdactivecampaing = '';
    this._apiKeycampaignmonitor = '';
    this._listIdcampaignmonitor = '';
    this._listIdAweber = '';
    this._accessUrl = '';
    this._apiKeyGetresponse = '';
    this._campaingToken = '';
    this._popup = '';
    this._rLink = '';
    this._target = '';

    this._cElements = null;
    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlFormSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var form = _this._targetObject;
        var li = _this.findParent(form, ['section-item']);
        var section = _this._section = li.children[0];
        var subject = _this._subject = _this.forms[section.id].settings ? _this.forms[section.id].settings.subject : '';
        var address = _this._address = _this.forms[section.id].settings ? _this.forms[section.id].settings.email : '';

        var host = _this._host = _this.forms[section.id].settings ? _this.forms[section.id].settings.host : '';
        var userName = _this._userName = _this.forms[section.id].settings ? _this.forms[section.id].settings.userName : '';
        var password = _this._password = _this.forms[section.id].settings ? _this.forms[section.id].settings.password : '';
        var secure = _this._secure = _this.forms[section.id].settings ? _this.forms[section.id].settings.secure : 'tls';
        var port = _this._port = _this.forms[section.id].settings ? _this.forms[section.id].settings.port : '';

        var apiKeymailchimp = _this._apiKeymailchimp =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.apiKeymailchimp : '';
        var listIdmailchimp = _this._listIdmailchimp =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.listIdmailchimp : '';

        var apiKeymailerlite = _this._apiKeymailerlite =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.apiKeymailerlite : '';
        var listIdmailerlite = _this._listIdmailerlite =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.listIdmailerlite : '';

        var apiKeyactivecampaing = _this._apiKeyactivecampaing =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.apiKeyactivecampaing : '';
        var listIdactivecampaing = _this._listIdactivecampaing =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.listIdactivecampaing : '';

        var apiKeycampaignmonitor = _this._apiKeycampaignmonitor =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.apiKeycampaignmonitor : '';
        var listIdcampaignmonitor = _this._listIdcampaignmonitor =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.listIdcampaignmonitor : '';
        var accessUrl = _this._accessUrl =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.accessUrl : '';

        var apiKeyGetresponse = _this._apiKeyGetresponse =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.apiKeyGetresponse : '';
        var campaingToken = _this._campaingToken =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.campaingToken : '';

        var listIdAweber = _this._listIdAweber =
            _this.forms[section.id].settings ? _this.forms[section.id].settings.listIdAweber : '';

        var popup = _this.forms[section.id].settings ? _this.forms[section.id].settings.popup : '';

        var popups = _this.popupThumbArray.map(function (popup) {
            return '#' + popup.id;
        });

        _this._setFormSettings(form);

        var sendMode = _this.forms[section.id].sendMode
            ? _this.forms[section.id].sendMode
            : _this.forms[section.id].sendMode = 'Simple Mail PHP';

        var cElement = document.createElement('div');
        cElement.className = 'c-element ' + sendMode.toLowerCase().replace(/\s/g, '-');

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'DropDown'
                    , itemName: 'submitType'
                    , menu: ['Simple Mail PHP', 'SMTP', 'MailChimp', 'MailerLite'
                    , 'Activecampaing', 'GetResponse', 'AWeber', 'Campaignmonitor']
                    , title: 'Submit type'
                    , callback: function() {
                        return sendMode;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'subject'
                    , title: 'Subject'
                    , outerClass: 'simple-mail-php-mode smtp-mode'
                    , callback: function () {
                        return subject;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'address'
                    , title: 'Address'
                    , outerClass: 'simple-mail-php-mode smtp-mode'
                    , callback: function () {
                        return address;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'keyMailChimp'
                    , title: 'Api key'
                    , outerClass: 'mailchimp-mode'
                    , callback: function () {
                        return apiKeymailchimp;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'listIdMailChimp'
                    , title: 'List ID'
                    , outerClass: 'mailchimp-mode'
                    , callback: function () {
                        return listIdmailchimp;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'keyActiveCampaing'
                    , title: 'Api key'
                    , outerClass: 'activecampaing-mode'
                    , callback: function () {
                        return apiKeyactivecampaing;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'listIdActiveCampaing'
                    , title: 'List ID'
                    , outerClass: 'activecampaing-mode'
                    , callback: function () {
                        return listIdactivecampaing;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'keyGetResponse'
                    , title: 'Api key'
                    , outerClass: 'getresponse-mode'
                    , callback: function () {
                        return apiKeyGetresponse;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'listIdAweber'
                    , title: 'List ID'
                    , outerClass: 'aweber-mode'
                    , callback: function () {
                        return listIdAweber;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'keyCampaignmonitor'
                    , title: 'Api key'
                    , outerClass: 'campaignmonitor-mode'
                    , callback: function () {
                        return apiKeycampaignmonitor;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'listIdCampaignmonitor'
                    , title: 'List ID'
                    , outerClass: 'campaignmonitor-mode'
                    , callback: function () {
                        return listIdcampaignmonitor;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'keyMailerLite'
                    , title: 'Api key'
                    , outerClass: 'mailerlite-mode'
                    , callback: function () {
                        return apiKeymailerlite;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'listIdMailerLite'
                    , title: 'List ID'
                    , outerClass: 'mailerlite-mode'
                    , callback: function () {
                        return listIdmailerlite;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'campaingToken'
                    , title: 'Campaing Token'
                    , outerClass: 'getresponse-mode'
                    , callback: function () {
                        return campaingToken;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'accessUrl'
                    , title: 'API Access Url'
                    , outerClass: 'activecampaing-mode'
                    , callback: function () {
                        return accessUrl;
                    }
                }
                , {
                    name: 'CustomUrl'
                    , itemName: 'aweberUrl'
                    , title: 'Account AWeber credentials'
                    , outerClass: 'aweber-mode'
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'host'
                    , title: 'Host'
                    , outerClass: 'smtp-mode'
                    , callback: function () {
                        return host;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'userName'
                    , title: 'User name'
                    , outerClass: 'smtp-mode'
                    , callback: function () {
                        return userName;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'pass'
                    , title: 'Password'
                    , outerClass: 'smtp-mode'
                    , callback: function () {
                        return password;
                    }
                }
                , {
                    name: 'DropDown'
                    , itemName: 'secure'
                    , menu: ['tls', 'ssl']
                    , title: 'Secure method'
                    , outerClass: 'smtp-mode'
                    , callback: function() {

                        return secure;
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'port'
                    , title: 'Port'
                    , outerClass: 'smtp-mode'
                    , callback: function () {
                        return port;
                    }
                }
                , {
                    name: 'Radio'
                    , itemName: 'radio'
                    , title: 'Confirm'
                    , outerClass: _this.forms[section.id].mode
                        ? _this.forms[section.id].mode.toLowerCase().replace(/[\s\/]/ig, '-') : 'none'
                    , items: ['None', 'Modal popup', 'Redirect']
                    , callback: function () {
                        _this._mode = _this.forms[section.id].mode ? _this.forms[section.id].mode : 'none';
                        return firstUp(_this._mode.replace(/-/g, ' '));
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'url'
                    , title: 'Url'
                    , placeholder: 'http://URL.com'
                    , outerClass: 'redirect-mode'
                    , callback: function () {
                        return _this.forms[section.id].rLink ? _this.forms[section.id].rLink : '';
                    }
                }
                , {
                    name: 'Checkbox'
                    , itemName: 'checkbox'
                    , title: '- Open in the new tab'
                    , outerClass: 'redirect-mode'
                    , callback: function () {
                        return _this.forms[section.id].target === '_blank' ? true : false;
                    }
                }
                , {
                    name: 'DropDown'
                    , itemName: 'modal'
                    , menu: popups
                    , title: 'Modal popup'
                    , outerClass: 'modal-popup-mode'
                    , callback: function() {

                        return popup;
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().submitType.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val.toLowerCase().replace(/\s/g, '-');
            var saveVal = _this.forms[_this._section.id].sendMode;

            var items = [
                'simple-mail-php'
                , 'smtp'
                , 'mailchimp'
                , 'mailerlite'
                , 'activecampaing'
                , 'getresponse'
                , 'aweber'
                , 'campaignmonitor'
            ];

            _this.setSubmitType(val, saveVal);

            this.parentElement.className = this.parentElement.className.replace(new RegExp(items.join('|')), '');
            this.parentElement.classList.add(val);
        });

        this._cElements.getElements().radio.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = _this._mode = e.detail.val.toLowerCase().replace(/\s/g, '-');
            var saveVal = _this.forms[_this._section.id].mode;

            var items = [
                'none'
                , 'modal-popup'
                , 'redirect'
            ];

            _this.setModeConfirm(val, saveVal);

            this.className = this.className.replace(new RegExp(items.join('|')), '');
            this.classList.add(val);
        });

        this._cElements.getElements().subject.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._subject;
            _this._subject = val;

            _this.setSubject(val, saveVal);
        });

        this._cElements.getElements().address.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._address;
            _this._address = val;

            _this.setAddress(val, saveVal);
        });

        this._cElements.getElements().keyMailChimp.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._apiKeymailchimp;
            _this._apiKeymailchimp = val;

            _this.setMailChimp(val, saveVal);
        });

        this._cElements.getElements().listIdMailChimp.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._listIdmailchimp;
            _this._listIdmailchimp = val;

            _this.setListMailChimp(val, saveVal);
        });

        this._cElements.getElements().keyActiveCampaing.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._apiKeyactivecampaing;
            _this._apiKeyactivecampaing = val;

            _this.setActiveCampaing(val, saveVal);
        });

        this._cElements.getElements().listIdActiveCampaing.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._listIdactivecampaing;
            _this._listIdactivecampaing = val;

            _this.setListActiveCampaing(val, saveVal);
        });

        this._cElements.getElements().keyGetResponse.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._apiKeyGetresponse;
            _this._apiKeyGetresponse = val;

            _this.setGetResponse(val, saveVal);
        });

        this._cElements.getElements().listIdAweber.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._listIdAweber;
            _this._listIdAweber = val;

            _this.setAweber(val, saveVal);
        });

        this._cElements.getElements().keyCampaignmonitor.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = _this._apiKeycampaignmonitor = e.detail.val;
            var saveVal = _this._apiKeycampaignmonitor;
            _this._apiKeycampaignmonitor = val;

            _this.setCampaingMonitor(val, saveVal);
        });

        this._cElements.getElements().listIdCampaignmonitor.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._listIdcampaignmonitor;
            _this._listIdcampaignmonitor = val;

            _this.setListCampaingMonitor(val, saveVal);
        });

        this._cElements.getElements().keyMailerLite.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._apiKeymailerlite;
            _this._apiKeymailerlite = val;

            _this.setMailerLite(val, saveVal);
        });

        this._cElements.getElements().listIdMailerLite.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._listIdmailerlite;
            _this._listIdmailerlite = val;

            _this.setListMailerLite(val, saveVal);
        });

        this._cElements.getElements().campaingToken.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._campaingToken;
            _this._campaingToken = val;

            _this.setCampaingToken(val, saveVal);
        });

        this._cElements.getElements().accessUrl.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = _this._accessUrl = e.detail.val;
            var saveVal = _this._accessUrl;
            _this._accessUrl = val;

            _this.setAccessUrl(val, saveVal);
        });

        this._cElements.getElements().host.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._host;
            _this._host = val;

            _this.setHost(val, saveVal);
        });

        this._cElements.getElements().userName.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._userName;
            _this._userName = val;

            _this.setUserName(val, saveVal);
        });

        this._cElements.getElements().pass.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._password;
            _this._password = val;

            _this.setPassword(val, saveVal);
        });

        this._cElements.getElements().port.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._port;
            _this._port = val;

            _this.setPort(val, saveVal);
        });

        this._cElements.getElements().modal.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._popup;
            _this._popup = val;

            _this.setPopup(val, saveVal);
        });

        this._cElements.getElements().url.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._rLink;
            _this._rLink = val;

            _this.setRLink(val, saveVal);
        });

        this._cElements.getElements().checkbox.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._target;
            _this._target = val;

            _this.setTarget(val, saveVal);
        });
    }
    , _setFormSettings: function (form) {
        Core.prototype.forms[this._section.id].settings = {
            subject: this._subject
            , email: this._address
            , type: 'contact'
            , id: form.id
            , host: this._host
            , userName: this._userName
            , password: this._password
            , secure: this._secure
            , port: this._port
            , apiKeymailchimp: this._apiKeymailchimp
            , listIdmailchimp: this._listIdmailchimp
            , apiKeymailerlite: this._apiKeymailerlite
            , listIdmailerlite: this._listIdmailerlite
            , apiKeyactivecampaing: this._apiKeyactivecampaing
            , listIdactivecampaing: this._listIdactivecampaing
            , apiKeycampaignmonitor: this._apiKeycampaignmonitor
            , listIdcampaignmonitor: this._listIdcampaignmonitor
            , listIdAweber: this._listIdAweber
            , accessUrl: this._accessUrl
            , apiKeyGetresponse: this._apiKeyGetresponse
            , campaingToken: this._campaingToken
            , popup: this._popup
        };
    }
    , setSubmitType: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].sendMode = val;

        _this.setStep(function () {
            _this.setSubmitType(saveVal, val);
        });
    }
    , setModeConfirm: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].mode = val;

        _this.changeConfirmMethod();

        _this.setStep(function () {
            _this.setModeConfirm(saveVal, val);
        });
    }
    , setSubject: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.subject = val;

        _this.setStep(function () {
            _this.setSubject(saveVal, val);
        });
    }
    , setAddress: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.email = val;

        _this.setStep(function () {
            _this.setAddress(saveVal, val);
        });
    }
    , setMailChimp: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.apiKeymailchimp = val;

        _this.setStep(function () {
            _this.setMailChimp(saveVal, val);
        });
    }
    , setListMailChimp: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.listIdmailchimp = val;

        _this.setStep(function () {
            _this.setListMailChimp(saveVal, val);
        });
    }
    , setActiveCampaing: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.apiKeyactivecampaing = val;

        _this.setStep(function () {
            _this.setActiveCampaing(saveVal, val);
        });
    }
    , setListActiveCampaing: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.listIdactivecampaing = val;

        _this.setStep(function () {
            _this.setListActiveCampaing(saveVal, val);
        });
    }
    , setGetResponse: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.apiKeyGetresponse = val;

        _this.setStep(function () {
            _this.setGetResponse(saveVal, val);
        });
    }
    , setAweber: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.listIdAweber = val;

        _this.setStep(function () {
            _this.setAweber(saveVal, val);
        });
    }
    , setCampaingMonitor: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.apiKeycampaignmonitor = val;

        _this.setStep(function () {
            _this.setCampaingMonitor(saveVal, val);
        });
    }
    , setListCampaingMonitor: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.listIdcampaignmonitor = val;

        _this.setStep(function () {
            _this.setListCampaingMonitor(saveVal, val);
        });
    }
    , setMailerLite: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.apiKeymailerlite = val;

        _this.setStep(function () {
            _this.setMailerLite(saveVal, val);
        });
    }
    , setListMailerLite: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.listIdmailerlite = val;

        _this.setStep(function () {
            _this.setListMailerLite(saveVal, val);
        });
    }
    , setCampaingToken: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.campaingToken = val;

        _this.setStep(function () {
            _this.setCampaingToken(saveVal, val);
        });
    }
    , setAccessUrl: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.accessUrl = val;

        _this.setStep(function () {
            _this.setAccessUrl(saveVal, val);
        });
    }
    , setHost: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.host = val;

        _this.setStep(function () {
            _this.setHost(saveVal, val);
        });
    }
    , setUserName: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.userName = val;

        _this.setStep(function () {
            _this.setUserName(saveVal, val);
        });
    }
    , setPassword: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.password = val;

        _this.setStep(function () {
            _this.setPassword(saveVal, val);
        });
    }
    , setPort: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.port = val;

        _this.setStep(function () {
            _this.setPort(saveVal, val);
        });
    }
    , setPopup: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].settings.modal = val;

        _this.changeConfirmMethod();

        _this.setStep(function () {
            _this.setPopup(saveVal, val);
        });
    }
    , setRLink: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].rLink = val;

        _this.changeConfirmMethod();

        _this.setStep(function () {
            _this.setRLink(saveVal, val);
        });
    }
    , setTarget: function (val, saveVal) {
        var _this = this;

        Core.prototype.forms[_this._section.id].target = val ? '_blank' : '_self';

        _this.changeConfirmMethod();

        _this.setStep(function () {
            _this.setTarget(saveVal, val);
        });
    }
    , changeConfirmMethod: function () {
        var script = this._section.parentElement.querySelector('script');

        var patternSuccess = new RegExp('success:\\s*function\\s*\\(.*\\)\\s*{[^}]*}', 'im');
        var patternError = new RegExp('error:\\s*function\\s*\\(.*\\)\\s*{[^}]*}', 'im');
        var patternOpenWindow = new RegExp('(\\$\\(\'#' + this._section.id + '-form\'\\)\\.submit\\(function\\s*\\(\\)\\s*{)', 'i');
        var patternErrorValid = new RegExp('(\\/\\/if data was invalidated)', 'im');
        var patternLClick = new RegExp('\\$\\(\'#' + this._section.id + '-form \\[type=submit\\]\'\\)\\.on\\(\'click\'[\\n\\s\\w\\/;:\'"#(){}\\[\\]\\|$@!?\\=+,.-]*\'_blank\'\\);\\n}\\);\\n', 'im');
        var patternCloseWindow = new RegExp('\\n\\t\\twindow\\.wBlank\\.close\\(\\);\\n', 'img');

        var successCode = 'success: function () {'
            + '\n\t$(\'#' + this._section.id + '-form\').find(\'[type=submit]\').button(\'complete\');'
            + '\n}';
        var errorCode = 'error: function () {'
            + '\n\t$(\'#' + this._section.id + '-form\').find(\'[type=submit]\').button(\'reset\');'
            + '\n}';

        var target = this._target ? '_blank' : '_self';

        var lineRedirect = '\t\twindow.open(\'' + this._rLink + '\',\'_self\');\n';
        var closeWindowCode = '';

        if (target === '_blank') {
            lineRedirect = '\t\twindow.wBlank.location = \'' + this._rLink + '\';\n';
            closeWindowCode = '\n\t\twindow.wBlank.close();\n';
            if (script.innerHTML.search(patternLClick) === -1) {
                var openWindowCode = '$(\'#' + this._section.id + '-form [type=submit]\').on(\'click\', function() {\n'
                    + '\t\twindow.wBlank = window.open(\'\',\'_blank\');\n'
                    + '});\n';
                script.innerHTML = script.innerHTML.replace(patternOpenWindow, openWindowCode + '$1');
                script.innerHTML = script.innerHTML.replace(patternErrorValid, '$1' + closeWindowCode);
            }
        } else {
            script.innerHTML = script.innerHTML.replace(patternLClick, '');
            script.innerHTML = script.innerHTML.replace(patternCloseWindow, '');
        }

        switch (this._mode) {
            case 'modal-popup':
                successCode = 'success: function () {\n'
                    + '\t\t$(\'#' + this._section.id + '-form\').find(\'[type=submit]\').button(\'complete\');\n'
                    + '\t\t//Use modal popups to display messages\n'
                    + '\t\t$(\'' + this._popup + '\').modal(\'show\');\n'
                    + '\t\t$(\'.modal.in\').modal( \'hide\' );\n'
                    + '\t}';
                errorCode = 'error: function () {\n'
                    + '\t\t$(\'#' + this._section.id + '-form\').find(\'[type=submit]\').button(\'reset\');\n'
                    + '\t}';

                break;
            case 'redirect':
                successCode = 'success: function () {\n'
                    + '\t\t$(\'#' + this._section.id + '-form\').find(\'[type=submit]\').button(\'complete\');\n'
                    + '\t\t//Use modal popups to display messages\n'
                    + lineRedirect
                    + '\t}';
                errorCode = 'error: function () {\n'
                    + closeWindowCode
                    + '\t}';
                break;
        }

        script.innerHTML = script.innerHTML.replace(patternSuccess, successCode);
        script.innerHTML = script.innerHTML.replace(patternError, errorCode);
    }
});

ControlFormSettingsPL2.prototype.constructor = ControlFormSettingsPL2;
var ControlGMapSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this._li = options.li;
    this.caller = options.caller;

    this._lat = 0;
    this._lng = 0;
    this._colorSheme = '';
    this._zoom = '';
    this._popover = '';

    this._cElements = null;
    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlGMapSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var script = _this._li.querySelector('script');
        var funcId = this._targetObject.id.replace(/-/ig, '_');

        var contextStart = funcId + '[\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?' + funcId + '\\(';

        var patternLatitude = new RegExp(contextStart + 'google\\.maps\\.LatLng\\(([^,]*)' + contextEnd, 'im');
        var currentLatitude = this._lat = script.innerHTML.match(patternLatitude)[1];

        var patternLongitude = new RegExp(contextStart + 'google\\.maps\\.LatLng\\([^,]*,\\s([^)]*)' + contextEnd, 'im');
        var currentLongitude = this._lng = script.innerHTML.match(patternLongitude)[1];

        var arrZoom = [];
        for (var i = 1; i < 19; i++) {
            arrZoom.push(i + '');
        }

        var patternZoom = new RegExp(contextStart + 'zoom:\\s*([^,]*)' + contextEnd, 'im');
        var currentZoom = script.innerHTML.match(patternZoom)[1];

        // var ptternStyle = new RegExp('var\\s*([^\\s]*)*\\s*=\\s*\\[','ig');
        // var styleSection = script.innerHTML.match(/GMAP\sSCRIPT[\s\S]*?function/i);
        // var arrStyles = styleSection ? styleSection[0].match(ptternStyle) : script.match(ptternStyle);
        // var menuForStyle = [];
        // arrStyles.forEach(function(style) {
        //     menuForStyle.push(style.match(/var\s([^\s]*)/i)[1]);
        // });

        var patternCurStyle = new RegExp(contextStart + 'google\\.maps\\.StyledMapType\\(([^,]*)' + contextEnd, 'im');
        var currentStyle = script.innerHTML.match(patternCurStyle)[1];

        var patternMarker = new RegExp(contextStart + 'var contentString = \'\\s*([^\']*)'+ contextEnd, 'im');
        var currentMarker = script.innerHTML.match(patternMarker)[1];

        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'CustomButtonsSwitch'
                    , itemName: 'colorScheme'
                    , customCE: 'mapColorScheme'
                    , isActive: function (value) {
                        if (currentStyle.replace(/Opts/,'') === value) {
                            _this._colorSheme = value;
                            return true;
                        }
                    return false;
                }
                }
                , {
                    name: 'HalfInput'
                    , itemName: 'latitude'
                    , title: 'Latitude'
                    , postfix: ''
                    , step: 0.000001
                    , min: -360
                    , callback: function () {
                        return _this._lat = currentLatitude;
                    }
                }
                , {
                    name: 'HalfInput'
                    , itemName: 'longitude'
                    , title: 'Longitude'
                    , postfix: ''
                    , step: 0.000001
                    , min: -360
                    , callback: function () {
                        return _this._lng = currentLongitude;
                    }
                }
                , {
                    name: 'HalfDropdown'
                    , itemName: 'zoom'
                    , menu: arrZoom
                    , title: 'Zoom'
                    , callback: function() {
                        return _this._zoom = currentZoom;
                    }
                }
                , {
                    name: 'BaseTextarea'
                    , itemName: 'popover'
                    , title: 'Popover content'
                    , callback: function () {
                        return _this._popover = htmlencode(currentMarker);
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().colorScheme.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.btn.dataset.value;
            var saveVal = _this._colorSheme;
            _this._colorSheme = val;

            _this.setColorSheme(val, saveVal);
        });

        this._cElements.getElements().latitude.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = {
                lat: e.detail.val
                , lng: _this._lng
            };

            var saveVal = {
                lat: _this._lat
                , lng: _this._lng
            };

            _this._lat = e.detail.val;

            _this._setLatLng(val, saveVal);
        });

        this._cElements.getElements().longitude.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = {
                lat: _this._lat
                , lng: e.detail.val
            };

            var saveVal = {
                lat: _this._lat
                , lng: _this._lng
            };

            _this._lng = e.detail.val;

            _this._setLatLng(val, saveVal);
        });

        this._cElements.getElements().zoom.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._zoom;
            _this._zoom = val;

            _this.setZoom(val, saveVal);
        });

        this._cElements.getElements().popover.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._popover;
            _this._popover = val;

            _this.setPopover(val, saveVal);
        });
    }
    , setColorSheme: function (val, saveVal) {
        var _this = this;
        if (val === '') return;

        var li = _this._li;
        var scriptLi = li.querySelector('script');
        var script = scriptLi.innerHTML;
        var funcId = _this._targetObject.id.replace(/-/ig, '_');
        var contextStart = funcId + '[\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?' + funcId + '\\(';

        var patternCurStyle = new RegExp('(' + contextStart + 'google\\.maps\\.StyledMapType\\()[^,]*(' + contextEnd + ')', 'im');
        script = script.replace(patternCurStyle, '$1' + val + 'Opts$2');
        scriptLi.innerHTML = script;

        _this.reloadScript(li);

        _this.setStep(function () {
            _this.setColorSheme(saveVal, val);
        });
    }
    , _setLatLng: function (val, saveVal) {
        var _this = this;

        var li = this._li;
        var scriptLi = li.querySelector('script');
        var script = scriptLi.innerHTML;
        var funcId = this._targetObject.id.replace(/-/ig, '_');
        var contextStart = funcId;
        var contextEnd = '[\\s\\S]*?' + funcId + '\\(';

        var patternLatLng = new RegExp('(google\\.maps\\.LatLng\\()[^,]*,\\s*[^)]*(\\))', 'img');
        var patternContext = new RegExp('(' + contextStart + contextEnd + ')', 'im');
        var context = script.match(patternContext)[0];
        context = context.replace(patternLatLng, '$1' + val.lat + ', ' + val.lng + '$2');
        script = script.replace(patternContext, context);
        scriptLi.innerHTML = script;

        this.reloadScript(li);

        _this.setStep(function () {
            _this._setLatLng(saveVal, val);
        });
    }
    , setZoom: function (val, saveVal) {
        var _this = this;

        var li = _this._li;
        var scriptLi = li.querySelector('script');
        var script = scriptLi.innerHTML;
        var funcId = _this._targetObject.id.replace(/-/ig, '_');
        var contextStart = funcId + '[\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?' + funcId + '\\(';

        var patternZoom = new RegExp('(' + contextStart + 'zoom:\\s*)[^,]*(' + contextEnd + ')', 'im');
        script = script.replace(patternZoom, '$1' + val + '$2');
        scriptLi.innerHTML = script;

        _this.reloadScript(li);

        _this.setStep(function () {
            _this.setZoom(saveVal, val);
        });
    }
    , setPopover: function (val, saveVal) {
        var _this = this;

        var li = _this._li;
        var scriptLi = li.querySelector('script');
        var script = scriptLi.innerHTML;
        var funcId = _this._targetObject.id.replace(/-/ig, '_');
        var contextStart = funcId + '[\\s\\S]*?';
        var contextEnd = '[\\s\\S]*?' + funcId + '\\(';

        var patternMarker = new RegExp('(' + contextStart + 'var contentString = \'\\s*)[^\']*(\'' + contextEnd + ')', 'im');
        script = script.replace(patternMarker, '$1' + htmldecode(val) + '$2');
        scriptLi.innerHTML = script;

        _this.reloadScript(li);

        _this.setStep(function () {
            _this.setPopover(saveVal, val);
        });
    }
});

ControlGMapSettingsPL2.prototype.constructor = ControlGMapSettingsPL2;
var ControlImageSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;

    this._src = '';
    this._srcset = '';
    this._alt = '';
    this._size = {
        width: ''
        , height: ''
    };

    this._cElements = null;
    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlImageSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;
        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'ImagePreview'
                    , itemName: 'ImagePreview'
                    , title: 'Image'
                    , callback: function () {
                        return _this._src = _this._targetObject.getAttribute('src');
                    }
                }
                , {
                    name: 'ImageBase'
                    , itemName: 'retina'
                    , title: 'Image retina (optional)'
                    , type: 'retina'
                    , callback: function () {
                        var srcset = _this._targetObject.getAttribute('srcset');
                        return _this._srcset = srcset ? srcset.replace(/\s2x/, '') : '';
                    }
                }
                , {
                    name: 'BaseInput'
                    , itemName: 'alt'
                    , title: 'Image alt'
                    , callback: function () {
                        var alt = _this._targetObject.getAttribute('alt');
                        return _this._alt = alt ? alt : '';
                    }
                }
                , {
                    name: 'BaseSize'
                    , itemName: 'size'
                    , title: 'Size'
                    , callback: function () {
                        var width = _this._targetObject.hasAttribute('width')
                            ? _this._targetObject.getAttribute('width') : '';
                        var height = _this._targetObject.hasAttribute('height')
                            ? _this._targetObject.getAttribute('height') : '';
                        _this._size = {
                            width: width
                            , height: height
                        };
                        return width + ' ' + height;
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().ImagePreview.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._src;
            _this._src = val;

            _this.setSrc(val, saveVal);
        });

        this._cElements.getElements().retina.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._srcset;
            _this._srcset = val;

            _this.setSrcset(val, saveVal);
        });

        this._cElements.getElements().alt.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._alt;
            _this._alt = val;

            _this.setAlt(val, saveVal);
        });

        this._cElements.getElements().size.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.obj;
            var saveVal = _this._size;
            _this._size = val;

            _this.setSize(val, saveVal);
        });
    }
    , setSrc: function (val, saveVal) {
        var _this = this;
        var oldSrc = _this._targetObject.getAttribute('src');

        if (oldSrc.substr(-3) === 'svg') {
            var $svg = $(_this._targetObject);

            $svg.removeAttr('xmlns');
            $svg.removeAttr('xmlns:xlink');
            $svg.removeAttr('viewBox');
            $svg.removeAttr('version');

            var attributes = $svg.prop("attributes");
            var $img = $('<img src="' + val + '" />');

            $.each(attributes, function () {
                $img.attr(this.name, this.value);
            });

            $svg.replaceWith($img);

            _this._targetObject = $img[0];

        }

        if (val.substr(-3) === 'svg') {
            _this.convertImgToSvg(val, _this._targetObject, function ($svg) {
                _this._targetObject = $svg[0];

                _this.rebuildControl(_this._targetObject);

                var li = _this.findParent(_this._targetObject, ['section-item', 'modal-dialog']);
                var controlGroup = li.querySelector('.wrap-control-element.nowrap');

                if (controlGroup) controlGroup.parentElement.removeChild(controlGroup);

                //this necessary for gallery
                var owl = _this.findParent(_this._targetObject, ['spr-gallery']);
                if (owl) {
                    _this.windowIframe.jQuery(owl).trigger('refresh.owl.carousel');
                }
            });
        }

        if (val !== '' && val !== 'none') {
            var srcset = this._cElements.getElements().retina.getDOMSelf().querySelector('input').value;

            if (srcset !== '') srcset += ' 2x';

            _this._targetObject.setAttribute('src', val);
            _this._targetObject.setAttribute('srcset', srcset);
        }
        //TODO: check
        // else {
        //     _this._targetObject.setAttribute('src', '');
        // }

        if (val.substr(-3) !== 'svg') {

            _this.rebuildControl(_this._targetObject);

            var li = _this.findParent(_this._targetObject, ['section-item', 'modal-dialog']);
            var controlGroup = li.querySelector('.wrap-control-element.nowrap');

            if (controlGroup) controlGroup.parentElement.removeChild(controlGroup);

            //this necessary for gallery
            var owl = _this.findParent(_this._targetObject, ['spr-gallery']);
            if (owl) {
                _this.windowIframe.jQuery(owl).trigger('refresh.owl.carousel');
            }

            // _this.nowrapCorrectigPosition(_this._targetObject);
        }

        _this.setStep(function () {
            _this.setSrc(saveVal, val);
        });
    }
    , setSrcset: function (val, saveVal) {
        var _this = this;

        if (val !== 'none 2x' && val !== '') {
            _this._targetObject.setAttribute('srcset', val);
        } else {
            _this._targetObject.removeAttribute('srcset');
        }

        //this necessary for gallery
        var owl = _this.findParent(_this._targetObject, ['spr-gallery']);
        if (owl) {
            _this.windowIframe.jQuery(owl).trigger('refresh.owl.carousel');
        }

        // _this.nowrapCorrectigPosition(_this._targetObject);

        _this.setStep(function () {
            _this.setSrcset(saveVal, val);
        });
    }
    , setAlt: function (val, saveVal) {
        var _this = this;

        _this._targetObject.setAttribute('alt', val);

        //this necessary for gallery
        var owl = _this.findParent(_this._targetObject, ['spr-gallery']);
        if (owl) {
            _this.windowIframe.jQuery(owl).trigger('refresh.owl.carousel');
        }

        _this.setStep(function () {
            _this.setAlt(saveVal, val);
        });
    }
    , setSize: function (val, saveVal) {
        var _this = this;

        if (val.width && val.width !== 'auto') {
            _this._targetObject.setAttribute('width', val.width);
        } else {
            _this._targetObject.removeAttribute('width');
        }
        if (val.height && val.height !== 'auto') {
            _this._targetObject.setAttribute('height', val.height);
        } else {
            _this._targetObject.removeAttribute('height');
        }

        _this.nowrapCorrectigPosition(_this._targetObject);

        //this necessary for gallery
        var owl = _this.findParent(_this._targetObject, ['spr-gallery']);
        if (owl) {
            _this.windowIframe.jQuery(owl).trigger('refresh.owl.carousel');
        }

        _this.setStep(function () {
            _this.setSize(saveVal, val);
        });
    }
});

ControlImageSettingsPL2.prototype.constructor = ControlImageSettingsPL2;
var ControlLinkSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    if (this._targetObject.parentElement.tagName === 'A') {
        this._targetObject = this._targetObject.parentElement;
    }
    this.caller = options.caller;
    this._cElements = null;
    this._topBtnGroup = null;
    this._editor = options.editor;
    this._button = options.caller;
    this._editLink = null;

    if (this._editor) {
        var select = this.windowIframe.getSelection();
        this._range = select.getRangeAt(0);
    }

    if (this._button.classList.contains('active') && this._editor) {
        var select = this.windowIframe.getSelection();
        while(this._targetObject && this._targetObject.tagName !== "A") {
            this._targetObject = select.anchorNode.parentNode;
        }
    }

    this.selectMode = 'none';

    this._page = '';
    this._section = '';
    this._modalTarget = '';
    this._linkType = 'external';
    this._argsSave = {
        link: ''
        , targetLink: '_self'
    };

    this._init();
    this._addEventListeners();

    this._loadValues();

    this._selfDOM.querySelector('.c-element').classList.add(this._linkType);

    this.openPanelElement();
};

ControlLinkSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var pages = _this.pages.getPagesObjInArray().map(function (p) {
            return p.getPageName();
        });

        var activePage = _this.getActivePageObject();
        var sections = [];

        for (var s in activePage.sections) {
            if (activePage.sections[s].getDOMSelf().children[0].classList.contains('modal')) {
                continue;
            }
            sections.push('#' + s);
        }

        var popups = _this.popupThumbArray.map(function (popup) {
            return '#' + popup.id;
        });

        var valueHref = _this._targetObject.getAttribute('href');

        var valueTarget = _this._targetObject.getAttribute('target');

        var cElement = document.createElement('div');
        cElement.className = 'c-element check-buttons';

        var elements = [
            {
                name: 'DropDown'
                , itemName: 'linkType'
                , menu: ['External', 'Section/Page', 'Image', 'Video popup'
                , 'Modal element']
                , title: 'Link type'
                , callback: function() {
                return _this._linkType;
            }
            }
            , {
                name: 'BaseInput'
                , itemName: 'external'
                , title: 'External link'
                , outerClass: 'external-mode'
                , callback: function() {
                    return valueHref || '';
                }
            }
            , {
                name: 'DropDown'
                , itemName: 'page'
                , menu: pages
                , title: 'Page'
                , outerClass: 'section-mode'
                , callback: function() {
                    _this._page = _this.getActivePageObject().getPageName();
                    return _this._page;
                }
            }
            , {
                name: 'DropDown'
                , itemName: 'section'
                , menu: sections
                , title: 'Section link'
                , outerClass: 'section-mode'
                , callback: function() {
                    var sectionId = _this.findParent(_this._targetObject, ['section-item']);
                    _this._section = '#' + sectionId.children[0].id;
                    return _this._section;
                }
            }
            , {
                name: 'ImageBase'
                , itemName: 'image'
                , title: 'Image link'
                , outerClass: 'image-mode'
                , callback: function() {

                    return '';
                }
            }
            , {
                name: 'BaseInput'
                , itemName: 'video'
                , title: 'Video link'
                , outerClass: 'video-mode'
                , callback: function() {

                    return '';
                }
            }
            , {
                name: 'DropDown'
                , itemName: 'modal'
                , menu: popups
                , title: 'Modal element'
                , outerClass: 'modal-mode'
                , callback: function() {
                    return 'None';
                }
            }
            , {
                name: 'Checkbox'
                , itemName: 'target'
                , title: 'Open in new window'
                , outerClass: 'external-mode'
                , callback: function() {
                    return valueTarget === '_blank';
                }
            }
        ];

        if (this._editor) {
            var hideTarget = _this._targetObject.tagName === "A" ? '' : ' hide';
            elements = elements.concat([
                {
                    name: 'Button'
                    , itemName: 'unlink'
                    , title: 'Unlink'
                    , outerClass: 'button-unlink external-mode section-mode image-mode video-mode modal-mode' + hideTarget
                    , callback: function() {
                    return valueTarget === '_blank';
                }
                }
            ]);
        }

        var cElements = new ControlElements({
            name: _this.name
            , elements: elements
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _loadValues: function () {
        var _this = this;

        var valueHref = _this._targetObject.getAttribute('href') || '';
        var targetHref = _this._targetObject.getAttribute('target');
        targetHref = targetHref || '_self';

        var patternHref = new RegExp('([\\w._-]*)?\\/?#?([\\w_-]*)?', 'i');
        var patternHrefVideo = new RegExp('(vimeo\\.com|youtube\\.com)', 'i');
        var patternHrefImage = new RegExp('\\.(png|jpg|jpeg|gif|svg)', 'i');
        //var attrHref = DOMElement.getAttribute('href') || '';
        var attrHref = valueHref;
        var parseHref = attrHref.match(patternHref);
        var parseHrefVideo = attrHref.match(patternHrefVideo);
        var parseHrefImage = attrHref.match(patternHrefImage);
        var dataTarget = _this._targetObject.dataset.target;
        _this._modalTarget = dataTarget || '';

        this._argsSave = {
            link: valueHref
            , targetLink: targetHref
        };

        _this.selectMode = 'none';
        var button = _this._cElements.getElements().linkType.getDOMSelf().querySelector('button');

        if (!parseHrefVideo && !parseHrefImage && parseHref && parseHref[2] && !dataTarget) {
            if (parseHref[1]) {
                _this._cElements.getElements().page.getDOMSelf()
                    .querySelector('.dropdown button').dataset.value = parseHref[1].replace(/.html/, '');
                _this._cElements.getElements().page.getDOMSelf()
                    .querySelector('.dropdown button span').innerHTML = firstUp(parseHref[1].replace(/.html/, ''));
            }
            _this._cElements.getElements().section.getDOMSelf()
                .querySelector('.dropdown button').dataset.value = '#' + parseHref[2];
            _this._cElements.getElements().section.getDOMSelf()
                .querySelector('.dropdown button span').innerHTML = '#' + parseHref[2];
            button.dataset.value = _this._linkType = 'section-page';
            button.querySelector('span').innerHTML = 'Section/Page';
        } else if (!parseHrefVideo && !parseHrefImage && dataTarget) {
            _this._cElements.getElements().modal.getDOMSelf()
                .querySelector('.dropdown button').dataset.value = dataTarget;
            _this._cElements.getElements().modal.getDOMSelf()
                .querySelector('.dropdown button span').innerHTML = dataTarget;
            button.dataset.value = _this._linkType = 'modal-element';
            button.querySelector('span').innerHTML = 'Modal popup';
        } else if (parseHrefVideo && _this._targetObject.classList.contains('video-popup')) {
            _this.selectMode = 'video';
            _this._cElements.getElements().video.getDOMSelf()
                .querySelector('input').value = valueHref;
            button.dataset.value = _this._linkType = 'video-popup';
            button.querySelector('span').innerHTML = 'Video popup';
        }
        else if (parseHrefImage && _this._targetObject.classList.contains('image-popup')) {
            _this._linkType = 'image';
            _this.selectMode = 'image';
            _this._cElements.getElements().image.getDOMSelf()
                .querySelector('input').value = valueHref;
            button.dataset.value = _this._linkType = 'image';
            button.querySelector('span').innerHTML = 'Image';
        } else {
            _this._linkType = 'external';
        }
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().linkType.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;

            var items = [
                'external'
                , 'section-page'
                , 'image'
                , 'video-popup'
                , 'modal-element'
            ];

            _this._linkType = val.toLowerCase().replace(/[\s\\/]/g, '-');
            this.parentElement.className = this.parentElement.className.replace(new RegExp(items.join('|')), '');
            this.parentElement.classList.add(_this._linkType);
        });

        this._cElements.getElements().external.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;

            _this._doThis(val, _this._argsSave.targetLink, null , {
                link: _this._argsSave.link
                , targetLink: _this._argsSave.targetLink
            });

            if (_this._editor)
                _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');

            _this._argsSave.link = val;
        });

        this._cElements.getElements().page.getDOMSelf().addEventListener('custom.event', function (e) {
            _this._page = e.detail.val.toLowerCase();

            var pageObj = _this.getActivePageObject();
            var pageName = pageObj.getPageName();
            var page = _this._page + '.html';
            if (_this._page === pageName) {
                page = '';
            }

            var newPageObj = _this.pages.getPageByName(_this._page);
            var sections = [];

            for (var s in newPageObj.sections) {
                if (newPageObj.sections[s].getDOMSelf().children[0].classList.contains('modal')) {
                    continue;
                }

                sections.push('#' + s);
            }

            if (sections.length === 0)
                sections.push('-');

            _this._cElements.getElements().section.changeItems(sections);

            _this._section = sections[0];

            var val = page + _this._section;

            _this._doThis(val, '_self', null , {
                link: _this._argsSave.link
                , targetLink: _this._argsSave.targetLink
            });

            if (_this._editor)
                _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');

            _this._argsSave.link = val;
        });

        this._cElements.getElements().section.getDOMSelf().addEventListener('custom.event', function (e) {
            _this._section = e.detail.val;

            var pageObj = _this.getActivePageObject();
            var pageName = pageObj.getPageName();
            var page = _this._page + '.html';
            if (_this._page === pageName) {
                page = '';
            }
            var val = page + _this._section;
            _this._doThis(val, '_self', null , {
                link: _this._argsSave.link
                , targetLink: _this._argsSave.targetLink
            });

            if (_this._editor)
                _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');

            _this._argsSave.link = val;
        });

        this._cElements.getElements().image.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;

            _this._doThis(val, '_self', 'image', {
                link: _this._argsSave.link
                , targetLink: _this._argsSave.targetLink
            });

            if (_this._editor)
                _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');

            _this._argsSave.link = val;
        });

        this._cElements.getElements().video.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;

            _this._doThis(val, '_self', 'video', {
                link: _this._argsSave.link
                , targetLink: _this._argsSave.targetLink
            });

            if (_this._editor)
                _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');

            _this._argsSave.link = val;
        });

        this._cElements.getElements().modal.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._modalTarget;
            _this._modalTarget = val;

            _this.setModalTarget(val, saveVal);

            _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');
        });

        this._cElements.getElements().target.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;

            var target = val ? '_blank' : '_self';

            _this._doThis(_this._argsSave.link, target, null, {
                link: _this._argsSave.link
                , targetLink: _this._argsSave.targetLink
            });

            if (_this._editor)
                _this._cElements.getElements().unlink.getDOMSelf().classList.remove('hide');

            _this._argsSave.targetLink = target;
        });

        if (this._editor) {
            this._cElements.getElements().unlink.getDOMSelf().addEventListener('custom.event', function (e) {
                var val = e.detail.val;
                var select = _this.windowIframe.getSelection();
                var editorAnchor = _this._editLink ? _this._editLink
                    :_this.windowIframe.getSelection().anchorNode.parentNode;


                if (editorAnchor.nodeName === "A") {
                    _this._targetObject = editorAnchor.parentElement;
                    _this._range.selectNodeContents(editorAnchor);
                    select.removeAllRanges();
                    select.addRange(_this._range);
                    _this._editor.removeLink(_this._button);

                    _this._cElements.getElements().external.getDOMSelf().querySelector('input').value = '';
                    _this._cElements.getElements().image.getDOMSelf().querySelector('input').value = '';
                    _this._cElements.getElements().video.getDOMSelf().querySelector('input').value = '';
                    _this._cElements.getElements().target.getDOMSelf().querySelector('input').checked = false;
                }

                _this._cElements.getElements().unlink.getDOMSelf().classList.add('hide');
            });
        }
    }
    , _doThis: function (link, targetLink, mode, argsSave) {
        var _this = this;
        var DOMElement = this._targetObject;
        var li = this.findParent(this._targetObject, ['section-item', 'modal-confirm']);
        var script = li.querySelector('script');

        script.innerHTML = script.innerHTML.replace(/\n?\/\/magnific[\s\S]*?\/\/magnificend/im, '');

        if (DOMElement.hasAttribute('data-toggle')) {
            DOMElement.removeAttribute('data-toggle');
        }

        if (DOMElement.hasAttribute('data-triger')) {
            DOMElement.removeAttribute('data-triger');
        }

        var owl = _this.findParent(DOMElement, ['spr-gallery']);
        var magnificGallery = _this.findParent(DOMElement, ['gallery']);

        if (_this._editor) {
            var editorAnchor = _this.windowIframe.getSelection().anchorNode.parentNode;
            var nav = _this.findParent(DOMElement, ['nav']);
            var ul = null;
            var anchor = null;
            if (nav && DOMElement.classList.contains('spr-option-textedit-link')) {
                ul = _this.findParent(DOMElement, ['ul:not(.blr-active-page)', 'ol:not(.blr-active-page)']);
                if (ul) {
                    ul.style.display    = 'inline-block';
                    ul.style.visibility = 'visible';
                }

                setTimeout(function(){
                    if (editorAnchor.nodeName === "A") {
                        anchor = _this._setLink(DOMElement, link, targetLink, _this._editor, _this._button);

                    } else {
                        anchor = _this._setLink(DOMElement, link, targetLink, _this._editor, _this._button);
                    }

                    if (anchor && mode === 'video') {
                        anchor.classList.add('video-popup');
                        anchor.classList.add('mfp-iframe');
                        _this.applyMagnificPopup(anchor);
                    }

                    if (anchor && mode === 'image') {
                        anchor.classList.add('image-popup');
                        _this.applyMagnificPopupImage(anchor);
                    }

                    _this._editLink = anchor;

                        ul.style.removeProperty('display');
                    ul.style.removeProperty('visibility');
                },400);
            } else {

                if (_this._button.classList.contains('active') && editorAnchor.nodeName !== "A") {
                    anchor = _this.windowIframe.getSelection().anchorNode;
                    var args = {
                        link: link
                        , targetLink: targetLink
                    };

                    var img = null;
                    if (anchor.children.length && anchor.children[0].tagName === 'IMG')
                        img = anchor.children[0];

                    if (anchor.dataset.toggle) delete anchor.dataset.toggle;
                    if (anchor.dataset.target) delete anchor.dataset.target;

                    _this._changeLink(anchor, args, argsSave, img);
                } else if (editorAnchor.nodeName === "A") {
                    anchor = _this._editor.changeLink(DOMElement, editorAnchor, link, targetLink);
                } else {
                    anchor = _this._editor.setLink(_this._button, link, targetLink);
                }

                if (anchor && mode === 'video') {
                    anchor.classList.add('video-popup');
                    anchor.classList.add('mfp-iframe');
                    _this.applyMagnificPopup(anchor);
                }

                if (anchor && mode === 'image') {
                    anchor.classList.add('image-popup');
                    _this.applyMagnificPopupImage(anchor);
                }

                _this._editLink = DOMElement = anchor;
            }

        } else {

            DOMElement.classList.remove('video-popup');
            DOMElement.classList.remove('image-popup');
            DOMElement.classList.remove('mfp-iframe');

            if (DOMElement.nodeName === 'A' && link !== '') {
                var args = {
                    link: link
                    , targetLink: targetLink
                };

                var img = null;
                if (DOMElement.children.length && DOMElement.children[0].tagName === 'IMG')
                    img = DOMElement.children[0];

                if (DOMElement.dataset.toggle) delete DOMElement.dataset.toggle;
                if (DOMElement.dataset.target) delete DOMElement.dataset.target;

                _this._changeLink(DOMElement, args, argsSave, img);
            } else if (DOMElement.nodeName === 'A' && link === '') {
                _this._removeLink(DOMElement);
            } else {
                this._targetObject = DOMElement = _this._setLink(DOMElement, link, targetLink);
            }

            if (!_this._button.classList.contains('active'))
                _this._button.classList.add('active');

            //TODO: check this condition
            // if (radio === 'video-popup' && !owl) {
            // if (mode === 'video' && !DOMElement.classList.contains('spr-option-link-img')) {
            if (mode === 'video' && !magnificGallery) {
                DOMElement.classList.add('video-popup');
                DOMElement.classList.add('mfp-iframe');
                _this.applyMagnificPopup(DOMElement);
            }

            //TODO: check this condition
            // if (radio === 'image' && !owl) {
            // if (mode === 'image' && !DOMElement.classList.contains('spr-option-link-img')) {
            if (mode === 'image' && !magnificGallery) {
                DOMElement.classList.add('image-popup');
                _this.applyMagnificPopupImage(DOMElement);
            }

            //TODO: check this condition
            if (magnificGallery
                // && DOMElement.classList.contains('spr-option-link-img')
                && (mode === 'video' || mode === 'image')
            ) {
                if (script.innerHTML.search(/magnificPopup/m) !== -1) {
                    DOMElement.classList.remove('smooth');
                    DOMElement.classList.remove('external');

                    if (mode === 'video') {
                        DOMElement.classList.add('video-popup');
                        DOMElement.classList.add('mfp-iframe');
                    }
                    if (mode === 'image')
                        DOMElement.classList.add('image-popup');

                    _this.windowIframe.jQuery(magnificGallery).magnificPopup({
                        delegate: '.video-popup, .image-popup', // the selector for gallery item
                        type: 'image',
                        gallery: {
                            enabled: true
                        },
                        image: {
                            titleSrc: function (item) {
                                return item.el.find('img').attr('alt');
                            }
                        },
                        callbacks: {
                            open: function() {
                                _this.windowIframe.jQuery(magnificGallery).trigger('stop.owl.autoplay');
                            },
                            close: function() {
                                _this.windowIframe.jQuery(magnificGallery).trigger('play.owl.autoplay');
                            }
                        }
                    });
                }
            }
        }

        //this necessary for gallery
        if (owl && owl.classList.contains('spr-gallery')) {
            _this.windowIframe.jQuery(owl).trigger('refresh.owl.carousel');
        }

        //this necessary for video and image
        //TODO: check this condition
        // if (radio !== 'video-popup' && radio !== 'image' && !owl) {
        if (mode !== 'video' && mode !== 'image' && !DOMElement.classList.contains('spr-option-link-img')) {
            if (DOMElement.classList.contains('video-popup')) DOMElement.classList.remove('video-popup');
            if (DOMElement.classList.contains('image-popup')) DOMElement.classList.remove('image-popup');

            if (_this.windowIframe.jQuery(DOMElement).data('magnificPopup') !== undefined) {
                _this.windowIframe.jQuery( DOMElement ).data( 'magnificPopup' ).disableOn = function () {
                    return false;
                };
            }
        } else if (mode !== 'video' && mode !== 'image' && owl) {
            if (!DOMElement.classList.contains('external')) DOMElement.classList.add('external');
        }

        //TODO: check this condition
        // if (mode === 'video' || mode === 'image') {
        //     if (_this.windowIframe.jQuery(DOMElement).data('magnificPopup') !== undefined) {
        //         _this.windowIframe.jQuery( DOMElement ).data( 'magnificPopup' ).disableOn = function () {
        //             if ( _this.editingText ) {
        //                 return false;
        //             }
        //             return true;
        //         };
        //     }
        // }
    }
    /**
     *
     * @private
     */
    , _changeLink: function(DOMElement, args, argsSave, img) {
        var _this = this;
        if (img && DOMElement != img.parentElement)
            DOMElement = img.parentElement;
        DOMElement.href = args.link;
        DOMElement.target = args.targetLink;
        DOMElement.classList.add('smooth');

        _this.windowIframe.jQuery(DOMElement).smoothScroll({
            speed: 800
            , exclude: ['.spr-outline-control', '.spr-oc-show']
            , excludeWithin: ['.spr-outline-control', '.spr-oc-show']
        });

        _this.setStep(function () {
            _this._changeLink(DOMElement, argsSave, args, img);
        });
    }
    /**
     *
     * @private
     */
    , _setLink: function(DOMElement, link, targetLink, editor, tbutton, a) {
        var _this = this;
        //this condition need for the history
        if (DOMElement.tagName === 'A' && !editor) {
            var args = {
                link: link
                , targetLink: targetLink
            };
            var argsSave = {
                link: DOMElement.getAttribute( 'href' )
                , targetLink: DOMElement.target
            };
            _this._changeLink(DOMElement, args, argsSave );
        } else if (editor) {
            // var anchor = document.createElement('a');
            // anchor.setAttribute('href', link);
            // anchor.setAttribute('target', targetLink);
            // anchor.appendChild(DOMElement.childNodes[0]);
            // anchor.classList.add('smooth');
            // DOMElement.appendChild(anchor);
            // _this.windowIframe.jQuery(anchor).smoothScroll({
            //     speed: 800
            //     , exclude: ['.spr-outline-control', '.spr-oc-show']
            // });
            var anchor = editor.setLink(tbutton, link, targetLink);

            _this.setStep(function() {
                editor.removeLink(tbutton);
            });
            return anchor;
        } else {
            var anchor = document.createElement('a');
            anchor.href = link;
            anchor.target = targetLink;

            if (DOMElement.tagName === 'I') {
                /*
                 * Need to be copied attributes to the anchore
                 */
                for (var i = 0; i < DOMElement.attributes.length; i++)
                {
                    var attr = DOMElement.attributes[i];
                    anchor.setAttribute(attr.name, attr.value);
                    DOMElement.removeAttribute(attr.name);
                }
            }


            DOMElement.parentElement.insertBefore(anchor, DOMElement);
            anchor.wrap(DOMElement);

            if (anchor.classList.contains('spr-outline-control')) {
                _this.rebuildControl(anchor);
            } else {
                _this.rebuildControl(DOMElement);
            }

            anchor.classList.add('smooth');
            _this.windowIframe.jQuery(anchor).smoothScroll({
                speed: 800
                , exclude: ['.spr-outline-control', '.spr-oc-show']
                , excludeWithin: ['.spr-outline-control', '.spr-oc-show']
            });

            _this.setStep(function() {
                // anchor element need to be inner element of 'a'
                // , because 'a' element will be removed and not have children elements
                _this._removeLink(DOMElement.parentElement);
            });
            return anchor;
        }

    }
    /**
     *
     * @private
     */
    , _setTypeLink: function(radio, chbx) {
        var _this = this;
        var radioControl = _this.findParent(radio, ['radio-control']);
        var checkbox = _this.findParent(_this._elements.target, ['field-checkbox']);
        radioControl.className = radioControl.className.replace(/(external|section-page|image|video-popup|modal-element)/i, '');
        checkbox.className = checkbox.className.replace(/(external|section-page|image|video-popup|modal-element)/i, '');
        radioControl.classList.add(radio.value);
        if (chbx) checkbox.classList.add(radio.value);
    }
    /**
     *
     * @private
     */
    , _removeLink: function(a) {
        var _this = this;
        var DOMElement = a.children[0];
        var gallery = _this.findParent(a, ['spr-gallery']);
        var link = a.getAttribute('href');
        var target = a.target;
        if (DOMElement && !gallery && DOMElement.nodeName !== 'SPAN') {

            if (DOMElement.tagName === 'I') {
                /*
                 * Need to be copied attributes to the DOMElement
                 */
                a.removeAttribute('href');
                a.removeAttribute('target');
                for (var i = 0; i < a.attributes.length; i++)
                {
                    var attr = a.attributes[i];
                    DOMElement.setAttribute(attr.name, attr.value);
                }
            }

            a.unWrapOne('save-style');
            if (/smooth/.test(DOMElement.getAttribute('class'))) {
                DOMElement.setAttribute('class', DOMElement.getAttribute('class').replace(/\s?smooth/, ''));
            }

            _this.rebuildControl(DOMElement);
        } else {
            DOMElement = a;
            a.href = '/';
            a.target = '_self';
        }
        //
        //controls.rebuildControl(DOMElement.parentElement);

        _this.setStep(function() {
            _this._setLink(DOMElement, link, target, null, null, a);
        });
    }
    , setModalTarget: function (val, saveVal) {
        var _this = this;

        if (_this._targetObject.tagName !== 'A') {
            _this._targetObject = _this._setLink(_this._targetObject, val, '_self', _this._editor, _this._button);
        }

        if (val !== '') {
            var popupThumb = _this.popupThumbArray.find(function (el) {
                if (val === '#' + el.id) return el.toggle;
            });

            _this._targetObject.dataset.toggle = popupThumb.toggle;
            _this._targetObject.dataset.target = val;
        } else {
            delete _this._targetObject.dataset.toggle;
            delete _this._targetObject.dataset.target;
        }

        _this.setStep(function() {
            _this.setModalTarget(saveVal, val);
        });
    }
});

ControlLinkSettingsPL2.prototype.constructor = ControlLinkSettingsPL2;
var ControlPagePL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    ControlPanel.apply(this, arguments);

    this.name = options.name;
    this.type = 'modeOfBuilder';
    this.pageMode = 'page-mode-project-pages';

    this._createPagesList();
};

ControlPagePL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    name: ''
    , controlButtonOptions: {
        tag: 'li'
        , className: 'item-check d-flex justify-content-center align-items-center'
        , innerHTML: '<i class="icon-blr-mode-pages"></i>'
    }
    , _createPagesList: function () {
        var projectPages = document.createElement('div');
        projectPages.className = 'project-pages';

        projectPages.innerHTML = '<div class="wrapper">'
                + '<ul>'
                + '<li>'
                    + '<i class="supra icon-blr-add-page"></i>'
                    + '<span>Add new page</span>'
                + '</li>'
                + '</ul>'
            + '</div>'
            + '<div class="btn-ex-im-d">'
            + '<div type="button" class="supra-btn new-project">'
                + '<span>New</span>'
            + '</div>'
            + '<div type="button" class="supra-btn export">'
                + '<span>Save</span>'
            + '</div>'
            + '<div type="button" class="supra-btn import">'
                + '<span>Load</span>'
            + '</div>'
            + '<div type="button" class="supra-btn btn-primary ftp-publish" data-href="http://google.com.ua">'
                + '<i class="supra icon-blr-lg-ftp-publishing"></i>'
                + '<span>FTP Publish</span>'
            + '</div>'
            + '<div type="button" class="supra-btn btn-success download" data-href="http://google.com.ua">'
                + '<i class="supra icon-blr-lg-download"></i>'
                + '<span>Download</span>'
            + '</div>'
            + '</div>';

        this._selfDOM.appendChild(projectPages);

        this._callFTPPublish();
        this._callDownload();
        this._callExport();
        this._callImport();
        this._callNewProject();

        $(projectPages).find('.wrapper').niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        if (this.pages) {
            this._addProjectPagesToRightSide();
        }
    }
    , _addProjectPagesToRightSide: function() {
        var _this = this;
        var li = _this._selfDOM.querySelectorAll('li');
        var buttonAdd = li[li.length-1];

        _this.pages.getPagesObjInArray().forEach(function(element, indx, arr){
            var pageName = element.getPageName();
            var ativePageName = _this.pages.getPagesObjInArray()[_this._idActivePage].getPageName();
            var pageItem = _this._addPageNavItem(_this, buttonAdd, pageName, indx, ativePageName);
            if (arr.length === 1 && indx === 0) {
                pageItem.classList.add('last-page');
            }
        });
        if (!_this._triggerInitProject) {
            buttonAdd.addEventListener('click', function(){
                var names = _this.getPagesNamesArray();
                var name = _this.uniqueName('page', names);
                _this._addNewPage(_this, this, name);

                _this._pinBottom(_this, this);
            });
            _this._triggerInitProject = true;
        }

    }
    /**
     *
     * @param _this
     * @param addButton {HTMLElement} button 'Add new page' on right side
     * @param name {string} name of page
     * @private
     */
    , _addNewPage: function(_this, addButton, name) {
        var indx = _this.pages.getPagesObjInArray().length;

        var pageItem = _this._addPageNavItem(_this, addButton, name, indx);

        _this.pages.getPagesObjInArray().push(new Page({
            name: name
            , id: indx
        }));

        var lastPageItem = pageItem.parentElement.querySelector('.last-page');

        if (lastPageItem) {
            lastPageItem.classList.remove('last-page');
        }

        // builder.setStep(function(){
        //     _this._deletePage(_this, pageItem, _this.pages.getPagesObjInArray()[indx].getDOMSelf());
        //     var mode = document.querySelector('aside.left nav li.active').id;
        //     _this.selectionEditMode(mode);
        // });
    }
    /**
     *
     * @param _this
     * @param targetPageObj {Page} Object Page (page.js)
     * @param addButton {HTMLElement} button 'Add new page' on right side
     * @param oldPageName {string} name of page which to copy
     * @private
     */
    , _copyPage: function(_this, targetPageObj, addButton, oldPageName) {
        var copy = oldPageName.split('-');
        var names = _this.getPagesNamesArray();
        if (copy[0] === 'copy') {
            var name = _this.uniqueName(oldPageName, names);
        } else {
            var name = _this.uniqueName('copy-' + oldPageName, names);
        }

        var indx = _this.pages.getPagesObjInArray().length;
        var pageItem = _this._addPageNavItem(_this, addButton, toPageName(name), indx);

        var newPageObj = _this.pages.copyPage({
            name: name
            , id: indx
            , mode: 'copy'
            , targetPO: targetPageObj
        });

        var newPage = newPageObj.getDOMSelf();

        var lastPageItem = pageItem.parentElement.querySelector('.last-page');

        if (lastPageItem) {
            lastPageItem.classList.remove('last-page');
        }

        // builder.setStep(function(){
        //     _this._deletePage(_this, pageItem, newPage);
        //     var mode = document.querySelector('aside.left nav li.active').id;
        //     _this.selectionEditMode(mode);
        // });
    }
    /**
     *
     * @param _this
     * @param pageItem {HTMLElement} button wich conteins current page name on right side
     * @param targetPage {HTMLElement} page which should be deleted
     * @private
     */
    , _deletePage: function(_this, pageItem, targetPage) {
        // if (pageItem.dataset.id === 0) return;

        var nextPageItem = pageItem.nextSibling;
        var parent = targetPage.parentNode;
        var nextPage = targetPage.nextSibling;
        if (targetPage.classList.contains('blr-active-page')) {
            if (nextPage) {
                _this._setActivePage(_this, nextPage, nextPageItem);
            } else {
                var beforePage = targetPage.previousSibling;
                var beforePageItem = pageItem.previousSibling;
                _this._setActivePage(_this, beforePage, beforePageItem);
            }
            document.title = _this.getActivePageObject().getPageTitle();
            document.querySelector('link[rel=icon]').href =
                _this.getActivePageObject().getPageFavicon();
        }
        var targetPageObj = _this.pages.getPagesObjInArray()[targetPage.dataset.id];
        if (targetPage.classList.contains('blr-active-page')) {
            targetPageObj.moveChildrenToHtmlDOM(targetPage);
        }
        delete _this.pages.getPagesObjInArray()[targetPage.dataset.id];
        parent.removeChild(targetPage);
        pageItem.parentNode.removeChild(pageItem);

        if (nextPageItem.parentElement.children.length === 2) {
            nextPageItem.parentElement.children[0].classList.add('last-page');
        }

        _this.setStep(function() {
            targetPage.innerHTML = '';
            if (nextPage) {
                parent.insertBefore(targetPage, nextPage);
            } else {
                parent.appendChild(targetPage);
            }
            var indx = targetPage.dataset.id*1;
            var del = _this.pages.getPagesObjInArray()[indx] === undefined ? 1 : 0;
            _this.pages.getPagesObjInArray().splice(indx,del,targetPageObj);
            _this.rebuildControl(targetPage);
            _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(targetPage);
            nextPageItem.parentNode.insertBefore(pageItem, nextPageItem);
            if (pageItem.classList.contains('active')) {
                pageItem.classList.remove('active');
                targetPage.classList.remove('active');
            }
            _this.changeActivePage(targetPageObj, pageItem, indx);
            var mode = document.querySelector('aside.left nav li.active').id;
            //TODO: need to be builder because this function belongs it
            builder.selectionEditMode({detail:mode});

            _this.setStep(function(){
                _this._deletePage(_this, pageItem, targetPage);
                var mode = document.querySelector('aside.left nav li.active').id;
                builder.selectionEditMode({detail:mode});
            });
        });
    }
    /**
     *
     * @param _this
     * @param page {HTMLElement} page which should be active
     * @param pageItem {HTMLElement} button on right side which should be active
     * @private
     */
    , _setActivePage: function(_this, page, pageItem) {
        var idPage = page.dataset.id;
        page.classList.add('blr-active-page');
        Core.prototype._idActivePage = idPage;

        var beforePageOBJ = _this.pages.getPagesObjInArray()[idPage];
        beforePageOBJ.extractContent();

        Core.prototype.activePageObject = beforePageOBJ;

        pageItem.classList.add('active');
        _this.rebuildControl(page);
        _this._refreshParallax(page);
        _this._reloadMagnific(page);
        _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(page);
        _this._reloadVideoBg(page, 'run');
    }
    /**
     * Add button to right side which will be accorded with the new page
     * @param _this
     * @param before {HTMLElement} button before which need to set new pageItem
     * @param pageName {string} name of new page
     * @param indx {number} position on _this._pages array
     * @param ativePageName {string} current page name which active
     * @private
     */
    , _addPageNavItem: function(_this, before, pageName, indx, ativePageName) {
        var pageItem = document.createElement('li');
        ativePageName = ativePageName || 'index';
        if (pageName === ativePageName) pageItem.className = 'active';
        pageItem.innerHTML = '<span>' + firstUp(pageName) + '</span>'
            + '<div class="control-wrap">'
            + '<i class="icon-blr-settings"></i>'
            + '<i class="icon-blr-copy"></i>'
            + '<i class="icon-blr-trash"></i>'
            + '</div>';
        pageItem.dataset.id = indx;
        var settings = pageItem.querySelector('.icon-blr-settings');
        var copy = pageItem.querySelector('.icon-blr-copy');
        var del = pageItem.querySelector('.icon-blr-trash');

        pageItem.addEventListener('click', function(){
            if (!this.classList.contains('active')) {
                var targetPageObj = _this.pages.getPagesObjInArray()[indx];
                _this.changeActivePage(targetPageObj, this, indx);
            }
        });

        settings.addEventListener('click', function(e) {
            e.stopPropagation();
            var targetPage = _this.pages.getPagesObjInArray()[indx].getDOMSelf();
            var modal = new Modal('supra-modal', 'PageSettings',
                { page: _this.pages.getPagesObjInArray()[targetPage.dataset.id], pageItem: pageItem});
            $(modal).modal('show');
        });

        copy.addEventListener('click', function(e){
            e.stopPropagation();
            var targetPageObj = _this.pages.getPagesObjInArray()[indx];
            _this._copyPage(
                _this
                , targetPageObj
                , pageItem.nextSibling
                , replaceSpace(pageItem.children[0].innerHTML.toLowerCase())
            );

            var li = _this._selfDOM.querySelectorAll('li');
            var buttonAdd = li[li.length-1];
            _this._pinBottom(_this, buttonAdd);
        });

        del.addEventListener('click', function(e){
            e.stopPropagation();
            if (pageItem.parentElement.children.length !== 2) {
                var targetPage = _this.pages.getPagesObjInArray()[indx].getDOMSelf();
                _this._deletePage(_this, pageItem, targetPage);
                var li = _this._selfDOM.querySelectorAll('li');
                var buttonAdd = li[li.length-1];
                _this._pinBottom(_this, buttonAdd);
            }
        });

        before.parentNode.insertBefore(pageItem, before);

        return pageItem;
    }
    /**
     * Fixes the addButton on bottom when quantity pageItems is out of sight
     * @param _this
     * @param buttonAdd {HTMLElement} button 'Add new page' on right side
     * @private
     */
    , _pinBottom: function(_this, buttonAdd) {
        var bottom = _this._selfDOM.querySelector('.btn-ex-im-d').getBoundingClientRect().top;
        var pageItemHeight = buttonAdd.clientHeight;
        var b = buttonAdd.previousSibling.getBoundingClientRect().bottom + pageItemHeight*2+5;
        buttonAdd.classList[b > bottom ? 'add' : 'remove']('pin-bottom');
        if (b > bottom) {
            buttonAdd.style.top = bottom - pageItemHeight + 'px';
        } else {
            buttonAdd.style.top = 'auto';
        }
    }
    /**
     * Return pageItem of project pages panel that suit current active page
     * @return {HTMLElement}
     */
    , getActivePageItem: function(id) {
        var pageItems = this._selfDOM.querySelectorAll('ul li');
        var pageItem = pageItems[0];
        Array.prototype.forEach.call(pageItems, function(item){
            if (item.dataset.id*1 === id*1) pageItem = item;
        });
        return pageItem;
    }
    /**
     * Chenge actve page
     * @param targetPageObj {Page} page's object which need to be activated
     * @param pageItem {HTMLElement} button on right side
     * @param indx {number} position on _this._pages array
     * @public
     */
    , changeActivePage: function(targetPageObj, pageItem, indx) {
        var _this = this;
        var targetPage = targetPageObj.getDOMSelf();
        var activePageObj = _this.getActivePageObject();
        var activePage = activePageObj.getDOMSelf();

        if (activePage.querySelector('.modal.show')) {
            var modal = activePage.querySelector('.modal.show');
            _this.windowIframe.jQuery(modal).modal('hide');
            modal.style.display = 'none';
        }

        if (targetPage.classList.contains('blr-active-page')) {
            targetPage.classList.remove('blr-active-page');
        }
        _this.selection(targetPage, 'ul.blr-active-page', 'blr-active-page');
        Core.prototype._idActivePage = indx;
        _this.selection(pageItem);

        activePageObj.moveChildrenToHtmlDOM(activePage);
        targetPageObj.extractContent();
        document.title = targetPageObj.getPageTitle();
        document.querySelector('link[rel=icon]').href =
            targetPageObj.getPageFavicon();

        _this.rebuildControl(targetPage);
        Core.prototype.activePageObject = targetPageObj;
        _this._refreshParallax(targetPage);
        _this._reloadMagnific(targetPage);
        _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(targetPage);
        _this._reloadVideoBg(targetPage, 'run');
        if (_this.windowIframe.AOS) _this.windowIframe.AOS.init();

        _this.popupThumb.querySelector('.container-thumb').innerHTML = '';
        _this.popupThumb.classList.remove('collapse-thumb');
        Core.prototype.popupThumbArray = [];
        _this._initThumbnails();
    }
    , getPagesArray: function() {
        return this.pages.getPagesObjInArray();
    }
    , getPagesNamesArray: function() {
        var names = [];
        this.pages.getPagesObjInArray().forEach(function(element){
            names.push(replaceSpace(element.getPageName()));
        });

        return names;
    }
    , setPageItemsName: function(name, pageItem) {
        pageItem.children[0].innerHTML = firstUp(name);
    }
    , _callNewProject: function() {
        var exportButton = this._selfDOM.querySelector('.new-project');
        exportButton.addEventListener('click', function() {
            var modal = new Modal('supra-modal', 'DeleteProject', null);
            $(modal).modal('show');
        });
    }
    , createNewProject: function() {
        var _this = this;

        var modalActive = _this.popupThumb.querySelector('.item.active');

        if(modalActive) {
            builder.windowIframe.jQuery( modalActive.dataset.target).modal( 'hide' );
        }

        var dataSave = document.createDocumentFragment();
        while(_this.main.children[0]) {
            dataSave.appendChild(_this.main.children[0]);
        }
        _this.main.innerHTML = '<style></style>';
        Core.prototype.builderStyle = document.getElementById('builder-style');
        var pagesSave = _this.cloneObject(_this._pages);
        // var ul = this._controlPanel.ProjectPages.self.querySelector('ul');
        // var pageItems = ul.querySelectorAll('li');
        // for (var i = 0; i < pageItems.length - 1; i++) {
        //     pageItems[i].parentNode.removeChild(pageItems[i]);
        // }

        var dataModalFormSave = document.createDocumentFragment();
        while(_this.modalFormContainer.children[0]) {
            dataModalFormSave.appendChild(_this.modalFormContainer.children[0]);
        }

        _this.modalFormContainer.innerHTML = '';

        Core.prototype.forms = {};
        Core.prototype.sectionsName = [];
        Core.prototype.gMaps = [];
        Core.prototype.plugins = [];
        Core.prototype.arrayFontsOnProject = [];
        Core.prototype._idActivePage = 0;
        var pageObj = new Page({
            name: 'index',
            id: 0,
            outerClass: 'light-page page-mode-edit-sections blr-active-page',
            mode: 'new'
        });

        _this.main.children[0].innerHTML = '';
        // _this._style.html = _this.main.children[0];
        // Array.prototype.forEach.call(_this._controlPanel.style.ul, function(ul) {
        //     ul.innerHTML = '';
        // });

        Core.prototype.popupThumb.querySelector('.container-thumb').innerHTML = '';
        this.popupThumb.className = 'supra';
        Core.prototype.popupThumbArray = [];
        // _this.collapsePopupThumbEl.classList.remove('show');

        this.pages.clearPagesObjInArray();
        this.pages.setPagesObjInArray(pageObj);

        Core.prototype.activePageObject = pageObj;

        var oldCPanels = document.querySelectorAll('.control-panel');
        [].forEach.call(oldCPanels, function (cPanel) {
            cPanel.parentElement.removeChild(cPanel);
        });

        document.querySelector('aside.left').innerHTML = '';

        /**
         * init LeftPanel
         */
        Core.prototype.leftPanel = new LeftPanel({
            mode: 'load'
        });

        _this.globalStyle.init();

        _this.body.classList.remove('thin');

        // var spOptions = _this.main.querySelectorAll('.sp-container');
        // Array.prototype.forEach.call(spOptions, function(el){
        //     el.parentElement.removeChild(el);
        // });

        document.title = _this.getActivePageObject().getPageTitle();
        document.querySelector('link[rel=icon]').href =
            _this.getActivePageObject().getPageFavicon();

        delete window.localStorage.projectWeber;
        delete window.localStorage.style;

        // _this.setStep(function(){
        //     _this.main.innerHTML = '';
        //     _this.main.appendChild(dataSave);
        //     _this.modalFormContainer.appendChild(dataModalFormSave);
        //     _this._pages = pagesSave;
        //     _this._initThumbnails();
        //
        //     _this.setStep(function () {
        //         _this.createNewProject();
        //     });
        // });

        Core.prototype.arrayPrevStep = [];
        Core.prototype.arrayNextStep = [];
        Core.prototype.triggerUndo = false;
        Core.prototype.triggerRedo = false;
    }
    , _callExport: function() {
        var _this = this;
        var exportButton = this._selfDOM.querySelector('.export');
        exportButton.addEventListener('click', function() {
            if (!_this._triggerExport) {
                _this._triggerExport = true;
                if (Object.keys(_this.projectSections).length > 0) {

                    var data = _this._prepareContentPagesToSave();
                    var form = new FormData();
                    form.append('data', data);
                    _this.ajax(form, 'export', function (data) {
                        var data = JSON.parse(data);

                        window.downloadFile(baseUri + 'tmp/' + data.file, data.file);
                        setTimeout(function(){
                            _this._triggerExport = false;
                        },2000);
                    });
                }
            }
        });
    }
    , _callImport: function() {
        var _this = this;
        var importButton = this._selfDOM.querySelector('.import');
        importButton.addEventListener('click', function() {
            if (!_this._triggerImport) {
                _this._triggerImport = true;
                var inputFile = document.createElement('input');
                inputFile.setAttribute("type", "file");
                inputFile.setAttribute("name", 'data');
                inputFile.style.display = 'none';
                document.body.appendChild(inputFile);

                inputFile.addEventListener('change', function () {
                    if (inputFile.files && inputFile.files[0]) {
                        var nameFile = inputFile.files[0].name;
                        var form = new FormData();
                        form.append('data', inputFile.files[0]);
                        form.append('name_file', nameFile);
                        _this.ajax(form, 'import', function (data) {
                            var preloader = _this.preloader;
                            preloader.querySelector('.load').removeAttribute('style');
                            document.body.appendChild(preloader);
                            document.body.classList.remove('run');

                            var datas = _this._prepareContentPagesToSave('no-storage');

                            var popup = _this.main.querySelector('.modal.show');
                            _this.windowIframe.jQuery(popup).modal('hide');
                            Core.prototype.popupThumbArray = [];
                            _this.popupThumb.querySelector('.container-thumb').innerHTML = '';
                            _this.popupThumb.className = 'supra';
                            _this.pages.clearPagesObjInArray();

                            document.body.removeChild(inputFile);
                            _this._triggerImport = false;

                            try {
                                builder._loadProject(data, 'load');
                            } catch (e) {
                                _this.createNewProject();
                                _this.removePreloader();
                                setTimeout(function () {
                                    _this.body.classList.remove('first-show');
                                }, 1600);
                            }
                        }, function (xhr, res) {
                            document.body.removeChild(inputFile);
                            _this._triggerImport = false;
                        });
                    }
                });

                inputFile.click();
            }
        });

    }
    , _callFTPPublish: function () {
        var _this = this;

        var ftpBtn = this._selfDOM.querySelector('.ftp-publish');
        ftpBtn.dataset.href = builderOptions.fullVersionSource;
        ftpBtn.addEventListener('click', function () {
            if (ftpBtn.classList.contains('no-click')) return;
            if (typeof download === 'function') {
                var i = this.querySelector('i');
                var span = this.querySelector('span');
                this.classList.add('no-click');

                var modal = new Modal('supra-modal', 'FtpSettings', {i: i, span: span, ftpBtn: this});
                $(modal).modal('show');
            } else {
                var downloadButton = document.createElement('a');
                downloadButton.dataset.href = builderOptions.fullVersionSource;
                var modal = new Modal('supra-modal', 'Demo', downloadButton);
                $(modal).modal('show');
            }
        });
    }
    , _callDownload: function() {
        var _this = this;
        var downloadButton = this._selfDOM.querySelector('.download');
        downloadButton.dataset.href = builderOptions.fullVersionSource;
        downloadButton.addEventListener('click', function () {
            if (typeof download === 'function') {
                download(_this);
            } else {
                var modal = new Modal('supra-modal', 'Demo', downloadButton);
                $(modal).modal('show');
            }
        });
    }
});

ControlPagePL2.prototype.constructor = ControlPagePL2;
var ControlSectionPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    ControlPanel.apply(this, arguments);

    this.name = options.name;
    this.type = 'modeOfBuilder';
    this.pageMode = 'page-mode-edit-sections';

    this._createSectionsList();
    this._createSectionsGroupList();

    /**
     * Init popup thumbnails
     */
    // this._initThumbnails();
    if (options.mode !== 'load') {
        // this._initCollapsePopupThumb();
    }
};

ControlSectionPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    name: ''
    , addSectionsItems: null
    , controlButtonOptions: {
        tag: 'li'
        , className: 'item-check d-flex justify-content-center align-items-center active'
        , innerHTML: '<i class="icon-blr-mode-plus"></i>'
    }
    , getLevel3: function () {
        return this.addSectionsItems;
    }

    , _createSectionsGroupList:  function () {
        var _this = this;
        var ul = document.createElement('ul');
        ul.className = this.name + ' nice-scroll';
        this.sections.getSectionsGroupList().forEach(function (section) {
            var li = document.createElement('li');
            li.dataset.group = section.key;
            li.innerHTML = section.name;

            li.addEventListener('click', function () {
                _this.showSectionsItems(li.dataset.group, this);
            });

            ul.appendChild(li);
        });

        this.getDOMSelf().appendChild(ul);

        $(ul).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });
    }

    , _createSectionsList: function () {
        var addSectionsItems = document.createElement('aside');
        addSectionsItems.className = 'add-sections-items supra';

        this.addSectionsItems = addSectionsItems;

        this.body.appendChild(addSectionsItems);

        $(addSectionsItems).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._selectionSectionsItem();
    }
    , showSectionsItems: function (group, item) {
        var _this = this;
        var ul = document.createElement('ul');
        this.addSectionsItems.innerHTML = '';

        if (group === 'all') {

        } else {
            this.sections.getSectionsByGroup(group).forEach(function (section) {
                ul.appendChild(section.getDOMSelf());
            });

            if (!this.addSectionsItems.classList.contains('show')) {
                this.addSectionsItems.classList.add('show');
            }

            if (window.innerWidth < 501) {
                var liForSections = this.getDOMSelf().querySelector('li.nopadding');
                if (!liForSections) {
                    liForSections = document.createElement('li');
                    liForSections.className = 'nopadding';
                } else {
                    liForSections.innerHTML = '';
                }
                // if (this.getDOMSelf().classList.contains('active')) {
                //     liForSections.style.height = '0';
                //     this.getDOMSelf().classList.remove('active');
                // } else {
                liForSections.appendChild(ul);
                    item.parentElement.insertBefore(liForSections, item.nextSibling);
                    // liForSections.style.height = ul.getBoundingClientRect().height + 'px';
                // }
            } else {
                this.addSectionsItems.appendChild(ul);
            }
            setTimeout(function(){
                _this.selection(item);
            }, 10);

            setTimeout(function(){
                $('aside.control-panel').getNiceScroll().resize();
            }, 800);
        }
    }

    /**
     * add section from section group menu
     * @private
     */
    , _selectionSectionsItem: function() {
        var _this = this;
        _this.addSectionsItems.addEventListener('mousedown', function(e) {
            e.preventDefault();
            if (!_this.touch && _this.detectLeftButton(e)) {
                _this._eventStartDrag.call(_this, e);
                document.addEventListener('mouseup', _this.listenerDocumentMouseUp);
                _this.documentIframe.addEventListener('mouseup', _this.listenerDocumentMouseUp);
            }
        });
        _this.addSectionsItems.addEventListener('touchstart', function(e) {
            _this.touch = true;
            _this._touchY = e.changedTouches[0].pageY;
            _this._eventStartDrag(e);
            document.addEventListener('touchend', _this.listenerDocumentTouchend);
            _this.documentIframe.addEventListener('touchend', _this.listenerDocumentTouchend);
        });

        _this.addSectionsItems.addEventListener('mouseout', function(e) {
            e.preventDefault();
            if (_this._triggerClickSection && !_this._sectionDropped) {
                var sectionImg = e.target.parentElement.querySelector('img');
                _this._createSectionPreview(sectionImg.src);
                _this._sectionDropped = true;
                _this.documentIframe.addEventListener('mousemove', _this.listenerDocumentMousemove);
            }
        });

    }
    , listenerDocumentMousemove: function(e) {
        builder.leftPanel.cPanels['sections']._eventMoveDrag(e);
        builder.leftPanel.cPanels['sections']._eventMoveDragSection(e);
    }
    , listenerDocumentMouseUp: function(e) {
        builder.leftPanel.cPanels['sections']._eventEndDrag();
    }
    , listenerDocumentTouchend: function(e) {
        e.preventDefault();
        builder.leftPanel.cPanels['sections']._eventEndDrag();
    }
    , listenerStartDragSection: function(e) {
        builder.leftPanel.cPanels['sections'].eventStartDragSection(e, this);
    }
    , listenerSectionsMouseDown: function(page, wrapC) {
        var _this = this;
        if (page) {
            var wraps = page.querySelectorAll('li.section-item > .wrap-control');
            Array.prototype.forEach.call(wraps, function (wrapControls) {
                wrapControls.removeEventListener('mousedown', _this.listenerStartDragSection);
                wrapControls.addEventListener('mousedown', _this.listenerStartDragSection);
            });
        } else if (wrapC) {
            wrapC.removeEventListener('mousedown', _this.listenerStartDragSection);
            wrapC.addEventListener('mousedown', _this.listenerStartDragSection);
        }
    }
    /**
     * Start drag section from section group menu
     * @param _this
     * @param e
     * @private
     */
    , _eventStartDrag: function(e) {
        var _this = this;
        var target = e.target || e.srcElement;
        var element = target.parentElement;
        var body = _this.documentIframe.querySelector('body');
        body.classList.add('cursor-grab');
        target.classList.add('cursor-grab');
        _this._elCurGrabbing = target;

        if (element.tagName === 'LI'
            && element.classList.contains('wrap-hover')
            && !_this._triggerClickSection
            && !_this._lockEndDrag) {

            _this._triggerClickSection = true;
            Core.prototype.sectionClicked = element;
            _this._createMarkerSection();
            _this._nextForDropped = null;
        }
    }
    /**
     * Move dragable section by main it was dragged from section group menu
     * @param _this
     * @param e
     * @private
     */
    , _eventMoveDrag: function(e) {
        var _this = this;
        if (_this._dropImg && _this._sectionDropped) {
            _this._dropImg.style.left = e.clientX - 105 + 'px';
            _this._dropImg.style.top = e.clientY - 10 + 'px';
            _this._dropImg.style.display = 'none';
            var li = _this.findParent(_this.documentIframe.elementFromPoint(e.clientX, e.clientY), ['section-item']);
            _this._dropImg.style.display = 'block';
            if (li) {
                _this._setPositionMarkerSection(e, _this.sectionClicked, li);
            } else if (_this.getActivePageObject().getDOMSelf().classList.contains('loading')) {
                _this.removeWrapDrag(_this.getActivePageObject().getDOMSelf());
                _this.getActivePageObject().getDOMSelf().appendChild(_this._markerSection);
            }
            if (window.innerWidth > 500 && !_this._fixedRightSide) {
                // _this._hideSections();
                // _this._hideControlPanel();
            };
        }
    }
    , _createMarkerSection: function() {
        var _this = this;
        _this._markerSection = _this.documentIframe.createElement('div');
        _this._markerSection.className = 'marker-section';
    }
    , _eventEndDrag: function() {
        var _this = this;
        var body = _this.documentIframe.querySelector('body');

        if (_this._dropImg
            && !_this._sectionDropped
            && !_this._triggerClickSectionInMain
            && !_this._lockEndDrag) {
            _this._dropImg = null;
        }

        if ((_this._sectionDropped || _this._triggerMoveSectionInMain) && !_this._lockEndDrag) {

            _this._sectionDropped = false;
            _this._lockEndDrag = true;

            _this._nextForDropped = _this._markerSection.nextSibling;
            var parent = _this._markerSection.parentElement;

            /**
             * Animate hide section preview
             */

            var boundingMarkerS = _this._markerSection.getBoundingClientRect();
            var top = boundingMarkerS.top;
            var left = boundingMarkerS.left;
            var width = boundingMarkerS.width;

            _this._dropImg.classList.add('drop');
            _this._dropImg.style.left = left + 'px';
            _this._dropImg.style.width = width + 'px';
            _this._dropImg.style.top = top + 'px';
            _this._dropImg.style.opacity = '0';

            if (parent) {
                parent.removeChild(_this._markerSection);
                _this._markerSection = null;

                setTimeout(function() {
                    if (_this._triggerMoveSectionInMain) {

                        if (_this._nextForDropped) {
                            parent.insertBefore(_this._draggableSection, _this._nextForDropped);
                        } else {
                            parent.appendChild(_this._draggableSection);
                        }

                        // _this._refreshParallax(_this._draggableSection);

                        var currPageObj = _this.getActivePageObject();
                        var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);

                        // _this._reloadVideoBg(currPageObj.getDOMSelf(), 'run');

                        _this.setStep(function () {
                            var currentPageObj = _this.getActivePageObject();
                            if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                                _this.changeActivePage(currPageObj, activeItem, currPageObj.id)
                            }
                            _this.setPoinDragMoveSection(_this._draggableSection, parent, _this._nextPageForHistory);
                        });

                        _this.removeNowrapSuperStructure(_this.documentIframe, null, 'without-spr-child');

                        _this._triggerMoveSectionInMain = false;
                    } else {
                        // _this._refreshParallax(_this.getActivePageObject().getDOMSelf());
                    }
                }, 200);
            }

            setTimeout(function() {

                if (_this._dropImg) {
                    body.removeChild(_this._dropImg);
                    _this._dropImg = null;
                }
                _this._lockEndDrag = false;

                //if (AOS) AOS.refresh();
                if (_this.windowIframe.AOS) _this.windowIframe.AOS.refresh();
            }, 400);
        }

        _this._triggerClickSectionInMain = false;

        if (_this._triggerClickSection) {
            _this._triggerClickSection = false;
            _this._beforeAddSection(_this);
        }
        if (body.classList.contains('cursor-grab')) {
            body.classList.remove('cursor-grab');
        }

        if (_this._elCurGrabbing && _this._elCurGrabbing.classList.contains('cursor-grab')) {
            _this._elCurGrabbing.classList.remove('cursor-grab');
        }
        _this._sectionDropped = false;

        _this.documentIframe.removeEventListener('mousemove', _this.listenerDocumentMousemove);
        _this.documentIframe.removeEventListener('mouseup', _this.listenerDocumentMouseUp);
        _this.documentIframe.removeEventListener('touchend', _this.listenerDocumentTouchend);
        document.removeEventListener('mouseup', _this.listenerDocumentMouseUp);
        document.removeEventListener('touchend', _this.listenerDocumentTouchend);
    }
    /**
     * Create and append section preview to body
     * @param src {string}
     * @private
     */
    , _createSectionPreview: function(src) {
        var _this = this;
        var body = _this.documentIframe.querySelector('body');

        _this._dropImg = _this.documentIframe.createElement('img');
        _this._dropImg.src = src;
        _this._dropImg.className = 'preview-section-on-drag';

        body.appendChild(_this._dropImg);
    }
    /**
     * @param e {Object}: evetn mousemove
     * @param dragSection {HTMLElement}
     * @param li {HTMLElement}: section that is under position mouse
     * @private
     */
    , _setPositionMarkerSection: function(e, dragSection, li) {
        var _this = this;
        var boundingLi = li.getBoundingClientRect();
        var height = boundingLi.height;
        var top = boundingLi.top;
        if (e.clientY < top + (height / 2)
            // && dragSection.dataset.group !== 'navigations'
            // && dragSection.dataset.group !== 'footers'
        ) {
            if (li.dataset.group !== 'navigations') {
                li.parentElement.insertBefore(_this._markerSection, li);
            } else {
                li.parentElement.insertBefore(_this._markerSection, li.nextSibling);
            }
        } else {
            if (li.dataset.group !== 'footers') {
                li.parentElement.insertBefore(_this._markerSection, li.nextSibling);
            } else {
                li.parentElement.insertBefore(_this._markerSection, li);
            }
        }
        // } else if (
        //     dragSection.dataset.group !== 'navigations'
        //     && dragSection.dataset.group !== 'footers'
        // ) {
        //     if (li.dataset.group !== 'footers') {
        //         li.parentElement.insertBefore(_this._markerSection, li.nextSibling);
        //     } else {
        //         li.parentElement.insertBefore(_this._markerSection, li);
        //     }
        // }
        // else if (e.clientY < top + (height / 2)
        //     && dragSection.dataset.group === 'navigations'
        // ) {
        //     if (li.dataset.group !== 'navigations') {
        //         var navs = this.main.querySelectorAll('li[data-group=navigations]');
        //         if (navs.length > 0) {
        //             li.parentElement.insertBefore(_this._markerSection, navs[navs.length - 1].nextSibling);
        //         } else {
        //             li.parentElement.insertBefore(_this._markerSection, li.parentElement.firstChild);
        //         }
        //     } else {
        //         li.parentElement.insertBefore(_this._markerSection, li);
        //     }
        // } else if (e.clientY < top + (height / 2)
        //     && dragSection.dataset.group === 'footers'
        // ) {
        //     if (li.dataset.group !== 'footers') {
        //         var footers = this.main.querySelectorAll('li[data-group=footers]');
        //         if (footers.length > 0) {
        //             li.parentElement.insertBefore(_this._markerSection, footers[0]);
        //         } else {
        //             li.parentElement.appendChild(_this._markerSection);
        //         }
        //     } else {
        //         li.parentElement.insertBefore(_this._markerSection, li);
        //     }
        // } else if (dragSection.dataset.group === 'navigations') {
        //     if (li.dataset.group !== 'navigations') {
        //         var navs = this.main.querySelectorAll('li[data-group=navigations]');
        //         if (navs.length > 0) {
        //             li.parentElement.insertBefore(_this._markerSection, navs[navs.length - 1].nextSibling);
        //         } else {
        //             li.parentElement.insertBefore(_this._markerSection, li.parentElement.firstChild);
        //         }
        //     } else {
        //         li.parentElement.insertBefore(_this._markerSection, li.nextSibling);
        //     }
        // } else if (dragSection.dataset.group === 'footers') {
        //     if (li.dataset.group !== 'footers') {
        //         var footers = this.main.querySelectorAll('li[data-group=footers]');
        //         if (footers.length > 0) {
        //             li.parentElement.insertBefore(_this._markerSection, footers[0]);
        //         } else {
        //             li.parentElement.appendChild(_this._markerSection);
        //         }
        //     } else {
        //         li.parentElement.insertBefore(_this._markerSection, li.nextSibling);
        //     }
        // }
    }
    /**
     * History point
     * @param li {HTMLElement}
     * @param parent {HTMLElement} is page
     * @param next {HTMLElement}
     * @public
     */
    , setPoinDragMoveSection: function(li, parent, next) {
        var _this = this;
        var nextS = li.nextSibling;

        if (next) {
            parent.insertBefore(li, next);
        } else {
            parent.appendChild(li);
        }

        _this.rebuildControl(li);
        _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(null, li.lastChild);

        var currPageObj = _this.getActivePageObject();
        var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);

        _this.setStep(function() {
            var currentPageObj = _this.getActivePageObject();
            if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                _this.changeActivePage(currPageObj, activeItem, currPageObj.id);
            }
            _this.setPoinDragMoveSection(li, parent, nextS);
        });
    }
    , _beforeAddSection: function(_this) {
        var sectionName = _this.sectionClicked.dataset.name;

        _this.removeWrapDrag(_this.getActivePageObject().getDOMSelf());

        var pageObj = _this.getActivePageObject();

        if (_this.sectionClicked) {
            pageObj.addSection(_this.sections.getSectionsByName(sectionName), _this._nextForDropped);
            builder._setControlsElement(pageObj.getPageName(), 'edit-sections');
            this.reloadGlobalScript();
            _this.convertAllImagesToSvg();
        }
    }
    , _hideSections: function() {
        var _this = this;
        _this.getDOMSelf().classList.remove('show');
        _this.body.classList.add('add-s-i-hide');
        setTimeout(function() {
            if (_this.body.classList.contains('add-s-i-hide')) {
                _this.body.classList.remove('add-s-i-hide');
            }
        }, 800);
    }

    //todo: need to move to Section
    /**
     * Start drag section by page
     * @param e
     * @param wrap
     * @private
     */
    , eventStartDragSection: function(e, wrap) {
        var _this = this;
        e.preventDefault();
        if (e.target === wrap && e.button === 0 && !_this._lockEndDrag) {
            var li = _this.findParent(wrap, ['section-item']);
            //not drug modal popup
            if (li.children[0 ].classList.contains('modal')) return;

            _this._triggerClickSectionInMain = true;

            _this._draggableSection = li;
            _this._dropX = e.clientX;
            _this._dropY = e.clientY;
            _this.documentIframe.addEventListener('mousemove', _this.listenerDocumentMousemove);
            _this.documentIframe.addEventListener('mouseup', _this.listenerDocumentMouseUp);

            _this.documentIframe.body.classList.add('cursor-grab');
            wrap.classList.add('cursor-grab');
            _this._elCurGrabbing = wrap;
        }
    }
    /**
     * Move draggable section by main if it was dragged by main
     * @param e
     * @private
     */
    , _eventMoveDragSection: function(e) {
        var _this = this;
        if (_this._triggerClickSectionInMain
            && (Math.abs(_this._dropX - e.clientX) > 15 ||
                Math.abs(_this._dropY - e.clientY) > 15 ) ) {
            if (_this._dropImg) _this._dropImg.style.display = 'none';
            var li = _this.findParent(_this.documentIframe.elementFromPoint(e.clientX, e.clientY), ['section-item']);
            if (_this._dropImg) _this._dropImg.style.display = 'block';
            if (li) {

                if (!_this._triggerMoveSectionInMain && !_this._lockEndDrag) {

                    _this._createMarkerSection();
                    _this._createSectionPreview(_this._draggableSection.dataset.img);

                    var next = _this._draggableSection.nextSibling;
                    var parent = _this._draggableSection.parentElement;
                    if (parent) {
                        parent.removeChild(_this._draggableSection);
                        if (next) {
                            parent.insertBefore(_this._markerSection, next);
                        } else {
                            parent.appendChild(_this._markerSection);
                        }
                        _this._triggerMoveSectionInMain = true;
                        li = next;
                        _this._nextPageForHistory = next;
                    }
                }

                if (li) {
                    _this._setPositionMarkerSection(e, _this._draggableSection, li);
                }
            }

            _this._dropImg.style.left = e.clientX - 105 + 'px';
            _this._dropImg.style.top = e.clientY - 10 + 'px';
        }
    }
    , isSectionDraged: function () {
        return this._triggerClickSectionInMain;
    }
    //--------------
});

ControlSectionPL2.prototype.constructor = ControlSectionPL2;
var ControlSectionSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj.dataset.group === 'popups'
        ? options.obj.querySelector('.modal-dialog') : options.obj;
    this.caller = options.caller;
    this.elementsArray = options.settingsSection;

    this._cElements = null;
    this._init();

    this.openPanelElement();
};

ControlSectionSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;
        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        this.elementsArray = this.elementsArray.map(function (el) {
            if (/\(.*\)/.test(el)) {
                return {
                    name: el.match(/^(.*)\(/)[1]
                    , customCE: el.match(/.*\(([^)]*)\)/)[1]
                    , targetObject: _this._targetObject
                };
            } else {
                return {
                    name: el
                    , targetObject: _this._targetObject
                };
            }
        });

        var cElements = new ControlElements({
            name: _this.name
            , elements: this.elementsArray
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
});

ControlSectionSettingsPL2.prototype.constructor = ControlSectionSettingsPL2;
var ControlStylePL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    ControlPanel.apply(this, arguments);

    this.name = options.name;
    this.type = 'modeOfBuilder';
    this.pageMode = 'page-mode-edit-style';

    this.optionsStyle = this.globalStyle.optionsStyle;

    this._activeMedia = this.optionsStyle.defaultActiveMedia;
    this._activeMode = this.optionsStyle.defaultActiveMode;
    this._groupArray = [];

    this._controlElements = {};

    this._createGlobalStyleControls();
    this._initControlElements();
    this._createGroupStyleSettings();
};

ControlStylePL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    name: ''
    , globalStyleControls: null
    , controlButtonOptions: {
        tag: 'li'
        , className: 'item-check d-flex justify-content-center align-items-center'
        , innerHTML: '<i class="icon-blr-mode-drop"></i>'
    }
    , _controlElements: {}

    , _activeTag: ''
    , _activeMedia: ''
    , _activeMode: ''

    , getLevel3: function () {
        return this.globalStyleControls;
    }
    , _createGlobalStyleControls: function () {
        var _this = this;
        var globalStyleControls = document.createElement('aside');
        globalStyleControls.className = 'global-style-controls supra';

        globalStyleControls.innerHTML = '<div class="title d-flex justify-content-between align-items-center">'
                + '<h3>header</h3>'
                + '<div class="media-group">'
                    + '<button data-id="mobile"><i class="icon-blr-sm-mobile"></i></button>'
                    + '<button data-id="tablet"><i class="icon-blr-sm-tablet"></i></button>'
                    + '<button data-id="desktop"><i class="icon-blr-sm-desktop"></i></button>'
                + '</div>'
            + '</div>'

            + '<div class="c-element">'
            + '</div>';

        var buttons = globalStyleControls.querySelectorAll('.media-group button');

        Array.prototype.forEach.call(buttons, function (button) {
            Core.prototype.mediaButtonsOnControlStylePL2[button.dataset.id] = button;
            if (_this.mediaButtonsOnControlStylePL2Trigger[button.dataset.id]) button.classList.add('isset');
            button.addEventListener('click', function () {
                var media = this.dataset.id;

                if (this.classList.contains('active')) {
                    this.classList.remove('active');
                    this.blur();
                    media = 'default';
                } else {
                    _this.selection(this);
                    _this.globalStyle.setMediaInStyle(media);
                }

                for (var cElement in _this._controlElements) {
                    _this._controlElements[cElement].changeValues(media, _this._activeMode);
                }

                _this._activeMedia = media;
            });
        });

        this.globalStyleControls = globalStyleControls;

        this.body.appendChild(globalStyleControls);

        $(globalStyleControls.querySelector('.c-element')).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });
    }
    , _initControlElements: function () {
        var _this = this;
        this.optionsStyle.defaultPropertiesForTags.forEach(function (opt) {
            if (_this._controlElements[opt.name]) {
                _this._controlElements[opt.name].addElements({
                    name: opt.name
                    , tag: opt.tag
                    , elements: opt.elements
                    , defaultActiveMedia: _this.optionsStyle.defaultActiveMedia
                    , defaultActiveMode: _this.optionsStyle.defaultActiveMode
                });
            } else {
                _this._controlElements[opt.name] = new ControlElements({
                    name: opt.name
                    , tag: opt.tag
                    , elements: opt.elements
                    , defaultActiveMedia: _this.optionsStyle.defaultActiveMedia
                    , defaultActiveMode: _this.optionsStyle.defaultActiveMode
                });
            }
        });
    }
    , _createGroupStyleSettings: function () {
        var _this = this;
        var div = document.createElement('div');
        div.className = this.name;
        var listTagGs = document.createDocumentFragment();
        this.optionsStyle.defaultPropertiesForTags.forEach(function (opt) {
            if (_this._groupArray.includes(opt.name)) {
                return;
            }

            _this._groupArray.push(opt.name);
            var tagGs = document.createElement('li');
            tagGs.innerHTML = opt.name;

            tagGs.addEventListener('click', _this.showGlobalStyleForTag.bind(_this, opt.name, tagGs, opt));

            listTagGs.appendChild(tagGs);
        });
        div.innerHTML = '<div class="btn-group" role="group" aria-label="...">'
                + '<button data-id="light" type="button" class="supra-btn btn-default active"><span>Light</span></button>'
                + '<button data-id="dark" type="button" class="supra-btn btn-default"><span>Dark</span></button>'
            + '</div>'
            + '<ul id="list-tag-gs" class="active nice-scroll">'
            + '</ul>';
        div.querySelector('#list-tag-gs').appendChild(listTagGs);

        var buttons = div.querySelectorAll('.btn-group button');

        Array.prototype.forEach.call(buttons, function (button) {
            button.addEventListener('click', function () {
                var element = this;
                for (var cElement in _this._controlElements) {
                    _this._controlElements[cElement].changeValues(_this._activeMedia, element.dataset.id);
                }

                _this.selection(this);
                _this._activeMode = this.dataset.id;
            });
        });

        this.getDOMSelf().appendChild(div);

        $(div.querySelector('#list-tag-gs')).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });
    }

    , showGlobalStyleForTag: function (name, tagGs, opt) {
        var _this = this;

        var cElement = this.globalStyleControls.querySelector('.c-element');
        cElement.innerHTML = '';
        var elements = this._controlElements[name].getDOMSelf().querySelectorAll('.cs-element');

        var array = [];

        Array.prototype.forEach.call(elements, function (el) {
            array.push(el);
        });

        array = array.sort(function (a, b) {
            if (a.dataset.order*1 < b.dataset.order*1) {
                return -1;
            }
            if (a.dataset.order*1 > b.dataset.order*1) {
                return 1;
            }
            return 0;
        });

        array.forEach(function (el) {
            cElement.appendChild(el);
        });

        this.globalStyleControls.classList.add('show');
        this.globalStyleControls.querySelector('h3').innerHTML = name;
        this._activeTag = name;
        this.selection(tagGs);
        _this.mediaButtonsOnControlStylePL2.desktop.classList.remove('isset');
        _this.mediaButtonsOnControlStylePL2.tablet.classList.remove('isset');
        _this.mediaButtonsOnControlStylePL2.mobile.classList.remove('isset');

        opt.elements.forEach(function (el) {
            if (el.media.desktop) {
                _this.mediaButtonsOnControlStylePL2.desktop.classList.add('isset');
            }
            if (el.media.tablet) {
                _this.mediaButtonsOnControlStylePL2.tablet.classList.add('isset');
            }
            if (el.media.mobile) {
                _this.mediaButtonsOnControlStylePL2.mobile.classList.add('isset');
            }
        });
    }
});

ControlStylePL2.prototype.constructor = ControlStylePL2;

var ControlVideoLinkSettingsPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this._valueSrc = '';

    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

ControlVideoLinkSettingsPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var valueSrc = _this._valueSrc = _this._targetObject.getAttribute('src');

        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'BaseInput'
                    , itemName: 'video'
                    , title: 'Iframe source URL'
                    , placeholder: 'https://vimeo.com/123395658'
                    , callback: function() {
                        return valueSrc || '';
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        // $(cElements).niceScroll({
        //     cursorcolor: "#555555"
        //     , cursorborder: "1px solid #555555"
        //     , autohidemode: "scroll"
        //     , hidecursordelay: 0
        // });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().video.getDOMSelf().addEventListener('custom.event', function (e) {
            var val = e.detail.val;
            var saveVal = _this._valueSrc;

            _this._setVideoLink(_this, _this._targetObject, val, saveVal, false);
        });
    }
    /**
     *
     * @private
     */
    , _setVideoLink: function(_this, DOMElement, val, saveVal, saved) {

        if (saved) {
            DOMElement.src = val;
            saved = false;
        } else {
            var id = _this._getVideoId;
            var videoDomain = _this._getVideoDomain;

            DOMElement.src = videoDomain(val) + id(val);
            saved = true;
        }

        builder.setStep(function() {
            _this._setVideoLink(_this, DOMElement, saveVal, val, saved);
        });
    }
    /**
     *
     * @private
     */
    , _getVideoId: function (url) {
        var m = url.match(/(vimeo\.com.*\/([0-9]*)|youtube\.com\/watch\?v=(.*))/);
        if (m) {
            if (m[2] !== undefined) {
                return m[2];
            }
            return m[3];
        }
        return null;
    }
    /**
     *
     * @private
     */
    , _getVideoDomain: function(url) {
        var m = url.match(/(vimeo\.com)|(youtube\.com)/);
        if (m) {
            if (m[1] !== undefined) {
                return 'https://player.vimeo.com/video/';
            }
            return 'https://www.youtube.com/embed/';
        }
    }
});

ControlVideoLinkSettingsPL2.prototype.constructor = ControlVideoLinkSettingsPL2;
var ex = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    ControlPanel.apply(this, arguments);

    this.name = options.name;
    this._targetObject = options.obj;

    this._init();
};

ex.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {

    }
});

ex.prototype.constructor = ex;
var LeftPanel = function (options) {
    if (this._selfDOM.innerHTML === '') {
        this._selfDOM.innerHTML = '<nav class="d-flex align-items-start flex-column">'
            + '<ul class="checking c-panel mb-auto">'
            + '</ul>'
            + '<ul class="media-mode">'
            + '<li id="viewing-mobile" class="viewing item-check d-flex justify-content-center align-items-center"><i class="icon-blr-lg-mobile"></i></li>'
            + '<li id="viewing-tablet" class="viewing item-check d-flex justify-content-center align-items-center"><i class="icon-blr-lg-tablet"></i></li>'
            + '<li id="viewing-desctop" class="viewing item-check d-flex justify-content-center align-items-center"><i class="icon-blr-lg-desktop"></i></li>'
            + '</ul>'
            + '<ul class="history">'
            + '<li id="redo" class="redo unactive d-flex justify-content-center align-items-center"><i class="icon-blr-lg-redo"></i></li>'
            + '<li id="undo" class="undo unactive d-flex justify-content-center align-items-center"><i class="icon-blr-lg-undo"></i></li>'
            + '</ul>'
            + '<ul class="bottom-side">'
            + '<li id="preview" class="preview d-flex justify-content-center align-items-center">' +
            '<i class="icon-blr-lg-publishing"></i>' +
            '<i class="icon-blr-lg-loader" style="visibility: hidden; height: 0; width: 0; overflow: hidden;"></i></li>'
            + '</ul>'
            + '</nav>';

        this.itemsModeViewing = [];
        var leftNavButtonsViewing = this._selfDOM.querySelectorAll('li.viewing');
        Array.prototype.forEach.call(leftNavButtonsViewing, function(element){
            this.itemsModeViewing.push(element);
        }.bind(this));

        this.itemsModeViewing[2].classList.add('active');

        this._selectionNavLeftBtnViewing();

        if (!options || options.mode !== 'load') {
            this._initButtonRotate();
            this._initChangeSizeOnModeViewing();
        }

        Core.prototype._undo = this._selfDOM.querySelector('.undo');
        Core.prototype._redo = this._selfDOM.querySelector('.redo');

        this._selectionNavUndo();
        this._selectionNavRedo();
    } else {
        this._selfDOM.querySelector('.c-panel').innerHTML = '';
    }

    this.cPanelDOM = this._selfDOM.querySelector('.c-panel');

    this.add([
        {
            name: 'sections'
            , title: 'Sections'
            , place: 'cPanelDOM'
            , class: 'ControlSectionPL2'
            , bookmark: true
            , className: 'supra active'
            , leftPanel: this
            , mode: options ? options.mode : ''
        }
        , {
            name: 'global-styles'
            , title: 'Global Style'
            , place: 'cPanelDOM'
            , class: 'ControlStylePL2'
            , bookmark: true
            , className: 'supra'
            , leftPanel: this
        }
        , {
            name: 'project-pages'
            , title: 'Project pages'
            , place: 'cPanelDOM'
            , class: 'ControlPagePL2'
            , bookmark: true
            , className: 'supra'
            , leftPanel: this
        }
    ]);

    this.setActivePanel(this.cPanels[Object.keys(this.cPanels)[0]]);

    this._showHideControlPanel();

    var _this = this;
    this.uploading = false;
    var previewBtn = this._selfDOM.querySelector('.preview');
    previewBtn.addEventListener('click', function () {
        if (_this.uploading) return;
        if (typeof download === 'function') {
            this.classList.add('no-click');
            var args = builderOptions.previewSettings;
            var data = prepareContentToDownload(_this);

            console.log(data);


            var win = window.open('', '_blank');

            var form = new FormData();
            form.append('type', 'local');
            form.append('dir', args.dir);
            form.append('data', JSON.stringify(data));

            var i = this.querySelector('i');
            i.className = 'icon-blr-lg-loader';

            _this.uploading = true;

            _this.ajax(form, 'ftpUpload', function (data) {
                try {
                    data = JSON.parse(data);
                    if (data.status === 200) {
                        var pageName = _this.getActivePageObject().getPageName();
                        if (pageName === 'index') pageName = '';
                        else pageName += '.html';
                        win.location = baseUri + data.url.substr(1) + pageName;
                    } else {
                        if (win) win.close();
                    }
                } catch (e) {
                    if (win) win.close();
                }

                setTimeout(function () {
                    i.className = 'icon-blr-lg-publishing';

                    previewBtn.classList.remove('no-click');

                    _this.uploading = false;
                }, 5000);
            }, function (xhr, msg) {
                if (win) win.close();

                setTimeout(function () {
                    i.className = 'icon-blr-lg-publishing';

                    previewBtn.classList.remove('no-click');

                    _this.uploading = false;
                }, 5000);
            });
        } else {
            var downloadButton = document.createElement('a');
            downloadButton.dataset.href = builderOptions.fullVersionSource;
            var modal = new Modal('supra-modal', 'Demo', downloadButton);
            $(modal).modal('show');
        }
    });
};

LeftPanel.prototype = Object.assign(Object.create(Core.prototype), {
    _selfDOM: document.querySelector('aside.left')
    , cPanels: {}
    , cPanelDOM: null
    , _activePanel: null
    , modeThin: false

    , setActivePanel: function (obj) {
        if (!(obj instanceof ControlPanel)) {
            throw new TypeError("Expected type of ControlPanel");
        }

        this._activePanel = obj;
    }
    , getActivePanel: function () {
        return this._activePanel;
    }
    , setCustomActivePanel: function (obj) {
        if (!(obj instanceof ControlPanel || obj === null)) {
            throw new TypeError("Expected type of ControlPanel");
        }

        this._activeCustomPanel = obj;
    }
    , getCustomActivePanel: function () {
        return this._activeCustomPanel;
    }
    , add: function (options) {
        var _this = this;
        options.forEach(function (option) {
            _this.cPanels[option.name] = new window[option.class](option);
            _this[option.place].appendChild(_this.cPanels[option.name].getControlButton());
            _this.body.appendChild(_this.cPanels[option.name].getDOMSelf());
            // $(_this.cPanels[option.name].getDOMSelf()).niceScroll({
            //     cursorcolor: "#555555"
            //     , cursorborder: "1px solid #555555"
            //     , autohidemode: "scroll"
            //     , hidecursordelay: 0
            // });
        });
    }
    , _showHideControlPanel: function() {
        var _this = this;
        // function is_touch_device() {
        //     try {
        //         document.createEvent("TouchEvent");
        //         return false;
        //     } catch (e) {
        //         return false;
        //     }
        // }
        if (
            !('ontouchstart' in window)
            && !navigator.maxTouchPoints
        ) {
            this.body.addEventListener('mousemove', _this._listenerMouseMoveOnBodyForCP.bind(_this));
        } else {
            this.body.addEventListener('touchstart', function (e) {
                if (!this.classList.contains('thin')) {
                    var right = null;
                    if (_this._activePanel.getLevel3()
                        && _this._activePanel.getLevel3().classList.contains('show')
                    ) {
                        //so not close before showing CPL3
                        right = 500;
                    } else {
                        right = _this._activePanel.getDOMSelf().getBoundingClientRect().right + 50;
                        // right = this.getBoundingClientRect().right - 10;
                    }
                    var touches = e.touches || e.changedTouches;
                    if (touches[0].clientX >= right) {
                        _this._hideControlPanel.apply(_this);
                    }
                }
            });
        }
    }
    , _listenerMouseMoveOnBodyForCP: function (e) {
        var _this = this;
        var right = null;
        if (!_this._activePanel) {
            return;
        }

        if (_this._activePanel.getLevel3()
            && _this._activePanel.getLevel3().classList.contains('show')
        ) {
            //so not close before showing CPL3
            right = 500;
        } else {
            right = _this._activePanel.getDOMSelf().getBoundingClientRect().right + 50;
            // right = this.getBoundingClientRect().right - 10;
        }
        var boundingSect = _this._activePanel.getDOMSelf().getBoundingClientRect();
        var top = boundingSect.top;
        var bottom = boundingSect.bottom;
        if (
            (e.clientX >= right || e.clientY <= top || e.clientY >= bottom)
            && !_this.modeThin
        ) {
            _this._hideControlPanel.apply(_this);
            _this.modeThin = true;
        } else if( (e.clientX <= right && e.clientY >= top && e.clientY <= bottom)
            && _this.modeThin
        ) {
            _this._showControlPanel.apply(_this);
            _this.modeThin = false;
        }
    }
    , _showControlPanel: function() {
        var _this = this;
        if (this.body.classList.contains('thin')) {
            this.body.classList.remove('thin');
            this.body.classList.add('slide-show-panel');
            setTimeout(function(){
                _this.body.classList.remove('slide-show-panel');
            }, 800);
        }
    }
    , _hideControlPanel: function() {
        var _this = this;
        if (!this.body.classList.contains('thin')
            && !_this._fixedRightSide
        ) {
            if (
                _this._activePanel
                && _this._activePanel.getLevel3()
                && _this._activePanel.getLevel3().classList.contains('show')
            ) {
                _this._activePanel.getLevel3().classList.remove('show');
            }
            this.body.classList.add('thin');
            if (window.innerWidth > 500) {
                if (
                    _this._activePanel
                    && _this._activePanel.getLevel3()
                    && _this._activePanel.getLevel3().classList.contains('show')
                ) {
                    // _this._hideSections(_this);
                    Core.prototype._fixedRightSide = false;
                }
            }
        }
    }
    , _touchHideControlPanel: function() {
        var _this = this;
        this.main.addEventListener('touchstart', function() {
            _this._hideControlPanel(_this);
        });
    }
    /**
     *
     * @private
     */
    , _selectionNavLeftBtnViewing: function() {
        var _this = this;
        this.itemsModeViewing.forEach(function(element){
            element.addEventListener('click', function(){
                _this.selection(this, '.viewing.active', 'active');
                _this.selectionModeViewing(this.id);
            });
        });
    }
    /**
     *
     * @param id
     */
    , selectionModeViewing: function(id) {
        var mode = id.replace(/viewing-/i, '');
        var wrap = this.iframe.parentElement;
        wrap.style.width = this._modeViewing[mode ].width;
        wrap.style.height = this._modeViewing[mode ].height;
        wrap.className = wrap.className.replace(/viewing-[^\s]*\s?/i, '');
        wrap.classList.add(id);

        var width = wrap.querySelector('label span.width');
        var height = wrap.querySelector('label span.height');

        width.innerHTML = this._modeViewing[mode ].width.replace('px', '');
        height.innerHTML = this._modeViewing[mode ].height.replace('px', '');
    }
    /**
     *
     * @private
     */
    , _initButtonRotate: function() {
        var parent = this.iframe.parentElement;
        var rotate = parent.querySelector('.rotate' );
        var wrap = parent;
        rotate.addEventListener('click', function() {
            var width = wrap.style.width;
            wrap.style.width = parent.style.height;
            wrap.style.height = width;

            var width = rotate.parentElement.querySelector('span.width');
            var height = rotate.parentElement.querySelector('span.height');

            width.innerHTML = wrap.style.width.replace('px', '');
            height.innerHTML = wrap.style.height.replace('px', '');

        }.bind(this));
    }
    /**
     *
     * @private
     */
    , _initChangeSizeOnModeViewing: function() {
        var wrap = this.iframe.parentElement;
        var span = wrap.querySelectorAll('label span.width, label span.height');
        Array.prototype.forEach.call(span, function(el) {
            el.addEventListener('keydown', function(e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
            });

            el.addEventListener('keyup', function(e) {
                if (this.classList.contains('width')) {
                    wrap.style.width = this.innerHTML + 'px';
                } else {
                    wrap.style.height = this.innerHTML + 'px';
                }
            });
        });
    }
    , _selectionNavUndo: function() {
        var _this = this;

        _this._undo.addEventListener('click', function() {
            _this.removeNowrapSuperStructure(_this.documentIframe);

            var activePanel = _this.getCustomActivePanel();
            if (activePanel) {
                activePanel.getDOMSelf().parentElement.removeChild(activePanel.getDOMSelf());
                _this.setCustomActivePanel(null);
            }

            var head = _this.arrayPrevStep.length - 1;
            if (head !== -1) {
                Core.prototype.triggerUndo = true;
                try {
                    _this.arrayPrevStep[head]();
                } catch (e) {
                    _this.arrayPrevStep = [];
                }
                Core.prototype.arrayPrevStep = _this.arrayPrevStep.slice(0, head);
                if (_this.arrayPrevStep.length === 0
                    && !_this._undo.classList.contains('unactive')) {
                    _this._undo.classList.add('unactive');
                }
            }
        });
    }
    , _selectionNavRedo: function() {
        var _this = this;

        _this._redo.addEventListener('click', function() {
            _this.removeNowrapSuperStructure(_this.documentIframe);

            var activePanel = _this.getCustomActivePanel();
            if (activePanel) {
                activePanel.getDOMSelf().parentElement.removeChild(activePanel.getDOMSelf());
                _this.setCustomActivePanel(null);
            }

            var head = _this.arrayNextStep.length - 1;
            if (head !== -1) {
                Core.prototype.triggerRedo = true;
                try {
                    _this.arrayNextStep[head]();
                    Core.prototype.arrayNextStep = _this.arrayNextStep.slice(0, head);
                } catch (e) {
                    Core.prototype.arrayPrevStep = [];
                    Core.prototype.arrayNextStep = [];
                    Core.prototype.triggerUndo = false;
                    Core.prototype.triggerRedo = false;
                    console.error(e);
                }
                if (_this.arrayNextStep.length === 0
                    && !_this._redo.classList.contains('unactive')) {
                    _this._redo.classList.add('unactive');
                }
            }
        });
    }
});

LeftPanel.prototype.constructor = LeftPanel;

var setCatFilterPL2 = function (options) {
    if (
        options.name === undefined
    ) {
        throw new ReferenceError ("Expected variables options.name");
    }

    var activePanel = this.leftPanel.getActivePanel();

    if (activePanel.caller === options.caller) {
        if(!activePanel.getDOMSelf().classList.contains('active'))
            activePanel.getDOMSelf().classList.add('active');
        return activePanel;
    }

    ControlPanel.apply(this, arguments);

    this._selfDOM.className += ' custom-styling supra';

    this.name = options.name;
    this._targetObject = options.obj;
    this.caller = options.caller;
    this._value = '';

    this._cElements = null;
    this._init();
    this._addEventListeners();

    this.openPanelElement();
};

setCatFilterPL2.prototype = Object.assign(Object.create(ControlPanel.prototype), {
    _init: function () {
        var _this = this;

        var cElement = document.createElement('div');
        cElement.className = 'c-element';

        var cElements = new ControlElements({
            name: _this.name
            , elements: [
                {
                    name: 'BaseInput'
                    , itemName: 'category'
                    , title: 'Enter category value'
                    , callback: function () {
                        return _this._value = _this._targetObject.dataset.category;
                    }
                }
            ]
        });

        cElement.appendChild(cElements.getDOMSelf());

        this._selfDOM.appendChild(cElement);

        this.body.appendChild(this._selfDOM);

        $(cElement).niceScroll({
            cursorcolor: "#555555"
            , cursorborder: "1px solid #555555"
            , autohidemode: "scroll"
            , hidecursordelay: 0
        });

        this._cElements = cElements;
    }
    , _addEventListeners: function () {
        var _this = this;

        this._cElements.getElements().category.getDOMSelf().querySelector('input').addEventListener('blur', function (e) {
            // var val = this.value.toLowerCase().replace(/\s/g, '-');
            var val = this.value;
            var saveVal = _this._value;
            _this._value = val;

            _this.setCategory(val, saveVal);
        });
    }
    , setCategory: function (val, saveVal) {
        var _this = this;
        _this._targetObject.dataset.category = val;

        _this.setStep(function () {
            _this.setDeadline(saveVal, val);
        });
    }
});

setCatFilterPL2.prototype.constructor = setCatFilterPL2;
var Page = function (page) {
    if (!(page instanceof Object)) {
        throw new TypeError("Expected type of Object");
    }

    if (page.id === undefined || page.name === undefined) {
        throw new ReferenceError ("Expected variables page.id and page.name");
    }

    var _this = this;

    var pageHTML = page.pageHTML || document.createElement('ul');
    this._selfDOM = pageHTML;
    var className = page.outerClass ? ' ' + page.outerClass : this._defaultStyle;
    if (!page.pageHTML) pageHTML.className = page.name + className;
    pageHTML.dataset.id = page.id;
    this.id = page.id;
    pageHTML.dataset.name = page.name;

    this.main.appendChild(pageHTML);

    this.sections = {};
    this.html = page.htmlText || '';
    this.htmlDOM = null;
    this.preloader = page.targetPO ? this.cloneObject(page.targetPO.preloader) : '';
    this.load = true;

    this._title = page.name;
    this._name = toPageName(page.name);
    this._className = replaceSpace(page.name);
    this._metaDes = page.targetPO ? page.targetPO.getMetaDes() : '';
    this._metaKey = page.targetPO ? page.targetPO.getMetaKey() : '';
    this._metaJs = page.targetPO ? page.targetPO.getJs() : '';

    if (page.mode === 'new') {
        this.addWrapDrag(pageHTML);

        if (page.id > 0) {
            this.moveChildrenToHtmlDOM(pageHTML);
        }
    } else if (page.mode === 'copy') {
        this.htmlDOM = page.targetPO.getDOMSelf().cloneNode(true);
        var liArray = this.htmlDOM.querySelectorAll('.section-item');

        if (page.targetPO.getDOMSelf() === '' && page.targetPO.htmlDOM) {
            this.htmlDOM = page.targetPO.htmlDOM.cloneNode(true);
            var buffer = document.createElement('div');
            buffer.appendChild(this.htmlDOM);
            this.html = buffer.innerHTML;
            liArray = buffer.querySelectorAll('.section-item');
        } else {
            this.moveChildrenToHtmlDOM(this.htmlDOM);
        }

        Array.prototype.forEach.call(liArray, function (li) {
            var section = li.children[0];
            _this.addSectionToDataPage(new Section({
                mode: 'copy'
                , sectionPreview: {
                    groupName: li.dataset.group
                }
                , name: section.id
                , li: li
            }), null, 'copy');
        });
        this.load = true;
    } else if (page.mode === 'load') {
        pageHTML.className = pageHTML.className.replace(/\s?page-mode-[^\s]*/g, '');
        pageHTML.classList.add('page-mode-edit-sections');
        var buffer = document.createElement('div');
        buffer.innerHTML = this.html;
        if (this.html === '') buffer = pageHTML;
        var sections = buffer.querySelectorAll('li.section-item');
        [].forEach.call(sections, function (li) {
            var section = li.children[0];
            Core.prototype.projectSections[section.id] = _this.sections[section.id] = new Section({
                 mode: 'load'
                , sectionPreview: {
                    groupName: li.dataset.group
                }
                , name: section.id
                , li: li
            });
        });
    }
};

Page.prototype = Object.assign(Object.create(Pages.prototype), {
    _selfDOM: null
    , _name: ''
    , _className: ''
    , _title: ''
    , _defaultStyle: ' light-page page-mode-edit-sections'
    , _metaDes: ''
    , _metaKey: ''
    , _metaJs: ''
    , _favicon: 'images/favicons/favicon.png'

    , getDOMSelf: function() {
        return this._selfDOM;
    }
    , getPageName: function() {
        return this._name;
    }
    , setPageName: function(newName, encode) {
        if (!encode)
            newName = htmlencode(newName);
        else newName = newName;
        this._selfDOM.classList.remove(this._className);
        this._name = newName;
        newName = replaceSpace(newName);
        this._className = newName;
        this._selfDOM.classList.add(newName);
        this._selfDOM.dataset.name = newName;
    }
    , getMetaDes: function() {
        return this._metaDes;
    }
    , setMetaDes: function(metaDes, encode) {
        if (!encode)
            this._metaDes = htmlencode(metaDes);
        else this._metaDes = metaDes;
    }
    , getMetaKey: function() {
        return this._metaKey;
    }
    , setMetaKey: function(metaKey, encode) {
        if (!encode)
            this._metaKey = htmlencode(metaKey);
        else this._metaKey = metaKey;
    }
    , getJs: function() {
        return this._metaJs;
    }
    , setJs: function(metaJs, encode) {
        // metaJs = metaJs.replace(/<script>|<\/script>/ig, '');
        if (!encode)
            this._metaJs = htmlencode(metaJs);
        else this._metaJs = metaJs;
    }
    , getPageTitle: function() {
        return this._title;
    }
    , setPageTitle: function(newTitle, encode) {
        if (!encode)
            this._title = htmlencode(newTitle);
        else this._title = newTitle;
        if (this._selfDOM.classList.contains('blr-active-page'))
            document.title = this._title;
    }
    , getPageFavicon: function() {
        return this._favicon || this.__proto__._favicon;
    }
    , setPageFavicon: function(newFavicov, encode) {
        if (!encode)
            this._favicon = htmlencode(newFavicov);
        else this._favicon = newFavicov;
        if (this._selfDOM.classList.contains('blr-active-page'))
            document.querySelector('link[rel=icon]').href = this._favicon;
    }
    /**
     * Add section to page
     * @param sectionsItem {HTMLElement} from right submenu
     * @param className {string}
     * @param defaultStyleType {string}
     * @param li {HTMLElement}
     * @param next {HTMLElement} section after new section
     */
    , addSection: function(sectionPreview, next) {
        var _this = this;
        var sectionObj = sectionPreview.get(this.sections);
        var li = sectionObj.getDOMSelf();

        _this.addSectionToDataPage(sectionObj, next);

        var section = li.children[0];

        // var position = window.getComputedStyle(section, null).getPropertyValue("position");
        // if ( (position === "fixed" || position === "absolute") && !section.classList.contains('modal') ) {
        //     builder.setPosition(section, li, position, 1095);
        //     var heightLi = window.getComputedStyle(section, null).getPropertyValue("height");
        //     li.style.height = heightLi;
        // }
        if (li.dataset.group === 'sep' || li.dataset.group === 'separators') {
            setTimeout(function () {
                // var computedStyle = window.getComputedStyle(section, null);
                // var elementStyleWidth = computedStyle.getPropertyValue("width");
                // var elementStyleTransform = computedStyle.getPropertyValue("transform");
                // var elementStyleHeight = computedStyle.getPropertyValue("height");
                //
                // li.style.position = 'absolute';
                // // li.style.width = elementStyleWidth;
                // li.style.width = '100%';
                // li.style.transform = elementStyleTransform;
                // li.style.webkitTransform = elementStyleTransform;
                // li.style.height = elementStyleHeight;
                li.style.zIndex = 1001195;

                // li.classList.add('no-transform');
            }, 100);
        }

        if (li.dataset.group === 'panels') {
            setTimeout(function () {
                li.style.zIndex = 1001265;
            }, 100);
        }

        if (li.dataset.group === 'alerts' || li.dataset.group === 'cookies') {
            setTimeout(function () {
                li.style.zIndex = 1001270;
            }, 100);
        }

        // if (li.classList.contains('nav')) {
        //     _this._selfDOM.dataset.nav = 1;
        // } else if (li.classList.contains('footer')) {
        //     _this._selfDOM.dataset.footer = 1;
        // }

        if (li.dataset.group === 'navigations') {
            li.style.position = 'static';
        }


        if (!builder.triggerImport) {
            var currPageObj = _this;
            var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);
            var parent = li.parentElement;
            var next = li.nextElementSibling;
            _this.setStep( function() {
                var currentPageObj = _this.getActivePageObject();
                if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                    _this.leftPanel.cPanels['project-pages'].changeActivePage(currPageObj, activeItem, currPageObj.id);
                }
                if (_this.activeFormModal) {
                    $(_this.activeFormModal).modal('hide');
                    _this.activeFormModal.style.display = 'none';
                }
                _this.deleteSection(li, parent, next);
            });
        }

        Core.prototype.sectionClicked = null;
    }
    /**
     *
     * @param li {HTMLElement}
     */
    , addSectionToDataPage: function(sectionObj, next, mode) {
        var li = sectionObj.getDOMSelf();
        var section = li.children[0];
        var style = li.querySelector('style');

        // while (this.sections[section.id] !== undefined) {
        //     var args = section.id.split('--');
        //     if (args[1]) {
        //         section.id = args[0] + '--' + ((args[1] * 1) + 1);
        //     } else {
        //         section.id = args[0] + '--0';
        //     }
        //
        // }
        //
        // if (section.id.split('--')[1]) {
        //     var pattern = new RegExp('#' + section.id.split('--')[0] + '(--[0-9]*)?\\s', 'gim');
        //     style.innerHTML = style.innerHTML.replace(pattern, '#' + section.id + ' ');
        // }

        Core.prototype.projectSections[section.id] = this.sections[section.id] = sectionObj;
        sectionObj.name = section.id;

        if (mode !== 'copy') {
            this._appendSection(sectionObj, li, next);
        }

        // this.rebuildControl(li);

        return li;
    }
    , _appendSection: function (sectionObj, li, next) {
        if (next) {
            this._selfDOM.insertBefore(li, next);
        } else {
            if (sectionObj.sectionPreview.groupName === 'navigations'
                && this._selfDOM.querySelector('li[data-group=navigations]')
            ) {
                var navs = this._selfDOM.querySelectorAll('li[data-group=navigations]');
                this._selfDOM.insertBefore(
                    li,
                    navs[navs.length - 1].nextSibling
                );
            } else if (sectionObj.sectionPreview.groupName === 'navigations'
                && this._selfDOM.querySelector('li')
            ) {
                this._selfDOM.insertBefore(li, this._selfDOM.querySelector('li'));
            } else if (sectionObj.sectionPreview.groupName !== 'footers'
                && this._selfDOM.querySelector('li[data-group=footers]')
            ) {
                this._selfDOM.insertBefore(li, this._selfDOM.querySelector('li[data-group=footers]'));
            } else if (sectionObj.sectionPreview.groupName === 'footers'
                && this._selfDOM.querySelector('li[data-group=footers]')
            ) {
                this._selfDOM.appendChild(li);
                // this._selfDOM.insertBefore(li, this._selfDOM.querySelector('li[data-group=footers]'));
            } else {
                this._selfDOM.appendChild(li);
            }
        }
    }
    , moveChildrenToHtmlDOM: function(page) {
        var animations = page.querySelectorAll('.aos-animate');
        Array.prototype.forEach.call(animations, function(el) {
            if (el.classList.contains('aos-animate')) {
                el.classList.remove('aos-animate')
            }
        });
        var vides = page.querySelectorAll('.bg-video');
        if (vides) {
            Array.prototype.forEach.call(vides, function (vide, indx) {
                if ($(vide).data('vide')) {
                    $(vide).data('vide').destroy();
                } else {
                    var video = vide.querySelector('video');
                    if (video) video.pause();
                }
            });
        }
        this.html = page.innerHTML;
        var childrenPage = document.createDocumentFragment();
        while (page.children.length > 0) {
            childrenPage.appendChild(page.children[0]);
        }
        this.htmlDOM = childrenPage;
        this.load = false;
    }
    /**
     *
     * @param li {HTMLElement} current section
     * @param parent {HTMLElement} page
     * @param next {HTMLElement} next section
     */
    , deleteSection: function(li, parent, next, mode) {
        var _this = this;
        var section = li.children[0];
        var sectionGroup = li.dataset.group;

        if (li.classList.contains('nav')) {
            _this._selfDOM.dataset.nav = 0;
        } else if (li.classList.contains('footer')) {
            _this._selfDOM.dataset.footer = 0;
        }

        var formConfirms = null;
        var modals = {};
        var form = section.querySelector('form');
        if (form) {
            // formConfirms = _this.forms[section.id];
            // if (_this.forms[section.id].popupsForForm) {
            //     for (var popup in builder.forms[section.id].popupsForForm) {
            //         var modalId = builder.forms[section.id].popupsForForm[popup];
            //         var modal = document.getElementById(modalId);
            //         modals[popup] = modal;
            //         builder.modalFormContainer.removeChild(modal);
            //     }
            // }

            delete Core.prototype.forms[section.id];
        }

        var parent = parent || li.parentElement;
        var next = next || li.nextElementSibling;

        var currPageObj = _this.getActivePageObject();
        var activeItem = _this.leftPanel.cPanels['project-pages'].getActivePageItem(currPageObj.id);

        _this.setStep( function() {

            var currentPageObj = _this.getActivePageObject();
            if (currPageObj && currPageObj.id !== currentPageObj.id ) {
                _this.leftPanel.cPanels['project-pages'].changeActivePage(currPageObj, activeItem, currPageObj.id);
                currentPageObj = _this.getActivePageObject();
            }

            _this.removeWrapDrag(currentPageObj.getDOMSelf());
            if (next) {
                parent.insertBefore(li, next);
            } else {
                parent.appendChild(li);
            }

            Core.prototype.projectSections[section.id] = _this.sections[section.id] = new Section({
                mode: 'load'
                , sectionPreview: {
                    groupName: li.dataset.group
                }
                , name: section.id
                , li: li
            });

            _this.rebuildControl(li);
            _this._refreshParallax(li);
            _this._reloadVideoBg(li, 'run');
            _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(null, li.lastChild);
            if (formConfirms) {
                _this.forms[section.id] = formConfirms;
                if (Object.keys(modals).length > 0) {
                    for (var popup in modals) {
                        _this.modalFormContainer.appendChild(modals[popup]);
                    }
                }
            }

            _this.setStep(function () {
                var currPageObj = _this.getActivePageObject();
                if (currentPageObj && currentPageObj.id !== currPageObj.id ) {
                    _this.leftPanel.cPanels['project-pages'].changeActivePage(currentPageObj, activeItem, currentPageObj.id);
                }
                currentPageObj.deleteSection(li, currentPageObj.getDOMSelf(), null, mode);
            });
        });

        //for popup
        if (section.classList.contains('modal')) {
            var cThumb = builder.popupThumb.querySelector('.container-thumb');
            builder.windowIframe.jQuery(section).modal('hide');
            var item = builder.popupThumb.querySelector('[data-target="#' + section.id + '"]');
            cThumb.removeChild(item);
            // if (cThumb.children.length === 0) {
            //     _this.popupThumb.classList.remove('collapse-thumb');
            // }
        }

        //for alert
        if (section.classList.contains('modal-alert')) {
            var item = builder.popupThumb.querySelector('[data-target="#' + section.id + '"]');
            builder.popupThumb.querySelector('.container-thumb').removeChild(item);
        }

        //for panel
        if (section.classList.contains('modal-panel')) {
            var item = builder.popupThumb.querySelector('[data-target="#' + section.id + '"]');
            builder.popupThumb.querySelector('.container-thumb').removeChild(item);
        }

        if (
            section.classList.contains('modal')
            || section.classList.contains('modal-alert')
            || section.classList.contains('modal-panel')
        ) {
            var index = 0;
            builder.popupThumbArray.forEach( function (el, indx) {
                if (el.id === section.id) {
                    index = indx;
                    return index;
                }
            } );

            builder.popupThumbArray.splice( index, 1 );

            if (builder.popupThumbArray.length < 1) {
                builder.popupThumb.classList.remove('collapse-thumb');
            }
        }

        parent.removeChild(li);

        delete Core.prototype.projectSections[section.id];
        delete _this.sections[section.id];

        if (this._selfDOM.innerHTML.trim() === '' && mode !== 'replace') {
            this.addWrapDrag(this.getActivePageObject().getDOMSelf());
        }
    }
    , extractContent: function() {
        var _this = this;
        if (_this.load) {
            var buffer = document.createElement('div');
            buffer.innerHTML = _this.html;
            _this.moveChildrenToHtmlDOM(buffer);
            _this.load = false;
            _this._selfDOM.appendChild(_this.htmlDOM);
            _this.clearGalleryOnPage(_this._selfDOM);
            _this.reloadScript(_this._selfDOM);
            _this.convertAllImagesToSvg();
        } else {
            _this._selfDOM.appendChild(_this.htmlDOM);
            this.reloadGlobalScript();
            _this.convertAllImagesToSvg();
        }

        if (_this._selfDOM.innerHTML === '') _this.addWrapDrag(_this._selfDOM);
    }
});

Page.prototype.constructor = Page;
var Sections = function (sectionsPreview) {
    this.sectionsPreview = sectionsPreview;

    this.initSection();
};

Sections.prototype = Object.assign(Object.create(Core.prototype), {
    sectionsPreview: null
    , sections: {}

    , initSection: function () {
        var _this = this;
        for ( var sG in this.sectionsPreview) {
            this.sectionsPreview[sG].sections.forEach(function (section) {
                _this.sections[section.name] = new SectionPreview(Object.assign(section, {
                    groupName: sG
                    , overallJs: _this.sectionsPreview[sG].overallJs || ''
                }));
            });
        }
    }

    , getSectionsGroupList: function () {
        var sectionsGroupsList = [];
        for ( var sG in this.sectionsPreview) {
            sectionsGroupsList.push({
                key: sG
                , name: this.sectionsPreview[sG].name
            });
        }

        return sectionsGroupsList;
    }
    , getSectionsByGroup: function (groupName) {
        var list = [];
        for (var name in this.sections) {
            if (this.sections[name].groupName === groupName) {
                list.push(this.sections[name]);
            }
        }
        return list;
    }
    , getSectionsByName: function (name) {
        return this.sections[name];
    }
});

Sections.prototype.constructor = Sections;
var Style = function () {

    this.loadFromDefault();

    this._createListenerForChangeStyle();
    this._createListenerForChangeSectionStyle();
};

Style.prototype = Object.assign(Object.create(Core.prototype), {
    optionsStyle: null
    , _styleDOM: null
    , loadFromDefault: function () {
        this.optionsStyle = this.cloneObject(builderOptions.globalStyle);
    }
    , setOptionsStyle: function (optionsStyle) {
        this.optionsStyle = optionsStyle;
    }
    , init: function () {
        var _this = this;
        this.loadFromDefault();

        Array.prototype.forEach.call(this.main.children, function(child){
            if (child.tagName === 'STYLE') {
                _this._styleDOM = child;
                return;
            }
        });

        var styleDefaultTrigger = false;
        var styleDesktopTrigger = false;
        var styleTabletTrigger = false;
        var styleMobileTrigger = false;

        var styleDefault = '/* default */\n';
        var styleDesktop = '@media all and (' + _this.optionsStyle.mediaResolution.desktop + ') {\n';
        var styleTablet = '@media all and (' + _this.optionsStyle.mediaResolution.tablet + ') {\n';
        var styleMobile = '@media all and (' + _this.optionsStyle.mediaResolution.mobile + ') {\n';
        _this.builderStyle.innerHTML = '/* default */\n';

        this.optionsStyle.defaultPropertiesForTags.forEach(function (item) {
            ['light', 'dark'].forEach(function (mode) {
                var itemTags = item.tag;
                if (!Array.isArray(item.tag)) {
                    itemTags = [itemTags];
                }

                var tag = '';
                var tagBtn = '';
                var oppositeMode = mode === 'light' ? 'dark' : 'light';

                itemTags.forEach(function (itemTag, indx) {
                    var prefix = indx > 0 ? ', ' : '';
                    if (itemTag === 'body') {
                        // tag += 'ul.' + mode + '-page, ul.' + oppositeMode + '-page .' + mode + ', ul.'
                        //     + mode + '-page .' + oppositeMode + ' .' + mode;
                        tag += '.' + mode + '-page';
                    } else if (/preloader/.test(itemTag)) {
                        tag += prefix + '.' + mode + '-page ' + itemTag;
                        tagBtn += prefix + '#modal-container .modal-dialog.' + mode + '-page ' + itemTag.replace(/preloader/, 'prev-preload .choice-element');
                    } else if (
                        _this.optionsStyle.sections.find(function (val) {
                            if (itemTag.match(new RegExp("^" + val))) {
                                return true;
                            }
                            return false;
                        })
                    ) {
                        _this.optionsStyle.sections.forEach(function (val) {
                            if (itemTag.match(new RegExp("^" + val))) {
                                tag += prefix + itemTag.replace(new RegExp('(' + val + ')'), '$1.' + mode);
                            }
                        });
                    } else {
                        tag += prefix + '.' + oppositeMode + ' ' + itemTag.replace(/([^:\s]*)/, '$1.' + mode) + ', '
                            + '.' + mode + ' ' + itemTag + ', .' + oppositeMode + ' .' + mode + ' ' + itemTag + ', '
                            + itemTag.replace(/([^:\s]*)/, '$1.' + mode);
                        tagBtn += prefix + '.' + mode + ' .cs-element.custom-buttons .wrapper ' + itemTag;
                    }
                });

                styleDefault += tag + ' {\n';

                var temporarilyStyleDesktop = '\t' + tag + ' {\n';
                var temporarilyStyleTablet = '\t' + tag + ' {\n';
                var temporarilyStyleMobile = '\t' + tag + ' {\n';

                var temporarilyStyleDesktopTrigger = false;
                var temporarilyStyleTabletTrigger = false;
                var temporarilyStyleMobileTrigger = false;

                if (tagBtn !== '') {
                    _this.builderStyle.innerHTML += tagBtn + ' {\n';
                }

                tag = addSlashes(tag);
                tagBtn = tagBtn !== '' ? addSlashes(tagBtn) : '';

                item.elements.forEach(function (element) {
                    var properties = element.property;
                    if (!Array.isArray(element.property)) {
                        properties = [properties];
                    }
                    properties.forEach(function (property, indx) {
                        if (element.media.default) {
                            var vd = element.media.default[mode].value;
                            if (vd === '' || vd === '-') return;
                            // if property is like coordinates
                            if (properties.length > 1 && vd.split('').length > 1) vd = vd.split('')[indx];
                            //if property is exists like image background and gradient background
                            if (new RegExp(tag + '[\\s\\S]*?\\t' + property + ':', 'i').test(styleDefault)) {
                                styleDefault = styleDefault.replace(new RegExp('(' + tag + '[\\s\\S]*?\\t' + property + ':\\s)[^;]*;'), '$1' + vd + ';');
                            } else {
                                styleDefault += '\t' + property + ': ' + vd + ';\n';
                            }

                            //for viewing on Buttons settings
                            if (tagBtn !== '' && new RegExp(tagBtn + '[\\s\\S]*?\\t' + property + ':', 'i').test(_this.builderStyle)) {
                                _this.builderStyle.innerHTML = _this.builderStyle.innerHTML.replace(new RegExp('(' + tagBtn + '[\\s\\S]*?\\t' + property + ':\\s)[^;]*;'), '$1' + vd + ';');
                            } else if (tagBtn !== '') {
                                _this.builderStyle.innerHTML += '\t' + property + ': ' + vd + ';\n';
                            }
                            styleDefaultTrigger = true;
                        }
                        if (element.media.desktop) {
                            var vde = element.media.desktop[mode].value;
                            if (vde === '' || vde === '-') return;
                            if (properties.length > 1 && vde.split('').length > 1) vde = vde.split('')[indx];
                            if (new RegExp(tag + '[\\s\\S]*?\\t' + property + ':', 'i').test(temporarilyStyleDesktop)) {
                                temporarilyStyleDesktop = temporarilyStyleDesktop.replace(new RegExp('(' + tag + '[\\s\\S]*?\\t' + property + ':\\s)[^;]*;'), '$1' + vde + ';');
                            } else {
                                temporarilyStyleDesktop += '\t' + property + ': ' + vde + ';\n';
                            }
                            styleDesktopTrigger = true;
                            temporarilyStyleDesktopTrigger = true;
                        }
                        if (element.media.tablet) {
                            var vt = element.media.tablet[mode].value;
                            if (vt === '' || vt === '-') return;
                            if (properties.length > 1 && vt.split('').length > 1) vt = vt.split('')[indx];
                            if (new RegExp(tag + '[\\s\\S]*?\\t' + property + ':', 'i').test(temporarilyStyleTablet)) {
                                temporarilyStyleTablet = temporarilyStyleTablet.replace(new RegExp('(' + tag + '[\\s\\S]*?\\t' + property + ':\\s)[^;]*;'), '$1' + vt + ';');
                            } else {
                                temporarilyStyleTablet += '\t' + property + ': ' + vt + ';\n';
                            }
                            styleTabletTrigger = true;
                            temporarilyStyleTabletTrigger = true;
                        }
                        if (element.media.mobile) {
                            if (item.name === 'H1') {
                                var c =0;
                            }
                            var vm = element.media.mobile[mode].value;
                            if (vm === '' || vm === '-') return;
                            if (properties.length > 1 && vm.split('').length > 1) vm = vm.split('')[indx];
                            if (new RegExp(tag + '[\\s\\S]*?\\t' + property + ':', 'i').test(temporarilyStyleMobile)) {
                                temporarilyStyleMobile = temporarilyStyleMobile.replace(new RegExp('(' + tag + '[\\s\\S]*?\\t' + property + ':\\s)[^;]*;'), '$1' + vm + ';');
                            } else {
                                temporarilyStyleMobile += '\t' + property + ': ' + vm + ';\n';
                            }
                            styleMobileTrigger = true;
                            temporarilyStyleMobileTrigger = true;
                        }
                    });
                });

                styleDefault += '}\n';

                if (temporarilyStyleDesktopTrigger)
                    styleDesktop += temporarilyStyleDesktop + '\t}\n';

                if (temporarilyStyleTabletTrigger)
                    styleTablet += temporarilyStyleTablet + '\t}\n';

                if (temporarilyStyleMobileTrigger)
                    styleMobile += temporarilyStyleMobile + '\t}\n';

                if (tagBtn !== '') {
                    _this.builderStyle.innerHTML += '}\n';
                }
            });
        });

        styleDefault += '/* end default */\n';
        styleDesktop += '}\n';
        styleTablet += '}\n';
        styleMobile += '}\n';

        var style = '';

        if (styleDefaultTrigger) {
            style += styleDefault;
        }
        if (styleDesktopTrigger) {
            style += styleDesktop;
            // this.mediaButtonsOnControlStylePL2.desktop.classList.add('isset');
        }
        if (styleTabletTrigger) {
            style += styleTablet;
            // this.mediaButtonsOnControlStylePL2.tablet.classList.add('isset');
        }
        if (styleMobileTrigger) {
            style += styleMobile;
            // this.mediaButtonsOnControlStylePL2.mobile.classList.add('isset');
        }

        _this._styleDOM.innerHTML = style;
    }
    , load: function (optionsStyle) {
        var _this = this;
        Array.prototype.forEach.call(this.main.children, function(child){
            if (child.tagName === 'STYLE') {
                _this._styleDOM = child;
                return;
            }
        });

        _this.setOptionsStyle(optionsStyle);
    }
    , setMediaInStyle: function (media) {
        if (this._checkMediaInStyle(media)) {
            return;
        }

        this._styleDOM.innerHTML += '@media all and (' + this.optionsStyle.mediaResolution[media] + ') {\n}\n';
    }
    , _checkMediaInStyle: function (media) {
        return !!this._styleDOM.innerHTML.match(
            new RegExp('@media all and \\(' + this.optionsStyle.mediaResolution[media] + '\\)')
        );
    }
    , _createListenerForChangeStyle: function () {
        document.addEventListener('globalStyle.change', function (e) {
            this.change(e.detail);
        }.bind(this));
    }
    , _createListenerForChangeSectionStyle: function () {
        document.addEventListener('sectionStyle.change', function (e) {
            this.changeSectionStyle(e.detail);
        }.bind(this));
    }
    , change: function (args) {
        var _this = this;
        if (
            args.tag === null || args.tag === undefined
        ) {
            throw new ReferenceError ("Expected variables tag from options.js");
        }

        var media = args.media === 'default' ? '/\\* default \\*/' : this.optionsStyle.mediaResolution[args.media];

        var itemTags = args.tag;
        if (!Array.isArray(args.tag)) {
            itemTags = [itemTags];
        }

        var tag = '';
        var tagBtn = '';
        var oppositeMode = args.mode === 'light' ? 'dark' : 'light';

        itemTags.forEach(function (itemTag, indx) {
            var prefix = indx > 0 ? ', ' : '';
            if (itemTag === 'body') {
                // tag += 'ul.' + args.mode + '-page, ul.' + oppositeMode + '-page .' + args.mode + ', ul.'
                //     + args.mode + '-page .' + oppositeMode + ' .' + args.mode;
                tag += '.' + args.mode + '-page';
            } else if (/preloader/.test(itemTag)) {
                tag += prefix + '.' + args.mode + '-page ' + itemTag;
                tagBtn += prefix + '#modal-container .modal-dialog.' + args.mode + '-page ' + itemTag.replace(/preloader/, 'prev-preload .choice-element');
            } else if (
                _this.optionsStyle.sections.find(function (val) {
                    if (itemTag.match(new RegExp("^" + val))) {
                        return true;
                    }
                    return false;
                })
            ) {
                _this.optionsStyle.sections.forEach(function (val) {
                    if (itemTag.match(new RegExp("^" + val))) {
                        tag += prefix + itemTag.replace(new RegExp('(' + val + ')'), '$1.' + args.mode);
                    }
                });
            } else {
                tag += prefix + '.' + oppositeMode + ' ' + itemTag.replace(/([^:\s]*)/, '$1.' + args.mode) + ', '
                    + '.' + args.mode + ' ' + itemTag + ', .' + oppositeMode + ' .' + args.mode + ' ' + itemTag + ', '
                    + itemTag.replace(/([^:\s]*)/, '$1.' + args.mode);
                tagBtn += prefix + '.' + args.mode + ' .cs-element.custom-buttons .wrapper ' + itemTag;
            }
        });

        tag = addSlashes(tag);
        tagBtn = addSlashes(tagBtn);

        var conditionNone =
            // args.value === 'none' || args.value === "'none'" ||
            args.value === "inherit"
            || ( /rgba\(0, 0, 0, 0\)/.test(args.value) && !/gradient/.test(args.value) )
            || args.value === "0 0 0 0" || args.value === "" || args.value === '-' || args.value === "'-'";

        var patterndProperty = args.property;
        if (args.property === 'background-image') patterndProperty = '(?:background-image|background|background-color)';
        if (args.property === 'background-color') patterndProperty = '(?:background-image|background|background-color)';

        var pattern = new RegExp( '((' + media + '[\\s\\S]*?' + tag + '\\s*{[\\s\\S]*?(}[\\s\\S]*?)?\\t)' + patterndProperty + ':\\s*)([^;]*)', 'im');
        var pattern2 = new RegExp( '(' + media + '[\\s\\S]*?' + tag + '\\s*{[\\n]*)([\\s\\S]*?})', 'im');
        var patternBtn = new RegExp( '((/\\* default \\*/[\\s\\S]*?' + tagBtn + '\\s*{[\\s\\S]*?(}[\\s\\S]*?)?\\t)' + patterndProperty + ':\\s*)([^;]*)', 'im');
        var pattern2Btn = new RegExp( '(/\\* default \\*/[\\s\\S]*?' + tagBtn + '\\s*{[\\n]*)([\\s\\S]*?})', 'im');
        if (
            !!this._styleDOM.innerHTML.match(pattern)
            && this._styleDOM.innerHTML.match(pattern)[3] === undefined
            && !args.valueLikeDefault
            && !conditionNone
        ) {
            this._styleDOM.innerHTML = this._styleDOM.innerHTML.replace(pattern, '$2' + args.property + ': ' + args.value);
            this.builderStyle.innerHTML = this.builderStyle.innerHTML.replace(patternBtn, '$2' + args.property + ': ' + args.value);
        } else if (args.valueLikeDefault || conditionNone) {
            pattern = new RegExp( '(' + media + '[\\s\\S]*?' + tag + '\\s*{[\\s\\S]*?)\\t' + args.property + ':\\s*([^;]*);\\n', 'im');
            this._styleDOM.innerHTML = this._styleDOM.innerHTML.replace(pattern, '$1');
            this.builderStyle.innerHTML = this.builderStyle.innerHTML.replace(patternBtn, '$1');
            pattern = new RegExp( media + '[\\s\\S]*?' + tag + '\\s*{[\\s\\S]*?\\w[\\s\\S]*?}', 'im');
            if (!this._styleDOM.innerHTML.match(pattern)) {
                this._styleDOM.innerHTML = this._styleDOM.innerHTML.replace(
                    new RegExp( '(' + media + '[\\s\\S]*?)\\t' + tag + '\\s*{[\\s\\S]*?}\\n', 'im'), '$1');
                this.builderStyle.innerHTML = this.builderStyle.innerHTML.replace(
                    new RegExp( '(' + media + '[\\s\\S]*?)\\t' + tagBtn + '\\s*{[\\s\\S]*?}\\n', 'im'), '$1');
            }
        } else if (!!this._styleDOM.innerHTML.match(pattern2) && !conditionNone) {
            this._styleDOM.innerHTML = this._styleDOM.innerHTML.replace(pattern2, '$1\t'
                + args.property + ': ' + args.value + ';\n' + '$2'
            );
            this.builderStyle.innerHTML = this.builderStyle.innerHTML.replace(pattern2Btn, '$1\t'
                + args.property + ': ' + args.value + ';\n' + '$2'
            );
        } else {
            pattern = new RegExp( '(' + media + '[\\s\\S]*?{)', 'im');
            this._styleDOM.innerHTML = this._styleDOM.innerHTML.replace(
                pattern
                , '$1' + '\n\t' + tag + ' {\n'
                    + '\t\t' + args.property + ': ' + args.value + ';\n'
                    + '\t}'
            );
            this.builderStyle.innerHTML = this.builderStyle.innerHTML.replace(
                pattern
                , '$1' + '\n\t' + tag + ' {\n'
                + '\t\t' + args.property + ': ' + args.value + ';\n'
                + '\t}'
            );
        }

    }
    , changeSectionStyle: function (args) {
        var section = args.section || args.li.children[0];
        var style = args.li.querySelector('style');
        var tag = args.tag || '';
        var specialTag = addSlashes(tag);
        var pattern = new RegExp( '(' + section.id + '\\s*' + specialTag + '\\s*{[\\s\\S]*?(}[\\s\\S]*?)?)' + args.property + ':\\s*([^;]*)', 'im');
        var patternRecord = new RegExp('(' + section.id + '\\s*' + specialTag + '\\s*{)', 'im');

        var conditionNone = args.value === 'none' || args.value === "'none'" || args.value === "inherit"
            || ( /rgba\(0, 0, 0, 0\)/.test(args.value) && !/gradient/.test(args.value) )
            || args.value === "0 0 0 0" || args.value === "" || args.value === '-' || args.value === "'-'";

        if (!!style.innerHTML.match(pattern) && !conditionNone) {
            style.innerHTML = style.innerHTML.replace(pattern, '$1' + args.value);
        } else if (conditionNone) {
            pattern = new RegExp( '(' + section.id + '[\\s\\S]*?' + specialTag + '\\s*{[\\s\\S]*?)[\\t\\s]{0,4}' + args.property + ':\\s*([^;]*);\\n?', 'im');
            style.innerHTML = style.innerHTML.replace(pattern, '$1');
        } else if (patternRecord.test(style.innerHTML)) {
            style.innerHTML = style.innerHTML.replace(patternRecord, '$1\n\t' + args.value + ';');
        } else {
            tag = tag !== '' ? tag + ' ' : tag;
            style.innerHTML += '\n#' + section.id + ' ' + tag + '{\n'
                + '\t' + args.value + ';\n'
                + '}';
        }
    }
});

Style.prototype.constructor = Style;
var AOSSettings = function (Obj, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-clapboard', Obj, x, optClass);
};

AOSSettings.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass) {
        var li = this.findParent(Obj, ['section-item', 'modal-dialog']);
        var innerObj = Obj.querySelector(optClass);
        new ControlAOSSettingsPL2({
            name: Obj.tagName + ' animation'
            , title: Obj.tagName + ' animation'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , li: li
            , caller: btn
        });
    }
});

AOSSettings.prototype.constructor = AOSSettings;

var BgSection = function (li, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-section-bg', li, x, optClass);
};

BgSection.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li, x, btn, optClass) {
        var innerObj = li.querySelector(optClass);
        if (li.dataset.group === 'navigations') {
            new ControlBgNavPL2({
                name: 'Navigation background'
                , title: 'Navigation background'
                , closeButton: true
                , obj: this.findParent(li, ['section-item'])
                , caller: btn
                , innerObj: innerObj
            });
        } else {
            new ControlBgSectionsPL2({
                name: 'Section background'
                , title: 'Section background'
                , closeButton: true
                , obj: this.findParent(li, ['section-item'])
                , caller: btn
                , innerObj: innerObj
            });
        }
    }
});

BgSection.prototype.constructor = BgSection;

var CodeEditor = function (li) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-code', li);
};

CodeEditor.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li) {
        var modal = new Modal('supra-modal', 'CodeEditor', this.findParent(li, ['section-item']));
        $(modal).modal('show');
    }
});

CodeEditor.prototype.constructor = CodeEditor;

var ConstructorForm = function (Obj) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-form', Obj);
};

ConstructorForm.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj) {
        var modal = new Modal('supra-modal', 'ConstructorForm', Obj);
        $(modal).modal('show');
    }
});

ConstructorForm.prototype.constructor = ConstructorForm;

var Copy = function (li) {
    var unactive = '';
    if (li.classList.contains('nav') || li.classList.contains('footer')) unactive = ' unactive';
    return this._button(this, 'supra-btn btn-control-1' + unactive, 'icon-blr-copy', li);
};

Copy.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li) {
        var _this = this;
        li = this.findParent(li, ['section-item']);
        if (!li.classList.contains('nav') && !li.classList.contains('footer')) {
            if (li.querySelector('.spr-gallery')) {
                var cloneSection = this.cloneOwlGallery( li );
                this.reloadScript( li );
            } else {

                var cloneSection = li.cloneNode(true);
                li.parentNode.insertBefore(cloneSection, li.nextSibling);
            }

            var bg = cloneSection.querySelector('.parallax');
            if (bg) {
                setTimeout(function () {
                    _this._refreshParallax(cloneSection);
                }, 100);
            }

            var pageObj = this.getActivePageObject();

            this.setStep(function () {
                pageObj.deleteSection(cloneSection);
            });

            //TODO: this crutch need to refactoring
            this.uniqueSectionID(pageObj, cloneSection);

            //need to be first addSectionToDataPage for correct showing section id
            pageObj.addSectionToDataPage(new Section({
                mode: 'copy'
                , sectionPreview: {
                    groupName: cloneSection.dataset.group
                }
                , name: cloneSection.children[0].id
                , li: cloneSection
            }), null, 'copy');
            this.reloadGlobalScript();
            _this.convertAllImagesToSvg();
            this.rebuildControl(cloneSection);

            //for popup
            if (cloneSection.children[0].classList.contains('modal')) {
                this.createPopupThumb(cloneSection.children[0]);
                cloneSection.removeAttribute('style');
                cloneSection.children[0 ].style.display = 'none';
                cloneSection.children[0].classList.remove('show');
                builder.setControlsElementOnSection( cloneSection, cloneSection, 'edit-sections', false );
            }

            //for panel
            if (cloneSection.children[0].classList.contains('modal-panel')) {
                cloneSection.children[0].classList.remove('show');
                this.createPopupThumb(cloneSection.children[0]);
                builder.setControlsElementOnSection( cloneSection, cloneSection, 'edit-sections', false );
                _this.reloadScript(cloneSection);
            }

            //for alert
            if (cloneSection.children[0].classList.contains('modal-alert')) {
                cloneSection.children[0].classList.remove('show');
                this.createPopupThumb(cloneSection.children[0]);
                builder.setControlsElementOnSection( cloneSection, cloneSection, 'edit-sections', false );
                _this.reloadScript(cloneSection);
            }

            //TODO: check is this need at present
            var form = cloneSection.querySelector('form');
            if (form) {
                this.addNewForm(form, cloneSection.children[0], li.children[0].id);
            }

            var maps = cloneSection.querySelectorAll('.g-map');
            if (maps) {
                Array.prototype.forEach.call(maps, function(map){
                    var oldId = map.id;
                    var id = _this.addNewGMap(map, cloneSection.children[0]);
                    _this.changeIdGMapInScript(cloneSection.querySelector('script'), oldId, id);
                    _this.reloadScript(cloneSection.parentElement);
                });
            }

            if (cloneSection.children[0].classList.contains('counter-up')) {
                this.changeIdCountUpInScript(
                    cloneSection.querySelector('script'), li.children[0].id, cloneSection.children[0].id
                );
            }

            if (cloneSection.children[0].querySelector('.circular-chart')) {
                this.changeIdCircularPlayInScript(
                    cloneSection.querySelector('script'), li.children[0].id, cloneSection.children[0].id
                );
            }

            var countDowns = cloneSection.querySelectorAll('.countdown');
            if (countDowns) {
                Array.prototype.forEach.call(countDowns, function(countDown){
                    var oldId = countDown.id;
                    var id = _this.addNewCountDown(countDown, cloneSection.children[0]);
                    _this.changeIdCountDownInScript(cloneSection.querySelector('script'), oldId, id);
                    _this.reloadScript(cloneSection.parentElement);
                });
            }

            var instafeeds = cloneSection.querySelectorAll('.instafeed');
            if (instafeeds) {
                Array.prototype.forEach.call(instafeeds, function(instafeed){
                    var oldId = instafeed.id;
                    var id = _this.addNewInstafeed(instafeed, cloneSection.children[0]);
                    _this.changeIdInstafeedInScript(cloneSection.querySelector('script'), oldId, id);
                    _this.reloadScript(cloneSection.parentElement);
                });
            }

            var twitterfeeds = cloneSection.querySelectorAll('.twitterfeed');
            if (twitterfeeds) {
                Array.prototype.forEach.call(twitterfeeds, function(twitterfeed){
                    var oldId = twitterfeed.id;
                    var id = _this.addNewTwitterfeed(twitterfeed, cloneSection.children[0]);
                    _this.changeIdTwitterfeedInScript(cloneSection.querySelector('script'), oldId, id);
                    _this.reloadScript(cloneSection.parentElement);
                });
            }

            var navsTabs = cloneSection.querySelectorAll('.nav-tabs');
            if (navsTabs) {
                Array.prototype.forEach.call(navsTabs, function (navTabs, indx) {
                    _this.copySectionWithNavTab(navTabs, indx, cloneSection);
                });
            }

            var accordions = cloneSection.querySelectorAll('.accordion');
            if (accordions) {
                Array.prototype.forEach.call(accordions, function (accordion, indx) {
                    _this.copySectionWithAccordion(accordion, indx, cloneSection);
                });
            }

            this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(null, cloneSection.lastChild);
            //if (AOS) AOS.refresh();
            if (this.windowIframe.AOS) this.windowIframe.AOS.refresh();
        }
    }
});

Copy.prototype.constructor = Copy;

var CopyElement = function (Obj) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-copy', Obj);
};

CopyElement.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj) {
        var wrap = this.findParent(Obj, ['buttons-control', 'buttons-control-form']);
        var clone = wrap ? wrap.cloneNode(true) : Obj.cloneNode(true);
        wrap = wrap ? wrap : Obj;
        var owlItem = this.findParent(Obj, ['owl-item']);
        var nav = this.findParent(Obj, ['nav']);
        var navTabs = this.findParent(Obj, ['nav-tabs']);
        var accordion = this.findParent(Obj, ['accordion']);
        var li = this.findParent(Obj, ['section-item', 'modal-dialog']);
        var masonryFilter = this.findParent(Obj, ['masonry-filter']);

        if (owlItem &&
            ( Obj.classList.contains('item')
                || ( owlItem.children[0].classList && owlItem.children[0].classList.contains('item-img') )
            )
        ) {
        // if (owlItem) {
            var script = li.querySelector('script');
            var owl = this.findParent(owlItem, ['spr-gallery']);

            var position = this._getPositionInGallery(owlItem, owl);
            var newOwlItem = owlItem.children[0].cloneNode(true);
            if (script.innerHTML.search(/magnificPopup/m) !== -1) {
                this.windowIframe.jQuery(owl).magnificPopup({
                    delegate: 'a:not(.external)', // the selector for gallery item
                    type: 'image',
                    gallery: {
                        enabled: true
                    },
                    image: {
                        titleSrc: function (item) {
                            return item.el.find('span.caption').text();
                        }
                    }
                });
            }
            var $owl = this.windowIframe.jQuery(owl);
            $owl.trigger(
                'add.owl.carousel'
                , [this.windowIframe.jQuery(newOwlItem), position]
            );
            setTimeout(function () {
                $owl.trigger('refresh.owl.carousel');
            }, 500);

            clone = newOwlItem;
            if ( owlItem.children[0].classList && owlItem.children[0].classList.contains('item-img') ) {
                clone = newOwlItem.querySelector('.item-img');
            }
        } else if (Obj.classList.contains('g-map')) {
            var oldId  = Obj.id;
            var script = li.querySelector( 'script' );
            var id     = this.addNewGMap( Obj, li.children[ 0 ] );
            this.copyFunctionInitGmap( script, oldId, id );
            wrap.parentNode.insertBefore( clone, wrap.nextSibling );
            this.reloadScript( li );
            //} else if(nav && !navTabs) {
            //    var navLi = this.findParent( Obj, [ 'li' ] );
            //    clone     = wrap.cloneNode( true );
            //    navLi.parentNode.insertBefore( clone, navLi.nextSibling );
        } else if(navTabs && wrap.tagName === 'LI') {
            this.copyNavTabs( {
                Obj      : Obj
                , navTabs: navTabs
                , wrap   : wrap
                , clone  : clone
            } );
            return;
        } else if(accordion && wrap.classList.contains('content-box')) {
            this.copyAccordionPanel( {
                Obj      : Obj
                , accordion: accordion
                , wrap   : wrap
                , clone  : clone
            } );
            return;
        } else if(Obj.parentElement && Obj.parentElement.tagName === 'A' && Obj.parentElement.childNodes.length === 1) {
            clone = Obj.parentElement.cloneNode(true);
            wrap = Obj.parentElement;
            wrap.parentNode.insertBefore(clone, wrap.nextSibling);
            this.clearControlElements(li);
            builder.setControlsElementOnSection(li, li, 'edit-elements', false);
        } else if(masonryFilter) {
            wrap.parentNode.insertBefore(clone, wrap.nextSibling);
            this.windowIframe.jQuery(masonryFilter).data('masonry.filter').refresh();
        } else {
            wrap.parentNode.insertBefore(clone, wrap.nextSibling);
        }

        var child = clone;

        if (Obj.tagName === 'FORM') {
            this.addNewForm(child, li.children[0], li.children[0].id, true);
        }

        this.stylingWrapParent(clone);

        this.rebuildControl(clone);

        this.nowrapCorrectigPosition(wrap);

        //this.changePropertyMargin(Obj, wrap);
        //this.changePropertyMargin(child, clone);

        if(nav) {
            clone.removeAttribute('style');
        }

        var pageObj = this.getActivePageObject();

        this.setStep(function() {
            pageObj.sections[li.children[0].id].deleteElement(child);
        });
    }
    , copyNavTabs: function(args) {
        var clone = args.wrap.cloneNode( true );
        var a = clone.querySelector('a');
        var tabs = args.navTabs.parentElement;
        var tabPane = tabs.querySelector('[aria-labelledby="' + a.id + '"]');
        var tabPaneClone = tabPane.cloneNode(true);
        var li = this.findParent(args.Obj, ['section-item', 'modal-dialog']);

        var navLi = args.Obj;

        navLi.parentNode.insertBefore( clone, navLi.nextSibling );
        a.classList.remove('active');

        tabPane.parentNode.insertBefore(tabPaneClone, tabPane.nextSibling);
        tabPaneClone.classList.remove('active');

        var child = navLi;

        var tabsID = tabs.querySelectorAll('.tab-pane');
        var namesTabsID = [];

        Array.prototype.forEach.call(tabsID, function(el){
            namesTabsID.push(el.id);
        });

        var newID = this.uniqueName( tabPaneClone.id , namesTabsID);

        a.href = '#' + newID;
        a.id = newID + '-tab';
        a.setAttribute('aria-controls', newID);

        tabPaneClone.id = newID;
        tabPaneClone.setAttribute('aria-labelledby', newID + '-tab');

        this.stylingWrapParent(clone);

        this.rebuildControl(clone);

        var pageObj = this.getActivePageObject();

        this.setStep(function() {
            pageObj.sections[li.children[0].id].deleteElement(child);
        });
    }
    , copyAccordionPanel: function(args) {
        var clone = args.clone;
        var panelHeading = clone.querySelector('a[data-toggle=collapse]');
        var panelCollapse = clone.querySelector('.collapse');
        var li = this.findParent(args.Obj, ['section-item', 'modal-dialog']);


        args.wrap.parentNode.insertBefore(args.clone, args.wrap.nextSibling);
        panelCollapse.classList.remove('show');

        var child = clone.children[0];

        var panels = args.accordion.querySelectorAll('.collapse');
        var names = [];

        Array.prototype.forEach.call(panels, function(el){
            names.push(el.id);
        });

        panelCollapse.id = this.uniqueName( panelCollapse.id , names);
        panelHeading.href = '#' + panelCollapse.id;
        panelHeading.setAttribute('aria-controls', panelCollapse.id);

        this.stylingWrapParent(clone);

        this.rebuildControl(clone);

        var pageObj = this.getActivePageObject();

        this.setStep(function() {
            pageObj.sections[li.children[0].id].deleteElement(child);
        });
    }
});

CopyElement.prototype.constructor = CopyElement;
var DataElementSettings = function (Obj, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-data-settings', Obj, x, optClass);
};

DataElementSettings.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass) {
        var li = this.findParent(Obj, ['section-item', 'modal-dialog']);
        var innerObj = Obj.querySelector(optClass);
        new ControlDataElementSettingsPL2({
            name: 'Data settings'
            , title: 'Data settings'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , caller: btn
        });
    }
});

DataElementSettings.prototype.constructor = DataElementSettings;

var Del = function (li) {
    return this._button(this, 'supra-btn btn-control-2', 'icon-blr-trash', li);
};

Del.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li) {
        var modal = new Modal('supra-modal', 'Delete', {
                page: this.getActivePageObject()
                , section: this.findParent(li, ['section-item'])
            }
        );
        $(modal).modal('show');
    }
});

Del.prototype.constructor = Del;

var DelElement = function (Obj) {
    return this._button(this, 'supra-btn btn-control-2', 'icon-blr-trash', Obj);
};

DelElement.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj) {
        var modal = new Modal('supra-modal', 'DeleteElement', Obj);
        $(modal).modal('show');
    }
});

DelElement.prototype.constructor = DelElement;

var DownSection = function (li) {
    var unactive = '';
    if (li.classList.contains('nav') || li.classList.contains('footer')) unactive = ' unactive';
    return this._button(this, 'supra-btn btn-control-1' + unactive, 'icon-blr-arrow-down', li);
};

DownSection.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li) {
        li = this.findParent(li, ['section-item'])
        this._moveDown(li);
        this.reloadScript(li);
        //if (AOS) AOS.refresh();
        // if (this.windowIframe.AOS) this.windowIframe.AOS.refresh();
    }
    /**
     * History poin
     * @param li {HTMLElement}
     * @private
     */
    , _moveDown: function(li) {
        var _this = this;
        if (li.nextSibling
            && !li.nextSibling.classList.contains('footer')
            && !li.classList.contains('nav')) {
            li.parentNode.insertBefore(li, li.nextSibling.nextSibling);

            _this.setStep(function() {
                if (
                    li.previousSibling
                    && !li.previousSibling.classList.contains('nav')
                    && !li.classList.contains('footer')
                ) {
                    li.parentNode.insertBefore(li, li.previousSibling);

                    _this.setStep(function () {
                        _this._moveDown(li);
                    });
                }
            });
        }
    }
});

DownSection.prototype.constructor = DownSection;

var DragElement = function (Obj, x, y, editElement) {
    return this._button(this, 'supra-btn btn-control-3', 'icon-blr-move', Obj, x, y, editElement);
};

DragElement.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, z, editElement) {

    }
});

DragElement.prototype.constructor = DragElement;

var ElementH = function (Obj) {
    var h = Obj.tagName.match(/h([1-4])/i);
    var buttons = document.createDocumentFragment();
    if (h) {
        for(var i = 1; i <= 4; i++) {
            var active = '';
            if (i == h[1])
                active = ' active';
            buttons.appendChild(this._button(this, 'supra-btn btn-control-1 h-element' + active, 'icon-blr-h' + i, Obj, {n: 'H' + i}));
        }
    }
    return buttons;
};

ElementH.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, H) {
        var _this = this;
        if (Obj.tagName !== H.n) {
            var prevTimeMark = Date.now();
            var CTimeMark = Date.now()+1;
            var h = document.createElement(H.n);
            var parent = Obj.parentElement;
            h.innerHTML = Obj.innerHTML;
            Obj.parentElement.insertBefore(h, Obj);
            for (var index = Obj.attributes.length - 1; index >= 0; --index) {
                h.attributes.setNamedItem(Obj.attributes[index].cloneNode());
            }
            Obj.classList.add('spr-tm-' + prevTimeMark);
            if (h.className.match(/(\s?spr-tm-[^\s]*)+/i)) {
                h.className = h.className.replace(/(\s?spr-tm-[^\s]*)+/ig, '').trim();
            }
            h.classList.add('spr-tm-' + CTimeMark);
            Obj.parentElement.removeChild(Obj);
            Obj.classList.add('spr-outline-control');
            this.rebuildControl(h);

            var li = this.findParent(h, ['section-item', 'modal-dialog']);
            var controlGroup = li.querySelector('.wrap-control-element.nowrap');

            if (controlGroup) controlGroup.parentElement.removeChild(controlGroup);

            this.setStep(function() {
                _this.historyElementH(Obj.tagName, h, Obj, parent, CTimeMark, prevTimeMark);
            });
        }
    }

    , historyElementH: function(tag, Obj, prevObj, parent, CTimeMark, prevTimeMark) {
        var _this = this;

        if (!Obj.parentElement || !Obj.parentElement.parentElement) {
            Obj = parent.querySelector('.spr-tm-' + CTimeMark)
        }
        parent = Obj.parentElement && Obj.parentElement.parentElement ?
            Obj.parentElement.parentElement : parent;
        Obj.parentElement.insertBefore(prevObj, Obj);
        Obj.parentElement.removeChild(Obj);

        _this.rebuildControl(prevObj);

        _this.setStep(function() {
            _this.historyElementH(Obj.tagName, prevObj, Obj, parent, prevTimeMark, CTimeMark);
        });
    }
});

ElementH.prototype.constructor = ElementH;

var ElementSettings = function (Obj, x, optClass, elementSettings) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-settings', Obj, x, optClass, elementSettings);
};

ElementSettings.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass, elementSettings) {
        var li = this.findParent(Obj, ['section-item', 'modal-dialog']);
        var innerObj = Obj.querySelector(optClass);
        new ControlElementSettingsPL2({
            name: Obj.tagName + ' settings'
            , title: Obj.tagName + ' settings'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , li: li
            , caller: btn
            , elementSettings: elementSettings
        });
    }
});

ElementSettings.prototype.constructor = ElementSettings;

var ElementStyle = function (Obj, x, optClass, elementStyle) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-drop', Obj, x, optClass, elementStyle);
};

ElementStyle.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass, elementStyle) {
        var innerObj = Obj.querySelector(optClass);
        new ControlElementStylePL2({
            name: Obj.tagName + ' style'
            , title: Obj.tagName + ' style'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , caller: btn
            , elementStyle: elementStyle
        });
    }
});

ElementStyle.prototype.constructor = ElementStyle;
var FormSettings = function (Obj, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-envelope-open', Obj, x, optClass);
};

FormSettings.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass) {
        var innerObj = Obj.querySelector(optClass);
        new ControlFormSettingsPL2({
            name: 'Form settings'
            , title: 'Form settings'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , caller: btn
        });
    }
});

FormSettings.prototype.constructor = FormSettings;

var GMapSettings = function (Obj, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-map-marker', Obj, x, optClass);
};

GMapSettings.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass) {
        var li = this.findParent(Obj, ['section-item']);
        var innerObj = Obj.querySelector(optClass);
        new ControlGMapSettingsPL2({
            name: 'Map settings'
            , title: 'Map settings'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , li: li
            , caller: btn
        });
    }
});

GMapSettings.prototype.constructor = GMapSettings;

var ID = function (li) {
    li = this.findParent(li, ['section-item']);
    var label = document.createElement('label');
    label.className = 'supra label-section';
    label.dataset.sectionId = '#' + li.children[0].id;
    if (li.dataset.minWidth) label.style.minWidth = li.dataset.minWidth;
    return label;
};

ID.prototype = Object.assign(Object.create(ControlButton.prototype), {

});

ID.prototype.constructor = ID;
var ImageSettings = function (Obj, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-picture', Obj, x, optClass);
};

ImageSettings.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass) {
        var innerObj = Obj.querySelector(optClass);
        new ControlImageSettingsPL2({
            name: 'Image settings'
            , title: 'Image settings'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , caller: btn
            , options: optClass
        });
    }
});

ImageSettings.prototype.constructor = ImageSettings;

var LeadCB = function (Obj) {
    var active = '';
    if (Obj.classList.contains('lead')) active = ' active';
    var button = this._button(this, 'supra-btn btn-control-1' + active, 'icon-blr-text-l', Obj);
    return button;
};

LeadCB.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn) {
        if (btn.classList.contains('active')) {
            Obj.classList.remove('lead');
            btn.classList.remove('active');
            btn.blur();
        } else {
            Obj.classList.add('lead');
            btn.classList.add('active');
        }
    }
});

LeadCB.prototype.constructor = LeadCB;

var Link = function (Obj, x, optClass) {
    var active = '';
    var innerObj = Obj.querySelector(optClass);
    var link = Obj = innerObj ? innerObj : Obj;
    //<a><img></a> or <a><i></i></a>
    if (Obj.tagName !== 'A' && Obj.parentElement.tagName === 'A') link = Obj.parentElement;
    //<li><a></a></li>
    if (Obj.tagName !== 'A' && Obj.children[0] && Obj.children[0].tagName === 'A') link = Obj.children[0];
    if (link.tagName === 'A') active = ' active';
    return this._button(this, 'supra-btn btn-control-1' + active, 'icon-blr-link', Obj);
};

Link.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, btn) {
        if (Obj.nodeName === 'LI') Obj = Obj.children[0];
        new ControlLinkSettingsPL2({
            name: 'Link settings'
            , title: 'Link settings'
            , closeButton: true
            , editor: editorText
            , obj: Obj
            , caller: btn
        });
    }
});

Link.prototype.constructor = Link;

var SettingsCountdownElement = function (Obj, x, optClass) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-timer', Obj, x, optClass);
};

SettingsCountdownElement.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn, optClass) {
        var innerObj = Obj.querySelector(optClass);
        new ControlCountdownElementSettings({
            name:'Countdown settings'
            , title: 'Countdown settings'
            , closeButton: true
            , obj: innerObj ? innerObj : Obj
            , caller: btn
        });
    }
});

SettingsCountdownElement.prototype.constructor = SettingsCountdownElement;
var SettingsSection = function (li, x, optClass, settingsSection) {
    return this._button(this, 'supra-btn btn-control-1', 'icon-blr-settings', li, x, optClass, settingsSection);
};

SettingsSection.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li, x, btn, optClass, settingsSection) {
        var innerObj = li.querySelector(optClass);
            new ControlSectionSettingsPL2({
                name: settingsSection.title || 'Section settings'
                , title: settingsSection.title || 'Section settings'
                , closeButton: true
                , obj: this.findParent(li, ['section-item'])
                , caller: btn
                , settingsSection: settingsSection.elements
                , innerObj: innerObj
            });
    }
});

SettingsSection.prototype.constructor = SettingsSection;

var SmallCB = function (Obj) {
    var active = '';
    if (Obj.classList.contains('small')) active = ' active';
    var button = this._button(this, 'supra-btn btn-control-1' + active, 'icon-blr-text-l', Obj);
    return button;
};

SmallCB.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn) {
        if (btn.classList.contains('active')) {
            Obj.classList.remove('small');
            btn.classList.remove('active');
            btn.blur();
        } else {
            Obj.classList.add('small');
            btn.classList.add('active');
        }
    }
});

SmallCB.prototype.constructor = SmallCB;

var StaticLink = function (Obj, x, optClass) {
    var active = '';
    var innerObj = Obj.querySelector(optClass);
    var link = Obj = innerObj ? innerObj : Obj;
    //<a><img></a> or <a><i></i></a>
    if (Obj.tagName !== 'A' && Obj.parentElement.tagName === 'A') link = Obj.parentElement;
    //<li><a></a></li>
    if (Obj.tagName !== 'A' && Obj.children[0] && Obj.children[0].tagName === 'A') link = Obj.children[0];
    if (link.tagName === 'A') active = ' active';
    return this._button(this, 'supra-btn btn-control-1' + active, 'icon-blr-link', Obj);
};

StaticLink.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, x, btn) {
        if (Obj.nodeName === 'LI') Obj = Obj.children[0];
        new ControlLinkSettingsPL2({
            name: 'Link settings'
            , title: 'Link settings'
            , closeButton: true
            , obj: Obj
            , caller: btn
        });
    }
});

StaticLink.prototype.constructor = StaticLink;

var TextAlignCenter = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 center', 'icon-blr-align-center', Obj, editorText);
};

TextAlignCenter.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeTextAlignCenter(Obj, button);
        } else {
            editorText.setTextAlignCenter(Obj, button);
        }
    }
});

TextAlignCenter.prototype.constructor = TextAlignCenter;

var TextAlignLeft = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 left', 'icon-blr-align-left', Obj, editorText);
};

TextAlignLeft.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeTextAlignLeft(Obj, button);
        } else {
            editorText.setTextAlignLeft(Obj, button);
        }
    }
});

TextAlignLeft.prototype.constructor = TextAlignLeft;

var TextAlignRight = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 right', 'icon-blr-align-right', Obj, editorText);
};

TextAlignRight.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeTextAlignRight(Obj, button);
        } else {
            editorText.setTextAlignRight(Obj, button);
        }
    }
});

TextAlignRight.prototype.constructor = TextAlignRight;

var TextBold = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 strong', 'icon-blr-bold', Obj, editorText);
};

TextBold.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeBold(button);
        } else {
            editorText.setBold(button);
        }
    }
});

TextBold.prototype.constructor = TextBold;

var TextItalic = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 em', 'icon-blr-italic', Obj, editorText);
};

TextItalic.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeItalic(button);
        } else {
            editorText.setItalic(button);
        }
    }
});

TextItalic.prototype.constructor = TextItalic;

var TextLink = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 link', 'icon-blr-link', Obj, editorText);
};

TextLink.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, btn) {
        if (Obj.nodeName === 'LI' && Obj.querySelector('a')) Obj = Obj.children[0];

        new ControlLinkSettingsPL2({
            name: 'Link settings'
            , title: 'Link settings'
            , closeButton: true
            , editor: editorText
            , obj: Obj
            , caller: btn
        });
    }
});

TextLink.prototype.constructor = TextLink;

var TextMarker = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 mark', 'icon-blr-highlight', Obj, editorText);
};

TextMarker.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeMarker(button);
        } else {
            editorText.setMarker(button);
        }
    }
});

TextMarker.prototype.constructor = TextMarker;

var TextRtl = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 rtl', 'icon-blr-rtl', Obj, editorText);
};

TextRtl.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeRtl(button);
        } else {
            editorText.setRtl(button);
        }
    }
});

TextRtl.prototype.constructor = TextRtl;

var TextStrikethrough = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 del', 'icon-blr-strikethrough', Obj, editorText);
};

TextStrikethrough.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeStrikethrough(button);
        } else {
            editorText.setStrikethrough(button);
        }
    }
});

TextStrikethrough.prototype.constructor = TextStrikethrough;

var TextUnderline = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 ins', 'icon-blr-underline', Obj, editorText);
};

TextUnderline.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeUnderline(button);
        } else {
            editorText.setUnderline(button);
        }
    }
});

TextUnderline.prototype.constructor = TextUnderline;

var TextUpper = function (Obj, editorText) {
    return this._button(this, 'supra-btn btn-control-1 upper', 'icon-blr-uppercase', Obj, editorText);
};

TextUpper.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, button) {
        if (button.classList.contains('active')) {
            editorText.removeUpper(button);
        } else {
            editorText.setUpper(button);
        }
    }
});

TextUpper.prototype.constructor = TextUpper;

var UpSection = function (li) {
    var unactive = '';
    if (li.classList.contains('nav') || li.classList.contains('footer')) unactive = ' unactive';
    return this._button(this, 'supra-btn btn-control-1' + unactive, 'icon-blr-arrow-up', li);
};

UpSection.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(li) {
        li = this.findParent(li, ['section-item']);
        this._moveUp(li);
        this.reloadScript(li);
        //if (AOS) AOS.refresh();
        // if (this.windowIframe.AOS) this.windowIframe.AOS.refresh();
    }
    /**
     * History poin
     * @param li {HTMLElement}
     * @private
     */
    , _moveUp: function(li) {
        var _this = this;
        if (
            li.previousSibling
            && !li.previousSibling.classList.contains('nav')
            && !li.classList.contains('footer')
        ) {
            li.parentNode.insertBefore(li, li.previousSibling);

            _this.setStep(function() {
                if (li.nextSibling
                    && !li.nextSibling.classList.contains('footer')
                    && !li.classList.contains('nav')) {
                    li.parentNode.insertBefore(li, li.nextSibling.nextSibling);

                    _this.setStep(function() {
                        _this._moveUp(li);
                    });
                }
            });
        }
    }
});

UpSection.prototype.constructor = UpSection;

var VideoLink = function (Obj, x, optClass) {
    var active = '';
    var innerObj = Obj.querySelector(optClass);
    Obj = innerObj ? innerObj : Obj;
    //TODO: should be delete
    // if (Obj.nodeName === 'DIV') Obj = Obj.children[0];
    if (Obj.nodeName === 'IFRAME' && Obj.src.search(/player\.vimeo\.com|embed/i) !== -1) active = ' active';
    return this._button(this, 'supra-btn btn-control-1' + active, 'icon-blr-link', Obj);
};

VideoLink.prototype = Object.assign(Object.create(ControlButton.prototype), {
    doThis: function(Obj, editorText, btn) {
        new ControlVideoLinkSettingsPL2({
            name: 'Video link'
            , title: 'Video link'
            , closeButton: true
            , editor: editorText
            , obj: Obj
            , caller: btn
        });
    }
});

VideoLink.prototype.constructor = VideoLink;

var DataElementInput = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._datasetItem = options.datasetItem;
    this._srcset = '';

    BaseInput.call(this, {
        title: firstUp(this._datasetItem)
        , targetObject: _this._targetObject
        , callback: options.callback
    });
};

DataElementInput.prototype = Object.assign(Object.create(BaseInput.prototype), {
    _addEventListToHalfInput: function(baseInput) {
        var _this = this;
        baseInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;
            _this.setData(val, _this._targetObject.dataset[_this._datasetItem]);
        });
    }
    , setData: function (val, saveVal) {
        var _this = this;

        if (val !== '') {
            _this._targetObject.dataset[_this._datasetItem] = val;

            if (builder.windowIframe.AOS && /aos-/.test(_this._targetObject.className)) {
                setTimeout(function(){
                    _this._targetObject.setAttribute('class', _this._targetObject.getAttribute('class') + ' aos-init aos-animate');
                    setTimeout(function(){
                        _this.windowIframe.AOS.refresh();
                    }, 2000);
                }, 1000);
            }
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setData(saveVal, val);
        });
    }
});

DataElementInput.prototype.constructor = DataElementInput;
var ElementButtonIcon = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._buttonIcons = {
        value: ''
        , select: false
        , buttons: [
            {
                title: 'Left'
                , value: 'left'
            }
            , {
                title: 'Right'
                , value: 'right'
            }
        ]
    };

    ButtonsIcon.call(this, {
        title: 'Button icon'
        , outerClass: ''
        , buttons: _this._buttonIcons.buttons
        , onlyOne: true
        , allowSelectNothing: true
        , obj: _this._targetObject
    });
};

ElementButtonIcon.prototype = Object.assign(Object.create(ButtonsIcon.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
        };
        var saveVal = _this._buttonIcons;
        _this._buttonIcons = val;

        _this.setButtonIcon(val, saveVal);
    }
    , setButtonIcon: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;
        var icon = document.createElement('img');
        icon.className = 'icon icon-pos-' + val.value;
        icon.setAttribute('src', 'images/icon-example.svg');
        icon.setAttribute('alt', 'icon');

        if (element.classList.contains('btn-image')) return;

        if (val.select) {
            // _this._options.buttons.forEach(function (el) {
            //
            //     if (element.classList.contains(el.value)) {
            //
            //         element.classList.remove(el.value)
            //     }
            // });
            if (val.value === 'left') {
                var iconSelector = element.querySelector('.icon');
                if (iconSelector) {
                    element.removeChild(iconSelector);
                    icon = iconSelector;
                    icon.setAttribute(
                        'class'
                        , icon.getAttribute('class').replace(/icon-pos-[^\s]*/, 'icon-pos-' + val.value)
                    );
                }

                var span = element.childNodes[0];
                element.insertBefore(icon, span);
            }

            if (val.value === 'right'){
                var iconSelector = element.querySelector('.icon');
                if (iconSelector) {
                    element.removeChild(iconSelector);
                    icon = iconSelector;
                    icon.setAttribute(
                        'class'
                        , icon.getAttribute('class').replace(/icon-pos-[^\s]*/, 'icon-pos-' + val.value)
                    );
                }

                element.appendChild(icon);
            }

            _this.convertImgToSvg(icon.getAttribute('src'), icon, function () {
                _this.clearControlElements(_this._li);
                builder.setControlsElementOnSection( _this._li, _this._li, 'edit-elements', false );
            });

        } else {
            var icon = element.querySelector('.icon');
            if (icon) element.removeChild(icon);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setButtonIcon(saveVal, val);
        });
    }
});

ElementButtonIcon.prototype.constructor = ElementButtonIcon;
var ElementButtonSize = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    var valBS = this._targetObject.className.match(/btn-(sm|lg)/);
    this._buttonSize = {
        value: valBS ? valBS[0] : ''
        , select: !!valBS
        , buttons: [
            {
                title: 'SM'
                , value: 'btn-sm'
            }
            , {
                title: 'LG'
                , value: 'btn-lg'
            }
        ]
    };

    ButtonsSize.call(this, {
        title: 'Button size'
        , outerClass: ''
        , buttons: _this._buttonSize.buttons
        , onlyOne: true
        , allowSelectNothing: true
        , obj: _this._targetObject
    });
};

ElementButtonSize.prototype = Object.assign(Object.create(ButtonsSize.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
        };
        var saveVal = _this._buttonSize;
        _this._buttonSize = val;

        _this.setButtonSize(val, saveVal);
    }
    , setButtonSize: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        if (val.select) {
            _this._options.buttons.forEach(function (el) {
                if (element.classList.contains(el.value)) {
                    element.classList.remove(el.value)
                }
            });

            element.classList.add(val.value);
        } else {
            var className = val.value;
            if (val.value === '') className = saveVal.value;

            element.classList.remove(className);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setButtonSize(saveVal, val);
        });
    }
});

ElementButtonSize.prototype.constructor = ElementButtonSize;
var ElementButtonWidth = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._buttonWidth = false;

    SwitchGroup.call(this, {
        title: 'Button width'
        , callback: function () {
            _this._buttonWidth = _this._targetObject.classList.contains('btn-block');
            return _this._buttonWidth;
        }
    });
};

ElementButtonWidth.prototype = Object.assign(Object.create(SwitchGroup.prototype), {
    _addEventListToHalfInput: function(switchGroup) {
        var _this = this;
        switchGroup.querySelector('.switch').addEventListener('click', function (e) {
            e.preventDefault();
            var input = this.querySelector('input');
            if (this.classList.contains('switch-on')) {
                this.classList.remove('switch-on');
                this.classList.add('switch-off');
                input.removeAttribute('checked');
            } else {
                this.classList.remove('switch-off');
                this.classList.add('switch-on');
                input.setAttribute('checked', '');
            }

            var val = input.checked;
            var saveVal = _this._buttonWidth;
            _this._buttonWidth = val;

            _this.setButtonWidth(val, saveVal);
        });
    }
    , setButtonWidth: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;
        element.classList.remove('btn-block');
        if (val) element.classList.add('btn-block');

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setButtonWidth(saveVal, val);
        });
    }
});

ElementButtonWidth.prototype.constructor = ElementButtonWidth;
var ElementCBS = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._options = '';

    CustomButtonsSwitch.call(this, {
        customCE: options.customCE
        , isActive: function (value) {
            if (_this._targetObject.classList.contains(value)) {
                _this._options = value;
                return true;
            }
            return false;
        }
    });
};

ElementCBS.prototype = Object.assign(Object.create(CustomButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var sBtn = document.createElement('div');
        sBtn.dataset.value = btn.dataset.value;
        if (btn.classList.contains('active')) sBtn.classList.add('active');

        var val = {
            btn: sBtn
        };

        var saveBtn = document.createElement('div');
        saveBtn.dataset.value = _this._options !== '' && this.onlyOne ? _this._options : btn.dataset.value;
        if (!btn.classList.contains('active') || this.onlyOne) saveBtn.classList.add('active');

        var saveVal = {
            btn: saveBtn
        };
        _this._options = btn.dataset.value;

        _this.setOptions(val, saveVal);
    }
    , setOptions: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        _this.optionsSelect(val.btn, element);

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setOptions(saveVal, val);
        });
    }
});

ElementCBS.prototype.constructor = ElementCBS;
var ElementImageAlt = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._alt = '';

    BaseInput.call(this, {
        title: 'Image alt'
        , outerClass: 'show-image-mode'
        , callback: function () {
            var img = _this._targetObject.querySelector('img:not(.icon)');
            return _this._alt = img ? img.getAttribute('alt') : '';
        }
    });
};

ElementImageAlt.prototype = Object.assign(Object.create(BaseInput.prototype), {
    _addEventListToHalfInput: function(baseInput) {
        var _this = this;
        baseInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;
            var saveVal = _this._alt;
            _this._alt = val;

            _this.setAlt(val, saveVal);
        });
    }
    , setAlt: function (val, saveVal) {
        var _this = this;

        var img = _this._targetObject.children[0];
        if (img.tagName === 'IMG') {
            img.setAttribute('alt', val);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setAlt(saveVal, val);
        });
    }
});

ElementImageAlt.prototype.constructor = ElementImageAlt;
var ElementImagePreview = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._src = '';

    ImagePreview.call(this, {
        title: 'Image'
        , outerClass: 'show-image-mode'
        , callback: function () {
            var img = _this._targetObject.querySelector('img:not(.icon)');
            return _this._src = img ? img.getAttribute('src') : '';
        }
    });
};

ElementImagePreview.prototype = Object.assign(Object.create(ImagePreview.prototype), {
    _listenerToImagePreview: function(src) {
        var _this = this;
        var val = src === '' ? 'none' : src;
        var saveVal = _this._src;
        _this._src = val;

        _this.setImage(val, saveVal);
    }
    , _listenerToManualImagePreview: function(input, e) {
        var _this = this;
        var val = input.value === '' ? 'none' : input.value;
        var saveVal = _this._src;
        _this._src = val;

        _this.setImage(val, saveVal);
    }
    , setImage: function (val, saveVal) {
        var _this = this;

        if (val === '') return;

        var img = _this._targetObject.children[0];
        if (img && img.tagName === 'IMG' && !img.classList.contains('icon')) {
            img.setAttribute('src', val);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setImage(saveVal, val);
        });
    }
});

ElementImagePreview.prototype.constructor = ElementImagePreview;
var ElementImageRetina = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._srcset = '';

    ImageBase.call(this, {
        title: 'Image retina (optional)'
        , type: 'retina'
        , outerClass: 'show-image-mode'
        , callback: function () {
            var img = _this._targetObject.querySelector('img:not(.icon)');
            return _this._srcset = img ? img.getAttribute('srcset').replace(/\s?2x/, '') : '';
        }
    });
};

ElementImageRetina.prototype = Object.assign(Object.create(ImageBase.prototype), {
    _listenerToImageBase: function(src) {
        var _this = this;
        var val = src === '' ? 'none' : src;
        if (this._options.type === 'retina') {
            val += ' 2x';
        }
        var saveVal = _this._srcset;
        _this._srcset = val;

        _this.setRetina(val, saveVal);
    }
    , _listenerToManualImageBase: function(input, e) {
        var _this = this;
        var val = input.value === '' ? 'none' : input.value;
        if (this._options.type === 'retina') {
            val += ' 2x';
        }
        var saveVal = _this._srcset;
        _this._srcset = val;

        _this.setRetina(val, saveVal);
    }
    , setRetina: function (val, saveVal) {
        var _this = this;

        var img = _this._targetObject.children[0];
        if (img.tagName === 'IMG') {
            if (val !== 'none 2x' && val !== '') {
                img.setAttribute('srcset', val);
            } else {
                img.removeAttribute('srcset');
            }
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setRetina(saveVal, val);
        });
    }
});

ElementImageRetina.prototype.constructor = ElementImageRetina;
var ElementMediaJustifyAlign = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;

    MediaJustifyAlign.call(this, {
        title: 'Justify align'
        , buttons: [
            {
                title: '<i class="icon-blr-align-left"></i>'
                , value: 'start'
            }
            , {
                title: '<i class="icon-blr-align-center"></i>'
                , value: 'center'
            }
            , {
                title: '<i class="icon-blr-align-right"></i>'
                , value: 'end'
            }
            , {
                title: '<i class="icon-blr-align-justify"></i>'
                , value: 'between'
            }
            , {
                title: '<i class="icon-blr-align-justify"></i>'
                , value: 'around'
            }
        ]
        , onlyOne: true
        , allowSelectNothing: true
        , isActive: function (value) {
            var element = _this._targetObject;
            if (new RegExp('\\s?justify-content-' + value).test(element.getAttribute('class'))) {
                return true;
            }
            return false;
        }
        , obj: _this._targetObject
    });
};

ElementMediaJustifyAlign.prototype = Object.assign(Object.create(MediaJustifyAlign.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var value = btn.dataset.value;

        var val = {
            value: value
            , media: _this.media
            , btn: btn
        };

        var saveBtn = document.createElement('div');
        saveBtn.dataset.value = _this.activeButtons[_this.media];
        if (saveBtn.dataset.value !== '')
            saveBtn.classList.add('active');

        var saveVal = {
            value: _this.activeButtons[_this.media]
            , media: _this.media
            , btn: saveBtn
        };

        var btnM = {};

        btnM.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
        btnM.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
        btnM.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

        if (btn.classList.contains('active') && _this.media !== 'default') {
            btnM[_this.media].classList.add('isset');
        } else if (_this.media !== 'default') {
            btnM[_this.media].classList.remove('isset');
        }

        this.activeButtons[this.media] = btn.classList.contains('active') ? btn.dataset.value : '';

        _this.setJustifyAlign(val, saveVal);
    }
    , setJustifyAlign: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        var className = ' justify-content-' + val.value;

        if (val.media === 'mobile') {
            className = ' justify-content-sm-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(/\s?justify-content-sm-(?:start|end|center|between|around)/ig, ''));
        }

        if (val.media === 'tablet') {
            className = ' justify-content-md-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(/\s?justify-content-(?:md)-(?:start|end|center|between|around)/ig, ''));
        }

        if (val.media === 'desktop') {
            className = ' justify-content-lg-' + val.value + ' text-xl-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(/\s?justify-content-(?:lg|xl)-(?:start|end|center|between|around)/ig, ''));
        }

        if (val.media === 'default') {
            element.setAttribute('class', element.getAttribute('class').replace(/\s?justify-content-(?:start|end|center|between|around)/ig, ''));
        }

        if (val.btn.classList.contains('active')) {
            element.setAttribute('class', element.getAttribute('class') + className);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setTextAlign(saveVal, val);
        });
    }
});

ElementMediaJustifyAlign.prototype.constructor = ElementMediaJustifyAlign;
var ElementMediaTextAlign = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;

    MediaTextAlign.call(this, {
        title: 'Text align'
        , buttons: [
            {
                title: '<i class="icon-blr-align-left"></i>'
                , value: 'left'
            }
            , {
                title: '<i class="icon-blr-align-center"></i>'
                , value: 'center'
            }
            , {
                title: '<i class="icon-blr-align-right"></i>'
                , value: 'right'
            }
            , {
                title: '<i class="icon-blr-align-justify"></i>'
                , value: 'justify'
            }
        ]
        , onlyOne: true
        , allowSelectNothing: true
        , isActive: function (value) {
            var element = _this._targetObject;
            if (new RegExp('\\s?text-' + value).test(element.getAttribute('class'))) {
                return true;
            }
            return false;
        }
        , obj: _this._targetObject
    });
};

ElementMediaTextAlign.prototype = Object.assign(Object.create(MediaTextAlign.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var value = btn.dataset.value;

        var val = {
            value: value
            , media: _this.media
            , btn: btn
        };

        var saveBtn = document.createElement('div');
        saveBtn.dataset.value = _this.activeButtons[_this.media];
        if (saveBtn.dataset.value !== '')
            saveBtn.classList.add('active');

        var saveVal = {
            value: _this.activeButtons[_this.media]
            , media: _this.media
            , btn: saveBtn
        };

        var btnM = {};

        btnM.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
        btnM.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
        btnM.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

        if (btn.classList.contains('active') && _this.media !== 'default') {
            btnM[_this.media].classList.add('isset');
        } else if (_this.media !== 'default') {
            btnM[_this.media].classList.remove('isset');
        }

        this.activeButtons[this.media] = btn.classList.contains('active') ? btn.dataset.value : '';

        _this.setTextAlign(val, saveVal);
    }
    , setTextAlign: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        var className = ' text-' + val.value;

        if (val.media === 'mobile') {
            className = ' text-xs-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(/\s?text-xs-(?:left|right|center|justify)/ig, ''));
        }

        if (val.media === 'tablet') {
            className = ' text-sm-' + val.value + ' text-md-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(/\s?text-(?:sm|md)-(?:left|right|center|justify)/ig, ''));
        }

        if (val.media === 'desktop') {
            className = ' text-lg-' + val.value + ' text-xl-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(/\s?text-(?:lg|xl)-(?:left|right|center|justify)/ig, ''));
        }

        if (val.media === 'default') {
            element.setAttribute('class', element.getAttribute('class').replace(/\s?text-(?:left|right|center|justify)/ig, ''));
        }

        if (val.btn.classList.contains('active')) {
            element.setAttribute('class', element.getAttribute('class') + className);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setTextAlign(saveVal, val);
        });
    }
});

ElementMediaTextAlign.prototype.constructor = ElementMediaTextAlign;
var ElementParallax = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;
    this._parallax = {
        value: ''
        , select: false
    };

    ButtonsSwitch.call(this, {
        title: 'Parallax speed'
        , outerClass: ''
        , buttons: [
            {
                title: '-5'
                , value: '-5'
            }
            , {
                title: '-2'
                , value: '-2'
            }
            , {
                title: '+2'
                , value: '2'
            }
            , {
                title: '+5'
                , value: '5'
            }
        ]
        , isActive: function (value) {
            var parallax = /parallax/.test(_this._targetObject.getAttribute('class'));
            if (parallax && _this._targetObject.dataset.rellaxSpeed === value) {
                _this._parallax = {
                    value: _this._targetObject.dataset.rellaxSpeed
                    , select: _this._targetObject.dataset.rellaxSpeed !== ''
                };
                return true;
            }
            return false;
        }
        , onlyOne: true
        , allowSelectNothing: true
        , obj: _this._targetObject
    });
};

ElementParallax.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
        };
        var saveVal = _this._parallax;
        _this._parallax = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
        };

        _this.setParallax(val, saveVal);
    }
    , setParallax: function (val, saveVal) {
        var _this = this;
        var el = _this._targetObject;

        if (/parallax/.test(el.getAttribute('class')) && val.select) {
            el.dataset.rellaxSpeed = val.value;
            if (_this.windowIframe.rellax) _this.windowIframe.rellax.destroy();
            _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
                center: true
            });
        } else if (val.select) {
            el.setAttribute('class', el.getAttribute('class') + ' parallax');
            el.dataset.rellaxSpeed = val.value;
            if (_this.windowIframe.rellax) _this.windowIframe.rellax.destroy();
            _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
                center: true
            });
        } else if (!val.select) {
            el.setAttribute('class', el.getAttribute('class').replace(/\s?parallax/, ''));
            delete el.dataset.rellaxSpeed;
            if (_this.windowIframe.rellax)
                _this.windowIframe.rellax.destroy();
            if (_this.main.querySelector('parallax')) {
                _this.windowIframe.rellax = new _this.windowIframe.Rellax('.parallax', {
                    center: true
                });
            }
            el.style.removeProperty('transform');
        }

        _this.nowrapCorrectigPosition(_this._targetObject);

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setParallax(saveVal, val);
        });
    }
});

ElementParallax.prototype.constructor = ElementParallax;
var ElementSkin = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;

    this._elementSkin = {
        value: ''
        , select: false
        , buttons: [
            {
                title: 'Light'
                , value: 'light'
            }
            , {
                title: 'Dark'
                , value: 'dark'
            }
        ]
    };

    ButtonsSwitch.call(this, {
        title: 'Skin'
        , buttons: _this._elementSkin.buttons
        , order: options.order || 999999
        , outerClass: ''
        , onlyOne: true
        , allowSelectNothing: false
        , isActive: function (value) {
            if (
                _this._targetObject.classList.contains(value)
                || (
                    _this._li.children[0].classList.contains(value)
                    && !_this._targetObject.classList.contains('light')
                    && !_this._targetObject.classList.contains('dark')
                )
            ) {
                _this._elementSkin.value = value;
                _this._elementSkin.select = true;
                return true;
            }
            return false;
        }
    });
};

ElementSkin.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
            , buttons: _this._elementSkin.buttons
        };
        _this._elementSkin.value = _this._elementSkin.value || btn.dataset.value;
        var saveVal = _this._elementSkin;
        _this._elementSkin = val;

        _this.setElementSkin(val, saveVal);
    }
    , setElementSkin: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        if (val.select) {
            val.buttons.forEach(function (el) {
                if (element.classList.contains(el.value)) {
                    element.classList.remove(el.value)
                }
            });

            element.classList.add(val.value);
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setElementSkin(saveVal, val);
        });
    }
});

ElementSkin.prototype.constructor = ElementSkin;
var MarginSettings = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    var _this = this;
    this._targetObject = options.targetObject;
    this._li = options.li;

    this.paddingTop = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    this.paddingBottom = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    MediaPM.call(this, {
        name: 'MediaPM'
        , itemName: 'MediaPM'
        , title: 'Margin'
        , prefix: 'm'
        , menu: ['-300px', '-200px', '-100px', '-50px', '-30px', '-', '0px', '10px', '20px', '30px', '50px', '75px', '100px', '150px', '200px', '250px', '300px']
        , callbackTop: function() {
            var element = _this._targetObject;
            var cNameTop = element.getAttribute('class').match(/mt-(?![a-z])(-?[0-9]*)/i);
            return  cNameTop && cNameTop[1] !== '' ? cNameTop[1] + 'px' : '-';
        }
        , callbackBottom: function() {
            var element = _this._targetObject;
            var cNameBottom = element.getAttribute('class').match(/mb-(?![a-z])(-?[0-9]*)/i);
            return  cNameBottom && cNameBottom[1] !== '' ? cNameBottom[1] + 'px' : '-';
        }
        , obj: _this._targetObject
    });
};

MarginSettings.prototype = Object.assign(Object.create(MediaPM.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var value = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(value));
                button.querySelector('span').innerHTML = value;

                var paddingPosition = 'top';

                if (!dropDown.classList.contains('padding-top')) {
                    paddingPosition = 'bottom';
                }

                value = value.substr(0, value.length-2);

                var val = {
                    value: value
                    , media: _this.media
                    , paddingPosition: paddingPosition
                };
                var mVal = paddingPosition === 'bottom' ?
                    _this.paddingBottom[_this.media] : _this.paddingTop[_this.media];
                var saveVal = {
                    value: mVal.substr(0, mVal.length-2)
                    , media: _this.media
                    , paddingPosition: paddingPosition
                };

                if (dropDown.classList.contains('padding-top')) {
                    _this.paddingTop[_this.media] = value !== '' ? value + 'px' : '-';
                } else {
                    _this.paddingBottom[_this.media] = value !== '' ? value + 'px' : '-';
                }

                var btn = {};

                btn.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
                btn.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
                btn.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

                if (_this.paddingTop[_this.media] === '-' && _this.paddingBottom[_this.media] === '-' && _this.media !== 'default') {
                    btn[_this.media].classList.remove('isset');
                } else if (_this.media !== 'default') {
                    btn[_this.media].classList.add('isset');
                }

                _this.setMargin(val, saveVal);
            });
        });
    }
    , setMargin: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        var pIndex = 't';
        if (val.paddingPosition === 'bottom') pIndex = 'b';

        var className = '';

        if (val.value !== '') className = ' m' + pIndex + '-' + val.value;

        if (val.media === 'mobile') {
            if (val.value !== '') className = ' m' + pIndex + '-sm-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?m' + pIndex + '-sm-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.media === 'tablet') {
            if (val.value !== '') className = ' m' + pIndex + '-md-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?m' + pIndex + '-md-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.media === 'desktop') {
            if (val.value !== '') className = ' m' + pIndex + '-lg-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?m' + pIndex + '-lg-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.media === 'default') {
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?m' + pIndex + '-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.value !== '') element.setAttribute('class', element.getAttribute('class') + className);

        _this.nowrapCorrectigPosition(element);

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setMargin(saveVal, val);
        });
    }
});

MarginSettings.prototype.constructor = MarginSettings;

var PaddingSettings = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    var _this = this;
    this._targetObject = options.targetObject;
    this._li = options.li;

    this.paddingTop = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    this.paddingBottom = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    MediaPM.call(this, {
        name: 'MediaPM'
        , itemName: 'MediaPM'
        , title: 'Padding'
        , prefix: 'p'
        , menu: ['-', '0px', '10px', '20px', '30px', '50px', '75px', '100px', '150px', '200px', '250px', '300px', '350px', '400px']
        , callbackTop: function() {
            var element = _this._targetObject;
            var cNameTop = element.getAttribute('class').match(/pt-(?![a-z])([0-9]+)/i);
            return  cNameTop && cNameTop[1] !== '' ? cNameTop[1] + 'px' : '-';
        }
        , callbackBottom: function() {
            var element = _this._targetObject;
            var cNameBottom = element.getAttribute('class').match(/pt-(?![a-z])([0-9]+)/i);
            return  cNameBottom && cNameBottom[1] !== '' ? cNameBottom[1] + 'px' : '-';
        }
        , obj: _this._targetObject
    });
};

PaddingSettings.prototype = Object.assign(Object.create(MediaPM.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var value = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(value));
                button.querySelector('span').innerHTML = value;

                var paddingPosition = 'top';

                if (!dropDown.classList.contains('padding-top')) {
                    paddingPosition = 'bottom';
                }

                value = value.substr(0, value.length-2);

                var val = {
                    value: value
                    , media: _this.media
                    , paddingPosition: paddingPosition
                };
                var mVal = paddingPosition === 'bottom' ?
                    _this.paddingBottom[_this.media] : _this.paddingTop[_this.media];
                var saveVal = {
                    value: mVal.substr(0, mVal.length-2)
                    , media: _this.media
                    , paddingPosition: paddingPosition
                };

                if (dropDown.classList.contains('padding-top')) {
                    _this.paddingTop[_this.media] = value !== '' ? value + 'px' : '-';
                } else {
                    _this.paddingBottom[_this.media] = value !== '' ? value + 'px' : '-';
                }

                var btn = {};

                btn.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
                btn.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
                btn.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

                if (_this.paddingTop[_this.media] === '-' && _this.paddingBottom[_this.media] === '-' && _this.media !== 'default') {
                    btn[_this.media].classList.remove('isset');
                } else if (_this.media !== 'default') {
                    btn[_this.media].classList.add('isset');
                }

                _this.setMargin(val, saveVal);
            });
        });
    }
    , setMargin: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        var pIndex = 't';
        if (val.paddingPosition === 'bottom') pIndex = 'b';

        var className = '';

        if (val.value !== '') className = ' p' + pIndex + '-' + val.value;

        if (val.media === 'mobile') {
            if (val.value !== '') className = ' p' + pIndex + '-sm-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?p' + pIndex + '-sm-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.media === 'tablet') {
            if (val.value !== '') className = ' p' + pIndex + '-md-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?p' + pIndex + '-md-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.media === 'desktop') {
            if (val.value !== '') className = ' p' + pIndex + '-lg-' + val.value;
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?p' + pIndex + '-lg-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.media === 'default') {
            element.setAttribute('class', element.getAttribute('class').replace(new RegExp('\\s?p' + pIndex + '-{1,2}[0-9]+', 'ig'), ''));
        }

        if (val.value !== '') element.setAttribute('class', element.getAttribute('class') + className);

        _this.nowrapCorrectigPosition(element);

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setMargin(saveVal, val);
        });
    }
});

PaddingSettings.prototype.constructor = PaddingSettings;

var Visibility = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;

    this._visibility = {
        mobile: false
        , tablet: false
        , desktop: false
    };

    ButtonsSwitch.call(this, {
        title: 'Visibility'
        , buttons: [
            {
                title: '<i class="icon-blr-mobile"></i>'
                , value: 'mobile'
            }
            , {
                title: '<i class="icon-blr-tablet"></i>'
                , value: 'tablet'
            }
            , {
                title: '<i class="icon-blr-desktop"></i>'
                , value: 'desktop'
            }
        ]
        , order: options.order || 999999
        , outerClass: ''
        , onlyOne: false
        , allowSelectNothing: false
        , isActive: function (value) {
            if (!_this._targetObject.classList.contains('hidden-sm') && value === 'mobile') {
                _this._visibility.mobile = true;
                return true;
            }
            if (
                !_this._targetObject.classList.contains('hidden-md')
                && value === 'tablet') {
                _this._visibility.tablet = true;
                return true;
            }
            if (
                !_this._targetObject.classList.contains('hidden-lg')
                && !_this._targetObject.classList.contains('hidden-xl')
                && value === 'desktop') {
                _this._visibility.desktop = true;
                return true;
            }
            return false;
        }
    });
};

Visibility.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        var active = btn.parentElement.querySelector('.active');
        var countActive = btn.parentElement.querySelectorAll('.active');
        if (active && active !== btn && this.onlyOne) {
            active.classList.remove('active');
        }

        if (
            btn.classList.contains('active')
            && (
                ( countActive.length > 1)
                || ( countActive.length === 1 && this.allowSelectNothing)
            )
        ) {
            btn.classList.remove('active');
        } else if (!btn.classList.contains('active')) {
            btn.classList.add('active');
        }

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
        };
        var saveVal = {
            value: btn.dataset.value
            , select: _this._visibility[val.value]
        };
        _this._visibility[val.value] = val.select;

        _this.setVisibility(val, saveVal);
    }
    , setVisibility: function (val, saveVal) {
        var _this = this;

        var element = _this._targetObject;

        if (val.select) {
            if (val.value === 'mobile') {
                element.setAttribute('class', element.getAttribute('class').replace(/\s?hidden-sm/ig, ''));
            }

            if (val.value === 'tablet') {
                element.setAttribute('class', element.getAttribute('class').replace(/\s?hidden-md/ig, ''));
            }

            if (val.value === 'desktop') {
                element.setAttribute('class', element.getAttribute('class').replace(/\s?hidden-(lg|xl)/ig, ''));
            }
        } else {
            if (val.value === 'mobile') {
                element.setAttribute('class', element.getAttribute('class') + ' hidden-sm');
            }

            if (val.value === 'tablet') {
                element.setAttribute('class', element.getAttribute('class') + ' hidden-md');
            }

            if (val.value === 'desktop') {
                element.setAttribute('class', element.getAttribute('class') + ' hidden-lg hidden-xl');
            }
        }

        _this.trigger('element.settings.change', document, {
            detail: {
                Obj: _this._targetObject
            }
        });

        _this.setStep(function () {
            _this.setVisibility(saveVal, val);
        });
    }
});

Visibility.prototype.constructor = Visibility;
var BackgroundColorES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    var bgColor = /gradient/.test(this._targetObject.style.background)
        ? this._targetObject.style.background
        : /#|rgb/.test(this._targetObject.style.backgroundColor)
            ? this._targetObject.style.backgroundColor
            : '';
    this._bgColor = bgColor && bgColor !== '' ? bgColor : '-';

    BgColor.call(this, {
        menu: [
            '-'
            , 'Solid color'
            , 'Radial gradient'
            , 'Vertical gradient'
            , 'Horizontal gradient'
            , 'Angle gradient'
        ]
        , title: 'Background color'
        , order: options.order || 999999
        , outerClass: ''
        , callback: function() {
            return _this._bgColor;
        }
    });
};

BackgroundColorES.prototype = Object.assign(Object.create(BgColor.prototype), {
    _listenerToBgColor: function(color) {
        var _this = this;
        var bgColor1 = this._selfDOM.querySelector('.spectrum.first');
        var bgColor2 = this._selfDOM.querySelector('.spectrum.second');
        var bgColor1value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
            $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
        var bgColor2value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
            $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();
        var val = this._changeCstmColor(bgColor1value, bgColor2value);

        var saveVal = _this._bgColor;
        _this._bgColor = val;

        _this.setBgColor(val, saveVal);
    }
    , _addEventListToBgColorDropdown: function(bgColor) {
        var _this = this;
        var options = bgColor.querySelectorAll('li a');
        var button = bgColor.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var item = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(item));
                button.querySelector('span').innerHTML = item;

                if (item === 'Solid color' && !bgColor.classList.contains('solid')) {
                    bgColor.classList.add('solid');
                } else if(item !== 'Solid color' && bgColor.classList.contains('solid')) {
                    bgColor.classList.remove('solid');
                }

                if (item === '-' && !bgColor.classList.contains('none')) {
                    bgColor.classList.add('none');
                } else if(item !== '-' && bgColor.classList.contains('none')) {
                    bgColor.classList.remove('none');
                }

                var bgColor1 = _this._selfDOM.querySelector('.spectrum.first');
                var bgColor2 = _this._selfDOM.querySelector('.spectrum.second');
                var bgColor1value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
                    $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
                var bgColor2value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
                    $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();
                var val = _this._changeCstmColor(bgColor1value, bgColor2value);

                var saveVal = _this._bgColor;
                _this._bgColor = val;

                _this.setBgColor(val, saveVal);

            });
        });
    }
    , setBgColor: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('background-color');
            // _this._targetObject.style.removeProperty('background');
        } else if (/gradient/.test(val)) {
            _this._targetObject.style.removeProperty('background-color');
            _this._targetObject.style.removeProperty('background-image');
            _this._targetObject.style.background = val;
        } else {
            _this._targetObject.style.backgroundColor = val;
        }

        _this.setStep(function () {
            _this.setBgColor(saveVal, val);
        });
    }
});

BackgroundColorES.prototype.constructor = BackgroundColorES;
var BackgroundImageES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._image = /url/.test(this._targetObject.style.backgroundImage)
        ? this._targetObject.style.backgroundImage.match(/url\(['"]?([^']*)['"]?\)/)[1]
        : '';

    ImagePreview.call(this, {
        menu: []
        , title: 'Background image'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._image;
        }
    });
};

BackgroundImageES.prototype = Object.assign(Object.create(ImagePreview.prototype), {
    _listenerToImagePreview: function(src, eventName) {
        var _this = this;
        var val = src;

        var saveVal = _this._image;
        _this._image = val;

        _this.setImage(val, saveVal);
    }
    , _listenerToManualImagePreview: function(input) {
        var _this = this;
        var val = input.value;

        if (val === 'none' || val === '') {
            _this._selfDOM.querySelector('img').style.display = 'none';
        } else {
            _this._selfDOM.querySelector('img').style.display = 'block';
            _this._selfDOM.querySelector('img').src = input.value;
        }

        var saveVal = _this._image;
        _this._image = val;

        _this.setImage(val, saveVal);
    }
    , setImage: function (val, saveVal) {
        var _this = this;
        // _this._targetObject.style.removeProperty('background-color');
        // _this._targetObject.style.removeProperty('background');

        if (val === '') {
            _this._targetObject.style.removeProperty('background-image');
        } else {
            val = val.replace(/^\.\//, '');
            _this._targetObject.style.backgroundImage = 'url(\'' + val + '\')';
        }

        _this.setStep(function () {
            _this.setImage(saveVal, val);
        });
    }
});

BackgroundImageES.prototype.constructor = BackgroundImageES;

var BackgroundPositionES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._position = _this._targetObject.style.backgroundPosition
        ? _this._targetObject.style.backgroundPosition : '';

    BgPosition.call(this, {
        menu: []
        , title: 'Background position'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._position;
        }
    });
};

BackgroundPositionES.prototype = Object.assign(Object.create(BgPosition.prototype), {
    _addEventListToBgPositionItems: function(bgPosition, eventName) {
        var _this = this;
        bgPosition.addEventListener('click', function(e){
            var index = _this.cells.indexOf(e.target);
            var val = '';

            if (e.target.classList.contains('active')) {
                e.target.classList.remove('active');
            } else {

                var activeItem = bgPosition.querySelector('.item.active');
                if (activeItem) {
                    activeItem.classList.remove('active');
                }

                e.target.classList.add('active');

                if (index === 0) {
                    val = 'left top';
                }

                if (index === 1) {
                    val = 'center top';
                }

                if (index === 2) {
                    val = 'right top';
                }

                if (index === 3) {
                    val = 'left center';
                }

                if (index === 4) {
                    val = 'center center';
                }

                if (index === 5) {
                    val = 'right center';
                }

                if (index === 6) {
                    val = 'left bottom';
                }

                if (index === 7) {
                    val = 'center bottom';
                }

                if (index === 8) {
                    val = 'right bottom';
                }
            }

            var saveVal = _this._position;
            _this._position = val;

            _this.setPosition(val, saveVal);
        });
    }
    , setPosition: function (val, saveVal) {
        var _this = this;

        if (val === '') {
            _this._targetObject.style.removeProperty('background-position');
        } else {
            _this._targetObject.style.backgroundPosition = val;
        }

        _this.setStep(function () {
            _this.setPosition(saveVal, val);
        });
    }
});

BackgroundPositionES.prototype.constructor = BackgroundPositionES;
var BackgroundRepeatES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    if (
        !Array.isArray(typographyFonts)
    ) {
        throw new TypeError("Expected type of Array");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._repeat = _this._targetObject.style.backgroundRepeat;

    DropDown.call(this, {
        menu: ['-', 'repeat', 'repeat-x', 'repeat-y', 'no-repeat']
        , title: 'Background repeat'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._repeat;
        }
    });
};

BackgroundRepeatES.prototype = Object.assign(Object.create(DropDown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = firstDown(element.innerHTML);
                button.dataset.value = replaceSpace(val);
                button.querySelector('span').innerHTML = firstUp(val);

                var saveVal = _this._repeat;
                _this._repeat = val;

                _this.setRepeat(val, saveVal);
            });
        });
    }
    , setRepeat: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('background-repeat');
        } else {
            _this._targetObject.style.backgroundRepeat = val;
        }

        _this.setStep(function () {
            _this.setRepeat(saveVal, val);
        });
    }
});

BackgroundRepeatES.prototype.constructor = BackgroundRepeatES;
var BackgroundSizeES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._size = '';

    BgSize.call(this, {
        menu: [
            '-'
            , 'Auto'
            , 'Cover'
            , 'Contain'
            , 'Custom (width x height)'
        ]
        , title: 'Background size'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            var bgOptions = _this._targetObject.style.backgroundSize;
            var WidthVal = 'auto';
            var HeightVal = 'auto';

            if (bgOptions !== 'auto' || bgOptions !== 'cover') {
                var WidthValMatch = bgOptions ? bgOptions.match(/([0-9]*(?:px|%)|auto)(?:\s|$)/i) : null;
                WidthVal = WidthValMatch ? WidthValMatch[1] : 'auto';
            }

            if (bgOptions !== 'auto' || bgOptions !== 'cover') {
                var HeightValMatch = bgOptions ? bgOptions.match(/\s([0-9]*(?:px|%)|auto)/i) : null;
                HeightVal = HeightValMatch ? HeightValMatch[1] : 'auto';
            }

            if (bgOptions === 'auto' || bgOptions === 'cover' || bgOptions === 'contain') {
                return _this._size = bgOptions;
            } else if (/px|%/.test(bgOptions)) {
                return _this._size = WidthVal + ' ' + HeightVal;
            }
            return '-';
        }
    });
};

BackgroundSizeES.prototype = Object.assign(Object.create(BgSize.prototype), {
    _addEventListToSizeInput: function(bgSize, eventName) {
        var _this = this;
        var inputs = bgSize.querySelectorAll('.size-input input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var width = bgSize.querySelector('.width').value;
                var height = bgSize.querySelector('.height').value;

                width = width === '' ? 'auto' : width;
                height = height === '' ? 'auto' : height;

                var val = width + ' ' + height;

                var saveVal = _this._size;
                _this._size = val;

                _this.setBgSize(val, saveVal);
            });
        });
    }
    , _addEventListToBgSizeDropdown: function(bgSize) {
        var _this = this;
        var options = bgSize.querySelectorAll('li a');
        var button = bgSize.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML.toLowerCase();
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = firstUp(val);

                if (element.innerHTML.toLowerCase() === 'custom (width x height)') {
                    bgSize.classList.add('show-custom-size');
                    var width = bgSize.querySelector('.width').value;
                    var height = bgSize.querySelector('.height').value;

                    width = width === '' ? 'auto' : width;
                    height = height === '' ? 'auto' : height;

                    val = width + ' ' + height;
                }

                if (element.innerHTML.toLowerCase() !== 'custom (width x height)'
                    && bgSize.classList.contains('show-custom-size')) {
                    bgSize.classList.remove('show-custom-size');
                }


                var saveVal = _this._size;
                _this._size = val;

                _this.setBgSize(val, saveVal);
            });
        });
    }
    , setBgSize: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('background-size');
        } else {
            _this._targetObject.style.backgroundSize = val;
        }

        _this.setStep(function () {
            _this.setBgSize(saveVal, val);
        });
    }
});

BackgroundSizeES.prototype.constructor = BackgroundSizeES;
var BorderColorES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._borderColor = this._targetObject.style.borderColor;

    Colorpicker.call(this, {
        title: 'Border color'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._borderColor;
        }
    });
};

BorderColorES.prototype = Object.assign(Object.create(Colorpicker.prototype), {
    _listenerToColorpiker: function(color) {
        var _this = this;
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        var saveVal = _this._borderColor;
        _this._borderColor = val;

        _this.setBorderColor(val, saveVal);
    }
    , setBorderColor: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('border-color');
        } else {
            _this._targetObject.style.borderColor = val;
        }

        _this.setStep(function () {
            _this.setBorderColor(saveVal, val);
        });
    }
});

BorderColorES.prototype.constructor = BorderColorES;
var BorderRadiusES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._borderRadius = this._targetObject.style.borderRadius;

    BaseBorderRadius.call(this, {
        title: 'Border radius'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._borderRadius;
        }
    });
};

BorderRadiusES.prototype = Object.assign(Object.create(BaseBorderRadius.prototype), {
    _addEventListToBorderRadiusInput: function(borderRadius, eventName) {
        var _this = this;
        var inputs = borderRadius.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var topLeft = borderRadius.querySelector('input.top-left').value;
                var topRight = borderRadius.querySelector('input.top-right').value;
                var bottomLeft = borderRadius.querySelector('input.bottom-left').value;
                var bottomRight = borderRadius.querySelector('input.bottom-right').value;

                topLeft = topLeft === '' ? '0' : topLeft;
                topRight = topRight === '' ? '0' : topRight;
                bottomRight = bottomRight === '' ? '0' : bottomRight;
                bottomLeft = bottomLeft === '' ? '0' : bottomLeft;

                var val = topLeft + ' ' + topRight + ' ' + bottomRight + ' ' + bottomLeft;

                _this._targetObject.style.borderRadius = val;
            });
        });

        Array.prototype.forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                e.preventDefault();

                var topLeft = borderRadius.querySelector('input.top-left').value;
                var topRight = borderRadius.querySelector('input.top-right').value;
                var bottomLeft = borderRadius.querySelector('input.bottom-left').value;
                var bottomRight = borderRadius.querySelector('input.bottom-right').value;

                topLeft = topLeft === '' ? '0' : topLeft;
                topRight = topRight === '' ? '0' : topRight;
                bottomRight = bottomRight === '' ? '0' : bottomRight;
                bottomLeft = bottomLeft === '' ? '0' : bottomLeft;

                var val = topLeft + ' ' + topRight + ' ' + bottomRight + ' ' + bottomLeft;

                var saveVal = _this._borderRadius;
                _this._borderRadius = val;

                _this.setBorderRadius(val, saveVal);
            });
        });
    }
    , setBorderRadius: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('border-radius');
        } else {
            _this._targetObject.style.borderRadius = val;
        }

        _this.setStep(function () {
            _this.setBorderRadius(saveVal, val);
        });
    }
});

BorderRadiusES.prototype.constructor = BorderRadiusES;
var BorderStyleES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._borderStyle = this._targetObject.style.borderStyle;


    HalfDropdown.call(this, {
        menu: ['-', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset']
        , title: 'Border style'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return firstUp(_this._borderStyle);
        }
    });
};

BorderStyleES.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var saveVal = _this._borderRadius;
                _this._borderRadius = val;

                _this.setBorderStyle(val, saveVal);

            });
        });
    }
    , setBorderStyle: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('border-style');
        } else {
            _this._targetObject.style.borderStyle = val;
        }

        _this.setStep(function () {
            _this.setBorderStyle(saveVal, val);
        });
    }
});

BorderStyleES.prototype.constructor = BorderStyleES;
var BorderWidthES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._borderWidht = this._targetObject.style.borderWidth;

    BaseBorderWidth.call(this, {
        title: 'Border width'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._borderWidht;
        }
    });
};

BorderWidthES.prototype = Object.assign(Object.create(BaseBorderWidth.prototype), {
    _addEventListToBorderWidthInput: function(borderWidth, eventName) {
        var _this = this;
        var inputs = borderWidth.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = borderWidth.querySelector('input.top').value;
                var right = borderWidth.querySelector('input.right').value;
                var bottom = borderWidth.querySelector('input.bottom').value;
                var left = borderWidth.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                _this._targetObject.style.borderWidth = val;
            });
        });

        Array.prototype.forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                e.preventDefault();

                var top = borderWidth.querySelector('input.top').value;
                var right = borderWidth.querySelector('input.right').value;
                var bottom = borderWidth.querySelector('input.bottom').value;
                var left = borderWidth.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                var saveVal = _this._borderWidht;
                _this._borderWidht = val;

                _this.setBorderWidth(val, saveVal);
            });
        });
    }
    , setBorderWidth: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('border-width');
        } else {
            _this._targetObject.style.borderWidth = val;
        }

        _this.setStep(function () {
            _this.setBorderWidth(saveVal, val);
        });
    }
});

BorderWidthES.prototype.constructor = BorderWidthES;
var BoxShadowES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._boxShadow = this._targetObject.style.boxShadow;

    FourthInput.call(this, {
        title: 'Box shadow'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._boxShadow;
        }
    });
};

BoxShadowES.prototype = Object.assign(Object.create(FourthInput.prototype), {
    _listenerToFourthInputCp: function(color) {
        var _this = this;
        var inputs = this._selfDOM.querySelectorAll('input');
        var val = '';

        Array.prototype.forEach.call(inputs, function(input, indx){
            var postfix = '';
            var value = input.value === '' ? '0' : input.value;
            if (input.classList.contains('spectrum')) value = /rgba/.test(color.toRgbString()) ?
                color.toRgbString() : color.toHexString();
            if (indx !== inputs.length - 1) postfix = ' ';
            val += value + postfix;
        });

        var saveVal = _this._boxShadow;
        _this._boxShadow = val;

        _this.setBoxShadow(val, saveVal);
    }
    , _addEventListToFourthInput: function(fourthInput) {
        var _this = this;
        var inputs = fourthInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                _this._targetObject.style.boxShadow = val;
            });
        });

        Array.prototype.forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                var saveVal = _this._boxShadow;
                _this._boxShadow = val;

                _this.setBoxShadow(val, saveVal);
            });
        });
    }
    , setBoxShadow: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('box-shadow');
        } else {
            _this._targetObject.style.boxShadow = val;
        }

        _this.setStep(function () {
            _this.setBoxShadow(saveVal, val);
        });
    }
});

BoxShadowES.prototype.constructor = BoxShadowES;
var CoordinatesES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    var top = this._targetObject.style.top || 'auto';
    var right = this._targetObject.style.right || 'auto';
    var bottom = this._targetObject.style.bottom || 'auto';
    var left = this._targetObject.style.left || 'auto';
    this._coordinates = top + ' ' + right + ' ' + bottom + ' ' + left;

    BaseCoordinates.call(this, {
        title: 'Coordinates'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._coordinates;
        }
    });
};

CoordinatesES.prototype = Object.assign(Object.create(BaseCoordinates.prototype), {
    _addEventListTobCoordinatesInput: function(bCoordinates, eventName) {
        var _this = this;
        var inputs = bCoordinates.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = bCoordinates.querySelector('input.top').value;
                var right = bCoordinates.querySelector('input.right').value;
                var bottom = bCoordinates.querySelector('input.bottom').value;
                var left = bCoordinates.querySelector('input.left').value;

                top = top === '' ? 'auto' : top;
                right = right === '' ? 'auto' : right;
                bottom = bottom === '' ? 'auto' : bottom;
                left = left === '' ? 'auto' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                if (top === '' && right === '' && bottom === '' && left === '') val = '';

                _this.setCoordinates(val);
            });
        });

        Array.prototype.forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                e.preventDefault();

                var top = bCoordinates.querySelector('input.top').value;
                var right = bCoordinates.querySelector('input.right').value;
                var bottom = bCoordinates.querySelector('input.bottom').value;
                var left = bCoordinates.querySelector('input.left').value;

                top = top === '' ? 'auto' : top;
                right = right === '' ? 'auto' : right;
                bottom = bottom === '' ? 'auto' : bottom;
                left = left === '' ? 'auto' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                if (top === '' && right === '' && bottom === '' && left === '') val = '';

                var saveVal = _this._coordinates;
                _this._coordinates = val;

                _this.setCoordinatesWithHistory(val, saveVal);
            });
        });
    }
    , setCoordinates: function (val) {
        var _this = this;
        var match = ['', '', '', ''];

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('top');
            _this._targetObject.style.removeProperty('right');
            _this._targetObject.style.removeProperty('bottom');
            _this._targetObject.style.removeProperty('left');
        } else {
            match = val.split(' ');
        }

        if (match[0] && match[0] !== 'auto') {
            _this._targetObject.style.top = match[0];
        } else {
            _this._targetObject.style.removeProperty('top');
        }

        if (match[1] && match[1] !== 'auto') {
            _this._targetObject.style.right = match[1];
        } else {
            _this._targetObject.style.removeProperty('right');
        }

        if (match[2] && match[2] !== 'auto') {
            _this._targetObject.style.bottom = match[2];
        } else {
            _this._targetObject.style.removeProperty('bottom');
        }

        if (match[3] && match[3] !== 'auto') {
            _this._targetObject.style.left = match[3];
        } else {
            _this._targetObject.style.removeProperty('left');
        }
    }
    , setCoordinatesWithHistory: function (val, saveVal) {
        var _this = this;
        _this.setCoordinates(val);

        _this.setStep(function () {
            _this.setCoordinatesWithHistory(saveVal, val);
        });
    }
});

CoordinatesES.prototype.constructor = CoordinatesES;
var FillColorES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._color = this._targetObject.style.fill;

    Colorpicker.call(this, {
        title: 'Fill color'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._color;
        }
    });
};

FillColorES.prototype = Object.assign(Object.create(Colorpicker.prototype), {
    _listenerToColorpiker: function(color) {
        var _this = this;
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        var saveVal = _this._color;
        _this._color = val;

        _this.setFillColor(val, saveVal);
    }
    , setFillColor: function (val, saveVal) {
        var _this = this;

        if (val === 'rgba(0, 0, 0, 0)' || val === '') {
            _this._targetObject.style.removeProperty('fill');
        } else {
            _this._targetObject.style.fill = val;
        }

        _this.setStep(function () {
            _this.setFillColor(saveVal, val);
        });
    }
});

FillColorES.prototype.constructor = FillColorES;
var FontColorES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._color = this._targetObject.style.color;

    Colorpicker.call(this, {
        title: 'Font color'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._color;
        }
    });
};

FontColorES.prototype = Object.assign(Object.create(Colorpicker.prototype), {
    _listenerToColorpiker: function(color) {
        var _this = this;
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        var saveVal = _this._color;
        _this._color = val;

        _this.setFontColor(val, saveVal);
    }
    , setFontColor: function (val, saveVal) {
        var _this = this;

        if (val === 'rgba(0, 0, 0, 0)' || val === '') {
            _this._targetObject.style.removeProperty('color');
        } else {
            _this._targetObject.style.color = val;
        }

        _this.setStep(function () {
            _this.setFontColor(saveVal, val);
        });
    }
});

FontColorES.prototype.constructor = FontColorES;
var FontFamilyES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    if (
        !Array.isArray(typographyFonts)
    ) {
        throw new TypeError("Expected type of Array");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._fontFamily = this._targetObject.style.fontFamily;

    DropDown.call(this, {
        title: 'Font family'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._fontFamily;
        }
    });
};

FontFamilyES.prototype = Object.assign(Object.create(DropDown.prototype), {
    _createElement: function(args) {
        var dropDown = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        dropDown.className = 'item cs-element dropdown-el-full' + classItem;
        dropDown.dataset.order = args.order;

        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">'
            + '<li><a href="#" style="font-family: \'none\';">-</a></li>';
        typographyFonts.forEach(function (el) {
            ul += '<li><a href="#" style="font-family: \''+ el.font_family +'\';">' + firstUp(el.font_name) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = '-';
        var curentValue = '-';
        var callBackVal = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        if (callBackVal !== '') {
            var curentValue = callBackVal;
            visibleCValue = curentValue;
            if (args.mode !== 'lower') {
                visibleCValue = this.fromCamelCase(curentValue);
            }
        }

        curentValue = replaceSpace(curentValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';

        dropDown.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn dropdown-toggle d-flex justify-content-between align-items-center '
            + args.elClass + '" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '" style="font-family: ' + curentValue + ';">'
            + '<span>' + visibleCValue + '</span>'
            + '</button>'
            + ul
            + '</div>';

        this._addEventListToDropdown(dropDown);


        this._countDropDown ++;

        this._selfDOM = dropDown;
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                var style = element.getAttribute('style');
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;
                button.setAttribute('style', style);

                var saveVal = _this._fontFamily;
                _this._fontFamily = button.style.fontFamily;

                _this.setFontFamily(button.style.fontFamily, saveVal);
            });
        });
    }
    , setFontFamily: function (val, saveVal) {
        var _this = this;

        if (val === 'none' || val === '-') {
            _this._targetObject.style.removeProperty('font-family');
        } else {
            _this._targetObject.style.fontFamily = val;
        }

        _this.setStep(function () {
            _this.setFontFamily(saveVal, val);
        });
    }
});

FontFamilyES.prototype.constructor = FontFamilyES;

var FontSizeES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._fontSize = this._targetObject.style.fontSize;

    HalfInput.call(this, {
        title: 'Font size'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._fontSize;
        }
    });
};

FontSizeES.prototype = Object.assign(Object.create(HalfInput.prototype), {
    _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            _this._targetObject.style.fontSize = val;
        });

        halfInput.querySelector('input').addEventListener('blur', function(e){
            e.preventDefault();
            var val = this.value;

            var saveVal = _this._fontSize;
            _this._fontSize = val;

            _this.setFontSize(val, saveVal);
        });
    }
    , setFontSize: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('font-size');
        } else {
            _this._targetObject.style.fontSize = val;
        }

        _this.setStep(function () {
            _this.setFontSize(saveVal, val);
        });
    }
});

FontSizeES.prototype.constructor = FontSizeES;
var FontStyleES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._fontStyle = this._targetObject.style.fontStyle;

    HalfDropdown.call(this, {
        menu: ['-', 'normal', 'italic']
        , title: 'Font style'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return firstUp(_this._fontStyle);
        }
    });
};

FontStyleES.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var saveVal = _this._fontStyle;
                _this._fontStyle = val;

                _this.setFontStyle(val, saveVal);
            });
        });
    }
    , setFontStyle: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('font-style');
        } else {
            _this._targetObject.style.fontStyle = val;
        }

        _this.setStep(function () {
            _this.setFontStyle(saveVal, val);
        });
    }
});

FontStyleES.prototype.constructor = FontStyleES;
var FontWeightES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._fontWeight = this._targetObject.style.fontWeight;

    HalfDropdown.call(this, {
        menu: ['-', 'normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900' ]
        , title: 'Font Weight'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return firstUp(_this._fontWeight);
        }
    });
};

FontWeightES.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var saveVal = _this._fontWeight;
                _this._fontWeight = val;

                _this.setFontWeight(val, saveVal);
            });
        });
    }
    , setFontWeight: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('font-weight');
        } else {
            _this._targetObject.style.fontWeight = val;
        }

        _this.setStep(function () {
            _this.setFontWeight(saveVal, val);
        });
    }
});

FontWeightES.prototype.constructor = FontWeightES;
var LetterSpacingES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._letterSpacing = this._targetObject.style.letterSpacing;

    HalfInput.call(this, {
        title: 'Letter Spacing'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._letterSpacing;
        }
    });
};

LetterSpacingES.prototype = Object.assign(Object.create(HalfInput.prototype), {
    _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            _this._targetObject.style.letterSpacing = val;
        });

        halfInput.querySelector('input').addEventListener('blur', function(e){
            e.preventDefault();
            var val = this.value;

            var saveVal = _this._letterSpacing;
            _this._letterSpacing = val;

            _this.setLetterSpacing(val, saveVal);
        });
    }
    , setLetterSpacing: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('letter-spacing');
        } else {
            _this._targetObject.style.letterSpacing = val;
        }

        _this.setStep(function () {
            _this.setLetterSpacing(saveVal, val);
        });
    }
});

LetterSpacingES.prototype.constructor = LetterSpacingES;
var LineHeightES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._lineHeight = this._targetObject.style.lineHeight;

    HalfInput.call(this, {
        title: 'Line height'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._lineHeight;
        }
    });
};

LineHeightES.prototype = Object.assign(Object.create(HalfInput.prototype), {
    _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            _this._targetObject.style.lineHeight = val;
        });

        halfInput.querySelector('input').addEventListener('blur', function(e){
            e.preventDefault();
            var val = this.value;

            var saveVal = _this._lineHeight;
            _this._lineHeight = val;

            _this.setLineHeight(val, saveVal);
        });
    }
    , setLineHeight: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('line-height');
        } else {
            _this._targetObject.style.lineHeight = val;
        }

        _this.setStep(function () {
            _this.setLineHeight(saveVal, val);
        });
    }
});

LineHeightES.prototype.constructor = LineHeightES;
var MarginES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._min = -1000;
    this._targetObject = options.targetObject;
    var margin = _this._targetObject.style.margin;
    var mTop = _this._targetObject.style.marginTop || '0px';
    var mBottom = _this._targetObject.style.marginBottom || '0px';
    var mRight = _this._targetObject.style.marginRight || '0px';
    var mLeft = _this._targetObject.style.marginLeft || '0px';

    var elementStyleMargin = margin.match(/([^\s]*)\s*([^\s]*)\s*([^\s]*)\s*([^\s]*)/);
    if (elementStyleMargin[0] !== '') {
        mTop = elementStyleMargin[1];
        mRight = elementStyleMargin[2] ? elementStyleMargin[2] : elementStyleMargin[1];
        mBottom = elementStyleMargin[3] ? elementStyleMargin[3] : elementStyleMargin[1];
        mLeft = elementStyleMargin[4] ? elementStyleMargin[4] : elementStyleMargin[1];

        if (elementStyleMargin[4] === '' && elementStyleMargin[2] !== '') {
            mLeft = elementStyleMargin[2];
        }
    }

    this._margin = mTop + ' ' + mRight + ' ' + mBottom + ' ' + mLeft;

    PaddingMargin.call(this, {
        title: 'Margin'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._margin;
        }
    });
};

MarginES.prototype = Object.assign(Object.create(PaddingMargin.prototype), {
    _addEventListToPmInput: function(pmInput, eventName) {
        var _this = this;
        var inputs = pmInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = pmInput.querySelector('input.top').value;
                var right = pmInput.querySelector('input.right').value;
                var bottom = pmInput.querySelector('input.bottom').value;
                var left = pmInput.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                _this._targetObject.style.margin = val;
            });
        });

        Array.prototype.forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                var parent = this.parentElement;
                var top = parent.querySelector('.top').value || '0';
                var right = parent.querySelector('.right').value || '0';
                var bottom = parent.querySelector('.bottom').value || '0';
                var left = parent.querySelector('.left').value || '0';
                var val = top + ' ' + right + ' ' + bottom + ' ' + left;
                var saveValue = _this._margin;
                _this._margin = val;

                _this.setMargin(val, saveValue);
            });
        });
    }
    , setMargin: function (val, saveVal) {
        var _this = this;

        _this._targetObject.style.removeProperty('margin-top');
        _this._targetObject.style.removeProperty('margin-right');
        _this._targetObject.style.removeProperty('margin-bottom');
        _this._targetObject.style.removeProperty('margin-left');

        if (val === '0px 0px 0px 0px' || val === '0 0 0 0') {
            _this._targetObject.style.removeProperty('margin');
        } else {
            _this._targetObject.style.margin = val;
        }

        _this.setStep(function () {
            _this.setMargin(saveVal, val);
        });
    }
});

MarginES.prototype.constructor = MarginES;
var PaddingES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    var padding = _this._targetObject.style.padding;
    var pTop = _this._targetObject.style.paddingTop || '0px';
    var pBottom = _this._targetObject.style.paddingBottom || '0px';
    var pRight = _this._targetObject.style.paddingRight || '0px';
    var pLeft = _this._targetObject.style.paddingLeft || '0px';

    var elementStylePadding = padding.match(/([^\s]*)\s*([^\s]*)\s*([^\s]*)\s*([^\s]*)/);
    if (elementStylePadding[0] !== '') {
        pTop = elementStylePadding[1];
        pRight = elementStylePadding[2] ? elementStylePadding[2] : elementStylePadding[1];
        pBottom = elementStylePadding[3] ? elementStylePadding[3] : elementStylePadding[1];
        pLeft = elementStylePadding[4] ? elementStylePadding[4] : elementStylePadding[1];

        if (elementStylePadding[4] === '' && elementStylePadding[2] !== '') {
            pLeft = elementStylePadding[2];
        }
    }

    this._padding = pTop + ' ' + pRight + ' ' + pBottom + ' ' + pLeft;

    PaddingMargin.call(this, {
        title: 'Padding'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._padding;
        }
    });
};

PaddingES.prototype = Object.assign(Object.create(PaddingMargin.prototype), {
    _addEventListToPmInput: function(pmInput, eventName) {
        var _this = this;
        var inputs = pmInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = pmInput.querySelector('input.top').value;
                var right = pmInput.querySelector('input.right').value;
                var bottom = pmInput.querySelector('input.bottom').value;
                var left = pmInput.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                _this._targetObject.style.padding = val;
            });
        });

        [].forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                var parent = this.parentElement;
                var top = parent.querySelector('.top').value || '0';
                var right = parent.querySelector('.right').value || '0';
                var bottom = parent.querySelector('.bottom').value || '0';
                var left = parent.querySelector('.left').value || '0';

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                var saveValue = _this._padding;
                _this._padding = val;

                _this.setPadding(val, saveValue);
            });
        });
    }
    , setPadding: function (val, saveVal) {
        var _this = this;

        _this._targetObject.style.removeProperty('padding-top');
        _this._targetObject.style.removeProperty('padding-right');
        _this._targetObject.style.removeProperty('padding-bottom');
        _this._targetObject.style.removeProperty('padding-left');

        if (val === '0px 0px 0px 0px' || val === '0 0 0 0') {
            _this._targetObject.style.removeProperty('padding');
        } else {
            _this._targetObject.style.padding = val;
        }

        _this.setStep(function () {
            _this.setPadding(saveVal, val);
        });
    }
});

PaddingES.prototype.constructor = PaddingES;
var PositionES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._position = this._targetObject.style.position;

    HalfDropdown.call(this, {
        menu: ['-', 'static', 'fixed', 'absolute', 'relative']
        , title: 'Position'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return firstUp(_this._position);
        }
    });
};

PositionES.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var saveVal = _this._position;
                _this._position = val;

                _this.setPosition(val, saveVal);
            });
        });
    }
    , setPosition: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('position');
        } else {
            _this._targetObject.style.position = val;
        }

        _this.setStep(function () {
            _this.setPosition(saveVal, val);
        });
    }
});

PositionES.prototype.constructor = PositionES;
var SizeES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    var width = this._targetObject.style.width || '';
    var height = this._targetObject.style.height || '';
    this._size = width + ' ' + height;

    HalfInput.call(this, {
        title: 'Size'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._size;
        }
    });
};

SizeES.prototype = Object.assign(Object.create(BaseSize.prototype), {
    _addEventListToSize: function(size, eventName) {
        var _this = this;
        var inputs = size.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var width = size.querySelector('.width');
                var height = size.querySelector('.height');

                if (_this._triggerProportion) {
                    var value = 'auto';

                    if (input.getAttribute('name') === 'width' && (input.value !== '' || input.value !== 'auto')) {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] / _this._proportion ) + match[2] : '';
                        height.value = value;
                    } else if (input.value !== '' || input.value !== 'auto') {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] * _this._proportion ) + match[2] : '';
                        width.value = value;
                    }
                }

                var val = width.value + ' ' + height.value;

                _this.setSize(val);
            });
        });

        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('blur', function (e) {
                e.preventDefault();

                var width = size.querySelector('.width');
                var height = size.querySelector('.height');

                if (_this._triggerProportion) {
                    var value = 'auto';

                    if (input.getAttribute('name') === 'width' && (input.value !== '' || input.value !== 'auto')) {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] / _this._proportion ) + match[2] : '';
                        height.value = value;
                    } else if (input.value !== '' || input.value !== 'auto') {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] * _this._proportion ) + match[2] : '';
                        width.value = value;
                    }
                }

                var val = width.value + ' ' + height.value;

                var saveVal = _this._size;
                _this._size = val;

                _this.setSizeWithHistory(val, saveVal);
            });
        });
    }
    , setSize: function (val) {
        var _this = this;

        var match = val.split(' ');

        if (match[0] === '' || match[0] === '-') {
            _this._targetObject.style.removeProperty('width');
        } else {
            _this._targetObject.style.width = match[0];
        }

        if (match[1] === '' || match[1] === '-') {
            _this._targetObject.style.removeProperty('height');
        } else {
            _this._targetObject.style.height = match[1];
        }
    }
    , setSizeWithHistory: function (val, saveVal) {
        var _this = this;

        _this.setSize(val);

        _this.setStep(function () {
            _this.setSizeWithHistory(saveVal, val);
        });
    }
});

SizeES.prototype.constructor = SizeES;
var StrokeColorES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._strokeColor = this._targetObject.style.stroke;

    Colorpicker.call(this, {
        title: 'Stroke color'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._strokeColor;
        }
    });
};

StrokeColorES.prototype = Object.assign(Object.create(Colorpicker.prototype), {
    _listenerToColorpiker: function(color) {
        var _this = this;
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        var saveVal = _this._strokeColor;
        _this._strokeColor = val;

        _this.setStrokeColor(val, saveVal);
    }
    , setStrokeColor: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('stroke');
        } else {
            _this._targetObject.style.stroke = val;
        }

        _this.setStep(function () {
            _this.setStrokeColor(saveVal, val);
        });
    }
});

StrokeColorES.prototype.constructor = StrokeColorES;
var TextDecorationES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._textDecoration = this._targetObject.style.textDecoration;

    HalfDropdown.call(this, {
        menu: ['-', 'none', 'underline', 'overline', 'line-through']
        , title: 'Text decoration'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return firstUp(_this._textDecoration);
        }
    });
};

TextDecorationES.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var saveVal = _this._textDecoration;
                _this._textDecoration = val;

                _this.setTextDecoration(val, saveVal);
            });
        });
    }
    , setTextDecoration: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('text-decoration');
        } else {
            _this._targetObject.style.textDecoration = val;
        }

        _this.setStep(function () {
            _this.setTextDecoration(saveVal, val);
        });
    }
});

TextDecorationES.prototype.constructor = TextDecorationES;
var TextShadowES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._textShadow = this._targetObject.style.textShadow;

    FourthInput.call(this, {
        title: 'Text shadow'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._textShadow;
        }
    });
};

TextShadowES.prototype = Object.assign(Object.create(FourthInput.prototype), {
    _listenerToFourthInputCp: function(color) {
        var _this = this;
        var inputs = this._selfDOM.querySelectorAll('input');
        var val = '';

        Array.prototype.forEach.call(inputs, function(input, indx){
            var postfix = '';
            var value = input.value === '' ? '0' : input.value;
            if (input.classList.contains('spectrum')) value = /rgba/.test(color.toRgbString()) ?
                color.toRgbString() : color.toHexString();
            if (indx !== inputs.length - 1) postfix = ' ';
            val += value + postfix;
        });

        var saveVal = _this._textShadow;
        _this._textShadow = val;

        _this.setTextShadow(val, saveVal);
    }
    , _addEventListToFourthInput: function(fourthInput) {
        var _this = this;
        var inputs = fourthInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                _this._targetObject.style.textShadow = val;
            });
        });

        Array.prototype.forEach.call(inputs, function (el) {
            el.addEventListener('blur', function (e) {
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                var saveVal = _this._textShadow;
                _this._textShadow = val;

                _this.setTextShadow(val, saveVal);
            });
        });
    }
    , setTextShadow: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('text-shadow');
        } else {
            _this._targetObject.style.textShadow = val;
        }

        _this.setStep(function () {
            _this.setTextShadow(saveVal, val);
        });
    }
});

TextShadowES.prototype.constructor = TextShadowES;
var TextTransformES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._textTransform = this._targetObject.style.textTransform;

    HalfDropdown.call(this, {
        menu: ['-', 'capitalize', 'uppercase', 'lowercase']
        , title: 'Text transform'
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return firstUp(_this._textTransform);
        }
    });
};

TextTransformES.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var saveVal = _this._textTransform;
                _this._textTransform = val;

                _this.setTextTransform(val, saveVal);
            });
        });
    }
    , setTextTransform: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('text-transform');
        } else {
            _this._targetObject.style.textTransform = val;
        }

        _this.setStep(function () {
            _this.setTextTransform(saveVal, val);
        });
    }
});

TextTransformES.prototype.constructor = TextTransformES;
var ZIndexES = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._targetObject = options.targetObject;
    this._zIndex = this._targetObject.style.zIndex;

    HalfInput.call(this, {
        title: 'z-index'
        , order: options.order || 999999
        , elClass: ''
        , postfix: ''
        , callback: function() {
            return _this._zIndex;
        }
    });
};

ZIndexES.prototype = Object.assign(Object.create(HalfInput.prototype), {
    _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            _this._targetObject.style.zIndex = val;
        });

        halfInput.querySelector('input').addEventListener('blur', function(e){
            e.preventDefault();
            var val = this.value;

            var saveVal = _this._zIndex;
            _this._zIndex = val;

            _this.setZIndex(val, saveVal);
        });
    }
    , setZIndex: function (val, saveVal) {
        var _this = this;

        if (val === '' || val === '-') {
            _this._targetObject.style.removeProperty('z-index');
        } else {
            _this._targetObject.style.zIndex = val;
        }

        _this.setStep(function () {
            _this.setZIndex(saveVal, val);
        });
    }
});

ZIndexES.prototype.constructor = ZIndexES;
var BackgroundColor = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };

    this._tag = options.tag;
    this._media = options.mediaMode;
    this._mode = options.mode;
    this._controlElements = options.controlElements;

    BgColor.call(this, {
        menu: [
            '-'
            , 'Solid color'
            , 'Radial gradient'
            , 'Vertical gradient'
            , 'Horizontal gradient'
            , 'Angle gradient'
        ]
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

BackgroundColor.prototype = Object.assign(Object.create(BgColor.prototype), {
    _beforeShowColorpicker: function () {
        if ( !this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
            this.leftPanel.getActivePanel().enableBookmark(this.leftPanel);
            this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
        }
    }
    , _hideColorpicker: function(bgColor, colorLast) {
        var bgColor1 = bgColor.querySelector('.spectrum.first');
        var bgColor2 = bgColor.querySelector('.spectrum.second');
        bgColor1.value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
            $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
        bgColor2.value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
            $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();

        this._listenerToBgColor();

        if (this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
            this.leftPanel.getActivePanel().disableBookmark(this.leftPanel);
            this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
        }
    }
    , selectValue: function (media, mode) {
        var bgColor = this._selfDOM;
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = this._getColorsAndValueOfMenu(mediaProperty[mode].value);

        if (value.bgStyleColor === 'Solid color' && !bgColor.classList.contains('solid')) {
            bgColor.classList.add('solid');
        } else if(value.bgStyleColor !== 'Solid color' && bgColor.classList.contains('solid')) {
            bgColor.classList.remove('solid');
        }

        var button = this._selfDOM.querySelector('button');
        button.dataset.value = replaceSpace(value.bgStyleColor);
        button.querySelector('span').innerHTML = firstUp(value.bgStyleColor);
        $(bgColor).find('.spectrum.first').spectrum("set", value.gradientColor1);
        $(bgColor).find('.spectrum.second').spectrum("set", value.gradientColor2);
    }
    , _listenerToBgColor: function(color) {
        var _this = this;
        var bgColor1 = this._selfDOM.querySelector('.spectrum.first');
        var bgColor2 = this._selfDOM.querySelector('.spectrum.second');
        var bgColor1value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
            $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
        var bgColor2value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
            $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();
        var val = this._changeCstmColor(bgColor1value, bgColor2value);

        var bgElementColor = this._selfDOM.querySelector('button').dataset.value.toLowerCase();
        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: bgElementColor !== 'solid_color' ? 'background-image' : 'background-color'
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }
    , _addEventListToBgColorDropdown: function(bgColor) {
        var _this = this;
        var options = bgColor.querySelectorAll('li a');
        var button = bgColor.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var item = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(item));
                button.querySelector('span').innerHTML = item;

                if (item === 'Solid color' && !bgColor.classList.contains('solid')) {
                    bgColor.classList.add('solid');
                } else if(item !== 'Solid color' && bgColor.classList.contains('solid')) {
                    bgColor.classList.remove('solid');
                }

                if (item === '-' && !bgColor.classList.contains('none')) {
                    bgColor.classList.add('none');
                } else if(item !== '-' && bgColor.classList.contains('none')) {
                    bgColor.classList.remove('none');
                }

                var bgColor1 = _this._selfDOM.querySelector('.spectrum.first');
                var bgColor2 = _this._selfDOM.querySelector('.spectrum.second');
                var bgColor1value = /rgba/.test($(bgColor1).spectrum("get").toRgbString()) ?
                    $(bgColor1).spectrum("get").toRgbString() : $(bgColor1).spectrum("get").toHexString();
                var bgColor2value = /rgba/.test($(bgColor2).spectrum("get").toRgbString()) ?
                    $(bgColor2).spectrum("get").toRgbString() : $(bgColor2).spectrum("get").toHexString();
                var val = _this._changeCstmColor(bgColor1value, bgColor2value);

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: item !== 'Solid color' ? 'background-image' : 'background-color'
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }

            });
        });
    }
});

BackgroundColor.prototype.constructor = BackgroundColor;
var BackgroundImage = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    ImagePreview.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

BackgroundImage.prototype = Object.assign(Object.create(ImagePreview.prototype), {
    _createElement: function(args) {
        var _this = this;
        var imagePreview = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        imagePreview.className = 'item cs-element input-img-preview'
            + classItem;
        imagePreview.dataset.order = args.order;

        var value = args.callback ? args.callback() : '';
        value = /url/.test(value) ? value.match(/url\(['"]?([^']*)['"]?\)/)[1] : '';

        imagePreview.innerHTML = '<label>' + args.title + '</label>'
            + '<figure>'
            + '<div class="wrap-hover">'
            + '<img src="' + value + '" '
            + 'alt="image">'
            + '<div class="img" style="display: none;"></div>'
            + '<div class="bg-test bg"></div>'
            + '<i class="icon-blr-lg-gallery flex-center before-square"></i>'
            + '</div>'
            + '<figcaption>350x680</figcaption>'
            + '<div class="modal-preloader">'
            + '<div class="wrapper">'
            + '<div class="timer"><div class="arrow_sec"></div><div class="arrow_min"></div></div>'
            + '</div>'
            + '</div>'
            + '</figure>'
            + '<div class="input-image">'
            + '<input type="text" value="' + value + '" class="choice-images">'
            + '<i class="icon-blr-gallery"></i>'
            + '</div>';

        var img = imagePreview.querySelector('img');
        var figcaption = imagePreview.querySelector('figcaption');
        img.addEventListener('load', function() {
            var format = 1.085;
            if (window.innerWidth < 501) format = 0.75;
            Modal.prototype._imageSizig(this.naturalWidth, this.naturalHeight, format, this);
            figcaption.innerHTML = this.naturalWidth + 'x' + this.naturalHeight;
        });

        if (value === '') img.style.display = 'none';

        var i = imagePreview.querySelectorAll('i');
        Array.prototype.forEach.call(i, function (el) {
            el.addEventListener('click', function() {
                var modGallery = new Modal('supra-modal-gallery', 'Gallery', {
                    parentModal: {
                        _selfDOM: imagePreview
                        , _elements: {
                            figure: imagePreview.querySelector('figure')
                        }
                    }
                    , targetElement: imagePreview.querySelector('.input-image')
                    , type: args.type || 'normal'
                });

                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }

                $(modGallery).on('hidden.bs.modal', function (e) {
                    var val = imagePreview.querySelector('.input-image input').value;
                    if (val === '') img.style.display = 'none';
                    else img.style.display = 'block';
                    _this._listenerToImagePreview(val);

                    if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                        _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                        _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                    }
                });
            });
        });

        var input = imagePreview.querySelector('.choice-images');

        input.addEventListener('blur', this._listenerToManualImagePreview.bind(this, input));

        this._selfDOM = imagePreview;
    }
    , selectValue: function (media, mode) {
        var imagePreview = this._selfDOM.querySelector('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = /#|rgba/.test(mediaProperty[mode].value)
            ? '' : mediaProperty[mode].value.replace(/url\('|'\)/g, '');
        var img = this._selfDOM.querySelector('img');
        var divImg = this._selfDOM.querySelector('.img');
        if (value === '') {
            img.style.display = 'none';
        } else {
            img.style.display = 'block';
            img.src = value;
            divImg.style.backgroundImage = 'url(\'' + value + '\')';
        }

        imagePreview.value = value;
    }
    , _listenerToImagePreview: function(src, eventName) {
        var _this = this;
        var val = src === '' ? '' : 'url(\'' + src + '\')';

        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: _this._properties.property
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }

    , _listenerToManualImagePreview: function(input) {
        var _this = this;
        var val = input.value === '' ? 'none' : 'url(\'' + input.value + '\')';

        if (val === 'none') {
            _this._selfDOM.querySelector('img').style.display = 'none';
        } else {
            _this._selfDOM.querySelector('img').style.display = 'block';
            _this._selfDOM.querySelector('img').src = input.value;
        }

        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: _this._properties.property
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }
});

BackgroundImage.prototype.constructor = BackgroundImage;

var BackgroundPosition = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._media = options.media;
    this._mode = options.mode;
    this._controlElements = options.controlElements;

    BgPosition.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

BackgroundPosition.prototype = Object.assign(Object.create(BgPosition.prototype), {
    selectValue: function (media, mode) {
        var bgPosition = this._selfDOM;
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value.split(' ');

        // var match = ['', ''];
        //
        // if (value !== 'none' && value !== '') {
        //     match = value.split(' ');
        // }

        var horizontal = value[0];
        var vertical = value[1];

        var activeItem = bgPosition.querySelector('.item.active');
        if (activeItem) {
            activeItem.classList.remove('active');
        }
        var item = bgPosition.querySelector('.item.' + vertical + '-' + horizontal);
        if (item) {
            item.classList.add('active');
        }
    }
    , _addEventListToBgPositionItems: function(bgPosition, eventName) {
        var _this = this;
        bgPosition.addEventListener('click', function(e){
            var index = _this.cells.indexOf(e.target);
            var val = '';

            if (e.target.classList.contains('active')) {
                e.target.classList.remove('active');
            } else {

                var activeItem = bgPosition.querySelector('.item.active');
                if (activeItem) {
                    activeItem.classList.remove('active');
                }

                e.target.classList.add('active');

                if (index === 0) {
                    val = 'left top';
                }

                if (index === 1) {
                    val = 'center top';
                }

                if (index === 2) {
                    val = 'right top';
                }

                if (index === 3) {
                    val = 'left center';
                }

                if (index === 4) {
                    val = 'center center';
                }

                if (index === 5) {
                    val = 'right center';
                }

                if (index === 6) {
                    val = 'left bottom';
                }

                if (index === 7) {
                    val = 'center bottom';
                }

                if (index === 8) {
                    val = 'right bottom';
                }
            }

            var cEvent = {'detail': {
                tag: _this._tag
                , mode: _this._controlElements._mode
                , media: _this._controlElements._media
                , property: _this._properties.property
                , value: val
                , valueLikeDefault: val ===
                _this._properties.media.default[_this._controlElements._mode].value
                && _this._controlElements._media !== 'default'
            }};

            var eventCheckSelect = new CustomEvent(
                'globalStyle.change'
                , cEvent
            );

            _this._issetOrNotIsset(null, null, cEvent);

            document.dispatchEvent(eventCheckSelect);

            if (!cEvent.detail.valueLikeDefault) {
                if (!_this._properties.media[_this._controlElements._media]) {
                    _this._properties.media[_this._controlElements._media] = {};
                    if (
                        !_this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode]
                    ) {
                        _this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode] = {
                            value: ''
                        };
                    }
                }
                _this._properties.media[_this._controlElements._media]
                    [_this._controlElements._mode].value = val;
            }
        });
    }
    , _addEventListToSizeInput: function(bgSize, eventName) {
        var _this = this;
        var inputs = bgSize.querySelectorAll('.size-input input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var width = bgSize.querySelector('.width').value;
                var height = bgSize.querySelector('.height').value;

                width = width === '' ? 'auto' : width;
                height = height === '' ? 'auto' : height;

                var val = width + ' ' + height;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
    , _addEventListToBgSizeDropdown: function(bgSize) {
        var _this = this;
        var options = bgSize.querySelectorAll('li a');
        var button = bgSize.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML.toLowerCase();
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = firstUp(val);

                if (element.innerHTML.toLowerCase() === 'custom (width x height)') {
                    bgSize.classList.add('show-custom-size');
                    var width = bgSize.querySelector('.width').value;
                    var height = bgSize.querySelector('.height').value;

                    width = width === '' ? 'auto' : width;
                    height = height === '' ? 'auto' : height;

                    val = width + ' ' + height;
                }

                if (element.innerHTML.toLowerCase() !== 'custom (width x height)'
                    && bgSize.classList.contains('show-custom-size')) {
                    bgSize.classList.remove('show-custom-size');
                }

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }

            });
        });
    }
});

BackgroundPosition.prototype.constructor = BackgroundPosition;
var BackgroundRepeat = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    if (
        !Array.isArray(typographyFonts)
    ) {
        throw new TypeError("Expected type of Array");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    DropDown.call(this, {
        menu: ['-', 'repeat', 'repeat-x', 'repeat-y', 'no-repeat']
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this.fromCamelCase(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

BackgroundRepeat.prototype = Object.assign(Object.create(DropDown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = this.fromCamelCase(mediaProperty[mode].value);
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = value;
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = firstDown(element.innerHTML);
                button.dataset.value = replaceSpace(val);
                button.querySelector('span').innerHTML = firstUp(val);

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }

            });
        });
    }
});

BackgroundRepeat.prototype.constructor = BackgroundRepeat;
var BackgroundSize = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._media = options.media;
    this._mode = options.mode;
    this._controlElements = options.controlElements;

    BgSize.call(this, {
        menu: [
            '-'
            , 'Auto'
            , 'Cover'
            , 'Contain'
            , 'Custom (width x height)'
        ]
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

BackgroundSize.prototype = Object.assign(Object.create(BgSize.prototype), {
    selectValue: function (media, mode) {
        var bgSize = this._selfDOM;
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value.split(' ');
        var button = bgSize.querySelector('button');

        if (value.length > 1) {
            button.dataset.value = replaceSpace('Custom (width x height)');
            button.querySelector('span').innerHTML = 'Custom (width x height)';
            bgSize.querySelector('.width').value = value[0];
            bgSize.querySelector('.height').value = value[1];
            if (!bgSize.classList.contains('show-custom-size')) {
                bgSize.classList.add('show-custom-size');
            }
        } else {
            var val = value[0] === '' ? '-' : value[0];
            button.dataset.value = replaceSpace(val);
            button.querySelector('span').innerHTML = firstUp(val);
            bgSize.querySelector('.width').value = '';
            bgSize.querySelector('.height').value = '';
            if (bgSize.classList.contains('show-custom-size')) {
                bgSize.classList.remove('show-custom-size');
            }
        }
    }
    , _addEventListToSizeInput: function(bgSize, eventName) {
        var _this = this;
        var inputs = bgSize.querySelectorAll('.size-input input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var width = bgSize.querySelector('.width').value;
                var height = bgSize.querySelector('.height').value;

                width = width === '' ? 'auto' : width;
                height = height === '' ? 'auto' : height;

                var val = width + ' ' + height;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
    , _addEventListToBgSizeDropdown: function(bgSize) {
        var _this = this;
        var options = bgSize.querySelectorAll('li a');
        var button = bgSize.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML.toLowerCase();
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = firstUp(val);

                if (element.innerHTML.toLowerCase() === 'custom (width x height)') {
                    bgSize.classList.add('show-custom-size');
                    var width = bgSize.querySelector('.width').value;
                    var height = bgSize.querySelector('.height').value;

                    width = width === '' ? 'auto' : width;
                    height = height === '' ? 'auto' : height;

                    val = width + ' ' + height;
                }

                if (element.innerHTML.toLowerCase() !== 'custom (width x height)'
                    && bgSize.classList.contains('show-custom-size')) {
                    bgSize.classList.remove('show-custom-size');
                }

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }

            });
        });
    }
});

BackgroundSize.prototype.constructor = BackgroundSize;
var BorderColor = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    Colorpicker.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

BorderColor.prototype = Object.assign(Object.create(Colorpicker.prototype), {
    _createElement: function(args) {
        var _this = this;
        var colorpicker = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        colorpicker.className = 'item cs-element d-flex justify-content-between align-items-center cs-colorpicker'
            + classItem;
        colorpicker.dataset.order = args.order;

        var value = args.callback ? args.callback() : '';
        value = value === '' ? 'transparent' : value;
        colorpicker.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" class="spectrum">';

        $(colorpicker).find('.spectrum').spectrum({
            color: value
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , change: _this._listenerToColorpiker.bind(_this)
            , beforeShow: function (color) {
                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }
            }
            , hide: function (colorLast) {
                _this._listenerToColorpiker(colorLast);

                if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                    _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                }
            }
        });

        this._selfDOM = colorpicker;
    }
    , selectValue: function (media, mode) {
        var colorpicker = this._selfDOM.querySelector('.spectrum');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? 'transparent' : value;
        $(colorpicker).spectrum("set", value);
    }
    , _listenerToColorpiker: function(color) {
        var _this = this;
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: _this._properties.property
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }
});

BorderColor.prototype.constructor = BorderColor;
var BorderRadius = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    BaseBorderRadius.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
        , leftPanel: options.leftPanel
    });
};

BorderRadius.prototype = Object.assign(Object.create(BaseBorderRadius.prototype), {
    selectValue: function (media, mode) {
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['', '', '', ''];

        if (value !== 'initial' && value !== '' && value !== 'none') {
            match = value.split(' ');
        }

        var topLeft = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var topRight = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottomRight = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var bottomLeft = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        this._selfDOM.querySelector('input.top-left').value = topLeft;
        this._selfDOM.querySelector('input.top-right').value = topRight;
        this._selfDOM.querySelector('input.bottom-left').value = bottomLeft;
        this._selfDOM.querySelector('input.bottom-right').value = bottomRight;
    }
    , _addEventListToBorderRadiusInput: function(borderRadius, eventName) {
        var _this = this;
        var inputs = borderRadius.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var topLeft = borderRadius.querySelector('input.top-left').value;
                var topRight = borderRadius.querySelector('input.top-right').value;
                var bottomLeft = borderRadius.querySelector('input.bottom-left').value;
                var bottomRight = borderRadius.querySelector('input.bottom-right').value;

                topLeft = topLeft === '' ? '0' : topLeft;
                topRight = topRight === '' ? '0' : topRight;
                bottomRight = bottomRight === '' ? '0' : bottomRight;
                bottomLeft = bottomLeft === '' ? '0' : bottomLeft;

                var val = topLeft + ' ' + topRight + ' ' + bottomRight + ' ' + bottomLeft;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

BorderRadius.prototype.constructor = BorderRadius;
var BorderStyle = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfDropdown.call(this, {
        menu: ['-', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset']
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return firstUp(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

BorderStyle.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = firstUp(value);
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: replaceSpace(firstDown(val))
                    , valueLikeDefault: replaceSpace(firstDown(val)) ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = replaceSpace(firstDown(val));
                }

            });
        });
    }
});

BorderStyle.prototype.constructor = BorderStyle;
var BorderWidth = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    BaseBorderWidth.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
        , leftPanel: options.leftPanel
    });
};

BorderWidth.prototype = Object.assign(Object.create(BaseBorderWidth.prototype), {
    selectValue: function (media, mode) {
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['', '', '', ''];

        if (value !== 'initial' && value !== '' && value !== 'none') {
            match = value.split(' ');
        }

        var top = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var right = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottom = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var left = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        this._selfDOM.querySelector('input.top').value = top;
        this._selfDOM.querySelector('input.right').value = right;
        this._selfDOM.querySelector('input.bottom').value = bottom;
        this._selfDOM.querySelector('input.left').value = left;
    }
    , _addEventListToBorderWidthInput: function(borderWidth, eventName) {
        var _this = this;
        var inputs = borderWidth.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = borderWidth.querySelector('input.top').value;
                var right = borderWidth.querySelector('input.right').value;
                var bottom = borderWidth.querySelector('input.bottom').value;
                var left = borderWidth.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

BorderWidth.prototype.constructor = BorderWidth;
var BoxShadow = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    FourthInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

BoxShadow.prototype = Object.assign(Object.create(FourthInput.prototype), {
    _createElement: function(args) {
        var _this = this;
        var fourthInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        fourthInput.className = 'item cs-element fourth-input-cp'
            + classItem;
        fourthInput.dataset.order = args.order;

        var value = args.callback ? args.callback() : '';

        if (!/[0-9]+\.?[0-9]*[^\s]*?\s[0-9]+\.?[0-9]*[^\s]*?\s[0-9]+\.?[0-9]*[^\s]*?\s(?:#[0-9abcdf]{3,6}|rgba\([^)]*\))|none|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px #ffffff'");
        }

        var match = ['', '', '', 'transparent'];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        fourthInput.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" placeholder="-" value="' + match[0] + '" class="">'
            + '<input type="text" placeholder="-" value="' + match[1] + '" class="">'
            + '<input type="text" placeholder="-" value="' + match[2] + '" class="">'
            + '<input type="text" class="spectrum">';

        $(fourthInput).find('.spectrum').spectrum({
            color: match[3]
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , change: _this._listenerToFourthInputCp.bind(_this)
            , beforeShow: function (color) {
                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }
            }
            , hide: function (colorLast) {
                _this._listenerToFourthInputCp(colorLast);

                if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                    _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                }
            }
        });

        this._addEventListToFourthInput(fourthInput);

        var inputs = fourthInput.querySelectorAll('input:not(.spectrum)');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = fourthInput;
    }
    , selectValue: function (media, mode) {
        var inputs = this._selfDOM.querySelectorAll('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['', '', '', 'transparent'];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        inputs[0].value = match[0];
        inputs[1].value = match[1];
        inputs[2].value = match[2];
        $(inputs[3]).spectrum("set", match[3]);
    }
    , _listenerToFourthInputCp: function(color) {
        var _this = this;
        var inputs = this._selfDOM.querySelectorAll('input');
        var val = '';

        Array.prototype.forEach.call(inputs, function(input, indx){
            var postfix = '';
            var value = input.value === '' ? '0' : input.value;
            if (input.classList.contains('spectrum')) value = /rgba/.test(color.toRgbString()) ?
                color.toRgbString() : color.toHexString();
            if (indx !== inputs.length - 1) postfix = ' ';
            val += value + postfix;
        });

        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: _this._properties.property
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }
    , _addEventListToFourthInput: function(fourthInput) {
        var _this = this;
        var inputs = fourthInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

BoxShadow.prototype.constructor = BoxShadow;
var Coordinates = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    BaseCoordinates.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

Coordinates.prototype = Object.assign(Object.create(BaseCoordinates.prototype), {
    selectValue: function (media, mode) {
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['auto', 'auto', 'auto', 'auto'];

        if (value !== 'none' && value !== '' && value !== 'auto') {
            match = value.split(' ');
        }

        var top = (match[0] === 'auto') ? '' : match[0];
        var right = (match[1] === 'auto') ? '' : match[1];
        var bottom = (match[2] === 'auto') ? '' : match[2];
        var left = (match[3] === 'auto') ? '' : match[3];

        this._selfDOM.querySelector('input.top').value = top;
        this._selfDOM.querySelector('input.right').value = right;
        this._selfDOM.querySelector('input.bottom').value = bottom;
        this._selfDOM.querySelector('input.left').value = left;
    }
    , _addEventListTobCoordinatesInput: function(bCoordinates, eventName) {
        var _this = this;
        var inputs = bCoordinates.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = bCoordinates.querySelector('input.top').value;
                var right = bCoordinates.querySelector('input.right').value;
                var bottom = bCoordinates.querySelector('input.bottom').value;
                var left = bCoordinates.querySelector('input.left').value;

                top = top === '' ? 'auto' : top;
                right = right === '' ? 'auto' : right;
                bottom = bottom === '' ? 'auto' : bottom;
                left = left === '' ? 'auto' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                if (top === 'none' && right === 'none' && bottom === 'none' && left === 'none') val = '';

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: input.getAttribute('name')
                    , value: input.value === '' ? 'auto' : input.value
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

Coordinates.prototype.constructor = Coordinates;
var FontColor = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    Colorpicker.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
        , leftPanel: options.leftPanel
    });
};

FontColor.prototype = Object.assign(Object.create(Colorpicker.prototype), {
    _createElement: function(args) {
        var _this = this;
        var colorpicker = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        colorpicker.className = 'item cs-element d-flex justify-content-between align-items-center cs-colorpicker'
            + classItem;
        colorpicker.dataset.order = args.order;

        var value = args.callback ? args.callback() : '';
        value = value === '' ? 'transparent' : value;
        colorpicker.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" class="spectrum">';

        $(colorpicker).find('.spectrum').spectrum({
            color: value
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , change: _this._listenerToColorpiker.bind(_this)
            , beforeShow: function (color) {
                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }
            }
            , hide: function (colorLast) {
                _this._listenerToColorpiker(colorLast);

                if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                    _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                }
            }
        });

        this._selfDOM = colorpicker;
    }
    , selectValue: function (media, mode) {
        var colorpicker = this._selfDOM.querySelector('.spectrum');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value === '' ? 'transparent' : mediaProperty[mode].value;
        $(colorpicker).spectrum("set", value);
    }
    , _listenerToColorpiker: function(color) {
        var _this = this;
        var val = /rgba/.test(color.toRgbString()) ?
            color.toRgbString() : color.toHexString();

        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: _this._properties.property
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }
});

FontColor.prototype.constructor = FontColor;
var FontFamily = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    if (
        !Array.isArray(typographyFonts)
    ) {
        throw new TypeError("Expected type of Array");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    DropDown.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

FontFamily.prototype = Object.assign(Object.create(DropDown.prototype), {
    _createElement: function(args) {
        var dropDown = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        dropDown.className = 'item cs-element dropdown-el-full' + classItem;
        dropDown.dataset.order = args.order;

        var ul = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu' + this._countDropDown + '">'
            + '<li><a href="#" style="font-family: \'none\';">-</a></li>';
        typographyFonts.forEach(function (el) {
            ul += '<li><a href="#" style="font-family: \''+ el.font_family +'\';">' + firstUp(el.font_name) + '</a></li>';
        });
        ul += '</ul>';

        var visibleCValue = '-';
        var curentValue = '-';
        var callBackVal = '';
        if (args.callback !== undefined) callBackVal = args.callback();
        if (callBackVal !== '') {
            var curentValue = callBackVal;
            visibleCValue = curentValue;
            if (args.mode !== 'lower') {
                visibleCValue = this.fromCamelCase(curentValue);
            }
        }

        curentValue = replaceSpace(curentValue);

        var title = args.title !== '' ? '<label>' + args.title + '</label>' : '';

        dropDown.innerHTML = title
            + '<div class="dropdown">'
            + '<button class="supra-btn dropdown-toggle d-flex justify-content-between align-items-center '
            + args.elClass + '" ' +
            'type="button" id="dropdownMenu' + this._countDropDown + '"' +
            'data-toggle="dropdown" ' +
            'aria-haspopup="true" aria-expanded="false"' +
            'data-value="' + curentValue + '" style="font-family: ' + curentValue + ';">'
            + '<span>' + visibleCValue + '</span>'
            + '</button>'
            + ul
            + '</div>';

        this._addEventListToDropdown(dropDown);


        this._countDropDown ++;

        this._selfDOM = dropDown;
    }
    , selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var valueStyle = mediaProperty[mode].value;
        valueStyle = valueStyle === '' ? '-' : valueStyle;
        var value = this.fromCamelCase(valueStyle);
        button.dataset.value = replaceSpace(value);
        button.setAttribute('style', 'font-family: ' + valueStyle + ';');
        button.querySelector('span').innerHTML = value;
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                var style = element.getAttribute('style');
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;
                button.setAttribute('style', style);

                var value = button.style.fontFamily !== 'none' ? "'" + button.style.fontFamily + "'" : '-';
                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: value
                    , valueLikeDefault: value ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = value;
                }

            });
        });
    }
});

FontFamily.prototype.constructor = FontFamily;

var FontSize = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

FontSize.prototype = Object.assign(Object.create(HalfInput.prototype), {
    selectValue: function (media, mode) {
        var halfInput = this._selfDOM.querySelector('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        halfInput.value = value;
    }
    , _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            val = val === '' ? 'inherit' : val;

            var cEvent = {'detail': {
                tag: _this._tag
                , mode: _this._controlElements._mode
                , media: _this._controlElements._media
                , property: _this._properties.property
                , value: val
                , valueLikeDefault: val ===
                _this._properties.media.default[_this._controlElements._mode].value
                && _this._controlElements._media !== 'default'
            }};

            var eventCheckSelect = new CustomEvent(
                'globalStyle.change'
                , cEvent
            );

            _this._issetOrNotIsset(null, null, cEvent);

            document.dispatchEvent(eventCheckSelect);

            if (!cEvent.detail.valueLikeDefault) {
                if (!_this._properties.media[_this._controlElements._media]) {
                    _this._properties.media[_this._controlElements._media] = {};
                    if (
                        !_this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode]
                    ) {
                        _this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode] = {
                            value: ''
                        };
                    }
                }

                _this._properties.media[_this._controlElements._media]
                    [_this._controlElements._mode].value = val;
            }
        });
    }
});

FontSize.prototype.constructor = FontSize;
var FontStyle = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfDropdown.call(this, {
        menu: ['-', 'normal', 'italic']
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return firstUp(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

FontStyle.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = firstUp(value);
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: replaceSpace(firstDown(val))
                    , valueLikeDefault: replaceSpace(firstDown(val)) ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = replaceSpace(firstDown(val));
                }

            });
        });
    }
});

FontStyle.prototype.constructor = FontStyle;
var FontWeight = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfDropdown.call(this, {
        menu: ['-', 'normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900' ]
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return firstUp(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

FontWeight.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = firstUp(value);
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: replaceSpace(firstDown(val))
                    , valueLikeDefault: replaceSpace(firstDown(val)) ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = replaceSpace(firstDown(val));
                }

            });
        });
    }
});

FontWeight.prototype.constructor = FontWeight;
var LetterSpacing = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

LetterSpacing.prototype = Object.assign(Object.create(HalfInput.prototype), {
    selectValue: function (media, mode) {
        var halfInput = this._selfDOM.querySelector('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        halfInput.value = value;
    }
    , _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            val = val === '' ? 'inherit' : val;

            var cEvent = {'detail': {
                tag: _this._tag
                , mode: _this._controlElements._mode
                , media: _this._controlElements._media
                , property: _this._properties.property
                , value: val
                , valueLikeDefault: val ===
                _this._properties.media.default[_this._controlElements._mode].value
                && _this._controlElements._media !== 'default'
            }};

            var eventCheckSelect = new CustomEvent(
                'globalStyle.change'
                , cEvent
            );

            _this._issetOrNotIsset(null, null, cEvent);

            document.dispatchEvent(eventCheckSelect);

            if (!cEvent.detail.valueLikeDefault) {
                if (!_this._properties.media[_this._controlElements._media]) {
                    _this._properties.media[_this._controlElements._media] = {};
                    if (
                        !_this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode]
                    ) {
                        _this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode] = {
                            value: ''
                        };
                    }
                }

                _this._properties.media[_this._controlElements._media]
                    [_this._controlElements._mode].value = val;
            }
        });
    }
});

LetterSpacing.prototype.constructor = LetterSpacing;
var LineHeight = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

LineHeight.prototype = Object.assign(Object.create(HalfInput.prototype), {
    selectValue: function (media, mode) {
        var halfInput = this._selfDOM.querySelector('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        halfInput.value = value;
    }
    , _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            val = val === '' ? 'inherit' : val;

            var cEvent = {'detail': {
                tag: _this._tag
                , mode: _this._controlElements._mode
                , media: _this._controlElements._media
                , property: _this._properties.property
                , value: val
                , valueLikeDefault: val ===
                _this._properties.media.default[_this._controlElements._mode].value
                && _this._controlElements._media !== 'default'
            }};

            var eventCheckSelect = new CustomEvent(
                'globalStyle.change'
                , cEvent
            );

            _this._issetOrNotIsset(null, null, cEvent);

            document.dispatchEvent(eventCheckSelect);

            if (!cEvent.detail.valueLikeDefault) {
                if (!_this._properties.media[_this._controlElements._media]) {
                    _this._properties.media[_this._controlElements._media] = {};
                    if (
                        !_this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode]
                    ) {
                        _this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode] = {
                            value: ''
                        };
                    }
                }

                _this._properties.media[_this._controlElements._media]
                    [_this._controlElements._mode].value = val;
            }
        });
    }
});

LineHeight.prototype.constructor = LineHeight;
var Margin = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    PaddingMargin.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
        , leftPanel: options.leftPanel
    });
};

Margin.prototype = Object.assign(Object.create(PaddingMargin.prototype), {
    selectValue: function (media, mode) {
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['', '', '', ''];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        var top = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var right = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottom = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var left = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        this._selfDOM.querySelector('input.top').value = top;
        this._selfDOM.querySelector('input.right').value = right;
        this._selfDOM.querySelector('input.bottom').value = bottom;
        this._selfDOM.querySelector('input.left').value = left;
    }
    , _addEventListToPmInput: function(pmInput, eventName) {
        var _this = this;
        var inputs = pmInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = pmInput.querySelector('input.top').value;
                var right = pmInput.querySelector('input.right').value;
                var bottom = pmInput.querySelector('input.bottom').value;
                var left = pmInput.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

Margin.prototype.constructor = Margin;
var Padding = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    PaddingMargin.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

Padding.prototype = Object.assign(Object.create(PaddingMargin.prototype), {
    selectValue: function (media, mode) {
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['', '', '', ''];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        var top = (match[0] === '0' || match[0] === '0px') ? '' : match[0];
        var right = (match[1] === '0' || match[1] === '0px') ? '' : match[1];
        var bottom = (match[2] === '0' || match[2] === '0px') ? '' : match[2];
        var left = (match[3] === '0' || match[3] === '0px') ? '' : match[3];

        this._selfDOM.querySelector('input.top').value = top;
        this._selfDOM.querySelector('input.right').value = right;
        this._selfDOM.querySelector('input.bottom').value = bottom;
        this._selfDOM.querySelector('input.left').value = left;
    }
    , _addEventListToPmInput: function(pmInput, eventName) {
        var _this = this;
        var inputs = pmInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var top = pmInput.querySelector('input.top').value;
                var right = pmInput.querySelector('input.right').value;
                var bottom = pmInput.querySelector('input.bottom').value;
                var left = pmInput.querySelector('input.left').value;

                top = top === '' ? '0' : top;
                right = right === '' ? '0' : right;
                bottom = bottom === '' ? '0' : bottom;
                left = left === '' ? '0' : left;

                var val = top + ' ' + right + ' ' + bottom + ' ' + left;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

Padding.prototype.constructor = Padding;
var Position = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfDropdown.call(this, {
        menu: ['-', 'static', 'fixed', 'absolute', 'relative']
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return firstUp(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

Position.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = firstUp(value);
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: replaceSpace(firstDown(val))
                    , valueLikeDefault: replaceSpace(firstDown(val)) ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = replaceSpace(firstDown(val));
                }

            });
        });
    }
});

Position.prototype.constructor = Position;
var Size = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

Size.prototype = Object.assign(Object.create(BaseSize.prototype), {
    selectValue: function (media, mode) {
        var size = this._selfDOM;
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === 'auto' ? ['', ''] : value.split(' ');

        size.querySelector('.width').value = value[0];
        size.querySelector('.height').value = value[1];
    }
    , _addEventListToSize: function(size, eventName) {
        var _this = this;
        var inputs = size.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keyup', function(e){
                e.preventDefault();

                var width = size.querySelector('.width');
                var height = size.querySelector('.height');

                if (_this._triggerProportion) {
                    var value = 'auto';

                    if (input.getAttribute('name') === 'width' && (input.value !== '' || input.value !== 'auto')) {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] / _this._proportion ) + match[2] : '';
                        height.value = value;
                    } else if (input.value !== '' || input.value !== 'auto') {
                        var match = input.value.match(/([0-9]+\.?[0-9]*)([^0-9]*)/);
                        value = match ? Math.round( match[1] * _this._proportion ) + match[2] : '';
                        width.value = value;
                    }

                    var cEventP = {'detail': {
                        tag: _this._tag
                        , mode: _this._controlElements._mode
                        , media: _this._controlElements._media
                        , property: input.getAttribute('name') === 'width' ? 'height' : 'width'
                        , value: value === '' ? 'auto' : value
                        , valueLikeDefault: width.value + ' ' + height.value ===
                        _this._properties.media.default[_this._controlElements._mode].value
                        && _this._controlElements._media !== 'default'
                    }};

                    var eventCheckSelectP = new CustomEvent(
                        'globalStyle.change'
                        , cEventP
                    );

                    document.dispatchEvent(eventCheckSelectP);
                }

                var val = width.value + ' ' + height.value;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: input.getAttribute('name')
                    , value: input.value === '' ? 'auto' : input.value
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }

                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

Size.prototype.constructor = Size;
var TextDecoration = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfDropdown.call(this, {
        menu: ['-', 'none', 'underline', 'overline', 'line-through', 'inherit']
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return firstUp(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

TextDecoration.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = firstUp(value);
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: replaceSpace(firstDown(val))
                    , valueLikeDefault: replaceSpace(firstDown(val)) ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = replaceSpace(firstDown(val));
                }

            });
        });
    }
});

TextDecoration.prototype.constructor = TextDecoration;
var TextShadow = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    FourthInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
        , leftPanel: options.leftPanel
    });
};

TextShadow.prototype = Object.assign(Object.create(FourthInput.prototype), {
    _createElement: function(args) {
        var _this = this;
        var fourthInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        fourthInput.className = 'item cs-element fourth-input-cp'
            + classItem;
        fourthInput.dataset.order = args.order;

        var value = args.callback ? args.callback() : '';

        if (!/[0-9]+\.?[0-9]*[^\s]*?\s[0-9]+\.?[0-9]*[^\s]*?\s[0-9]+\.?[0-9]*[^\s]*?\s(?:#[0-9abcdf]{3,6}|rgba\([^)]*\))|none|^$/.test(value)) {
            throw new SyntaxError("Expected variables format like '0px 0px 2px #ffffff'");
        }

        var match = ['', '', '', 'transparent'];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        fourthInput.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" placeholder="-" value="' + match[0] + '" class="">'
            + '<input type="text" placeholder="-" value="' + match[1] + '" class="">'
            + '<input type="text" placeholder="-" value="' + match[2] + '" class="">'
            + '<input type="text" class="spectrum">';

        $(fourthInput).find('.spectrum').spectrum({
            color: match[3]
            , showPalette: true
            , preferredFormat: "hex"
            , allowEmpty: false
            , showAlpha: true
            , localStorageKey: "spectrum.weber"
            , change: _this._listenerToFourthInputCp.bind(_this)
            , beforeShow: function (color) {
                if ( !_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('pin') ) {
                    _this.leftPanel.getActivePanel().enableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.add('colorpicker-show');
                }
            }
            , hide: function (colorLast) {
                _this._listenerToFourthInputCp(colorLast);

                if (_this.leftPanel.getActivePanel().getDOMSelf().classList.contains('colorpicker-show')) {
                    _this.leftPanel.getActivePanel().disableBookmark(_this.leftPanel);
                    _this.leftPanel.getActivePanel().getDOMSelf().classList.remove('colorpicker-show');
                }
            }
        });

        this._addEventListToFourthInput(fourthInput);

        var inputs = fourthInput.querySelectorAll('input:not(.spectrum)');
        Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('keydown', _this._keyArrowUpDown.bind(_this, input));

            var scrollMove = _this._scrollMove.bind(_this, input);

            input.addEventListener('focus', function (e) {
                input.addEventListener('wheel', scrollMove);
            });

            input.addEventListener('blur', function (e) {
                input.removeEventListener('wheel', scrollMove);
            });
        });

        this._selfDOM = fourthInput;
    }
    , selectValue: function (media, mode) {
        var inputs = this._selfDOM.querySelectorAll('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        var match = ['', '', '', 'transparent'];

        if (value !== 'none' && value !== '') {
            match = value.split(' ');
        }

        inputs[0].value = match[0];
        inputs[1].value = match[1];
        inputs[2].value = match[2];
        $(inputs[3]).spectrum("set", match[3]);
    }
    , _listenerToFourthInputCp: function(color) {
        var _this = this;
        var inputs = this._selfDOM.querySelectorAll('input');
        var val = '';

        Array.prototype.forEach.call(inputs, function(input, indx){
            var postfix = '';
            var value = input.value === '' ? '0' : input.value;
            if (input.classList.contains('spectrum')) value = /rgba/.test(color.toRgbString()) ?
                color.toRgbString() : color.toHexString();
            if (indx !== inputs.length - 1) postfix = ' ';
            val += value + postfix;
        });

        var cEvent = {'detail': {
            tag: _this._tag
            , mode: _this._controlElements._mode
            , media: _this._controlElements._media
            , property: _this._properties.property
            , value: val
            , valueLikeDefault: val ===
            _this._properties.media.default[_this._controlElements._mode].value
            && _this._controlElements._media !== 'default'
        }};

        var eventCheckSelect = new CustomEvent(
            'globalStyle.change'
            , cEvent
        );

        _this._issetOrNotIsset(null, null, cEvent);

        document.dispatchEvent(eventCheckSelect);

        if (!cEvent.detail.valueLikeDefault) {
            if (!_this._properties.media[_this._controlElements._media]) {
                _this._properties.media[_this._controlElements._media] = {};
                if (
                    !_this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode]
                ) {
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode] = {
                        value: ''
                    };
                }
            }

            _this._properties.media[_this._controlElements._media]
                [_this._controlElements._mode].value = val;
        }
    }
    , _addEventListToFourthInput: function(fourthInput) {
        var _this = this;
        var inputs = fourthInput.querySelectorAll('input');
        Array.prototype.forEach.call(inputs, function(input){
            input.addEventListener('keyup', function(e){
                e.preventDefault();
                var val = '';

                Array.prototype.forEach.call(inputs, function(input, indx){
                    var postfix = '';
                    var value = input.value === '' ? '0' : input.value;
                    if (input.classList.contains('spectrum')) value = /rgba/.test($(input).spectrum("get").toRgbString()) ?
                        $(input).spectrum("get").toRgbString() : $(input).spectrum("get").toHexString();
                    if (indx !== inputs.length - 1) postfix = ' ';
                    val += value + postfix;
                });

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: val
                    , valueLikeDefault: val ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = val;
                }
            });
        });
    }
});

TextShadow.prototype.constructor = TextShadow;
var TextTransform = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfDropdown.call(this, {
        menu: ['-', 'capitalize', 'uppercase', 'lowercase', 'inherit']
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , callback: function() {
            return firstUp(_this._properties.media[options.mediaMode][options.mode].value);
        }
    });
};

TextTransform.prototype = Object.assign(Object.create(HalfDropdown.prototype), {
    selectValue: function (media, mode) {
        var button = this._selfDOM.querySelector('button');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        value = value === '' ? '-' : value;
        button.dataset.value = replaceSpace(value);
        button.querySelector('span').innerHTML = firstUp(value);
    }
    , _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var val = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(val));
                button.querySelector('span').innerHTML = val;

                var cEvent = {'detail': {
                    tag: _this._tag
                    , mode: _this._controlElements._mode
                    , media: _this._controlElements._media
                    , property: _this._properties.property
                    , value: replaceSpace(firstDown(val))
                    , valueLikeDefault: replaceSpace(firstDown(val)) ===
                    _this._properties.media.default[_this._controlElements._mode].value
                    && _this._controlElements._media !== 'default'
                }};

                var eventCheckSelect = new CustomEvent(
                    'globalStyle.change'
                    , cEvent
                );

                _this._issetOrNotIsset(null, null, cEvent);

                document.dispatchEvent(eventCheckSelect);

                if (!cEvent.detail.valueLikeDefault) {
                    if (!_this._properties.media[_this._controlElements._media]) {
                        _this._properties.media[_this._controlElements._media] = {};
                        if (
                            !_this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode]
                        ) {
                            _this._properties.media[_this._controlElements._media]
                                [_this._controlElements._mode] = {
                                value: ''
                            };
                        }
                    }
                    _this._properties.media[_this._controlElements._media]
                        [_this._controlElements._mode].value = replaceSpace(firstDown(val));
                }

            });
        });
    }
});

TextTransform.prototype.constructor = TextTransform;
var ZIndex = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;
    this._properties = {
        media: options.media
        , property: options.property
    };
    this._tag = options.tag;
    this._controlElements = options.controlElements;

    HalfInput.call(this, {
        menu: []
        , title: options.title
        , order: options.order || 999999
        , elClass: ''
        , eventName: _this._properties.property
        , postfix: ''
        , callback: function() {
            return _this._properties.media[options.mediaMode][options.mode].value;
        }
    });
};

ZIndex.prototype = Object.assign(Object.create(HalfInput.prototype), {
    selectValue: function (media, mode) {
        var halfInput = this._selfDOM.querySelector('input');
        var mediaProperty = this._properties.media[media];

        this._issetOrNotIsset(mediaProperty, mode);

        if (!mediaProperty || ( mediaProperty && !mediaProperty[mode] ) ) {
            mediaProperty = this._properties.media.default;
        }

        var value = mediaProperty[mode].value;
        halfInput.value = value;
    }
    , _addEventListToHalfInput: function(halfInput, eventName) {
        var _this = this;
        halfInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;

            val = val === '' ? 'inherit' : val;

            var cEvent = {'detail': {
                tag: _this._tag
                , mode: _this._controlElements._mode
                , media: _this._controlElements._media
                , property: _this._properties.property
                , value: val
                , valueLikeDefault: val ===
                _this._properties.media.default[_this._controlElements._mode].value
                && _this._controlElements._media !== 'default'
            }};

            var eventCheckSelect = new CustomEvent(
                'globalStyle.change'
                , cEvent
            );

            _this._issetOrNotIsset(null, null, cEvent);

            document.dispatchEvent(eventCheckSelect);

            if (!cEvent.detail.valueLikeDefault) {
                if (!_this._properties.media[_this._controlElements._media]) {
                    _this._properties.media[_this._controlElements._media] = {};
                    if (
                        !_this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode]
                    ) {
                        _this._properties.media[_this._controlElements._media]
                            [_this._controlElements._mode] = {
                            value: ''
                        };
                    }
                }

                _this._properties.media[_this._controlElements._media]
                    [_this._controlElements._mode].value = val;
            }
        });
    }
});

ZIndex.prototype.constructor = ZIndex;
var SectionCBS = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._options = '';

    CustomButtonsSwitch.call(this, {
        customCE: options.customCE
        , isActive: function (value) {
            if (_this._targetObject.children[0].classList.contains(value)) {
                _this._options = value;
                return true;
            }
            return false;
        }
    });
};

SectionCBS.prototype = Object.assign(Object.create(CustomButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var sBtn = document.createElement('div');
        sBtn.dataset.value = btn.dataset.value;
        if (btn.classList.contains('active')) sBtn.classList.add('active');

        var val = {
            btn: sBtn
        };

        var saveBtn = document.createElement('div');
        saveBtn.dataset.value = _this._options !== '' && this.onlyOne ? _this._options : btn.dataset.value;
        if (!btn.classList.contains('active') || this.onlyOne) saveBtn.classList.add('active');

        var saveVal = {
            btn: saveBtn
        };
        _this._options = btn.dataset.value;

        _this.setOptions(val, saveVal);
    }
    , setOptions: function (val, saveVal) {
        var _this = this;

        var li = _this._targetObject;
        var section = li.children[0];

        this.optionsSelect(val.btn, section);

        _this.setStep(function () {
            _this.setOptions(saveVal, val);
        });
    }
});

SectionCBS.prototype.constructor = SectionCBS;
var SectionCBSCustomPosition = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._options = '';

    CustomButtonsSwitch.call(this, {
        customCE: options.customCE
        , isActive: function (value) {
            if (_this._targetObject.children[0].classList.contains(value)) {
                _this._options = value;
                return true;
            }
            return false;
        }
    });
};

SectionCBSCustomPosition.prototype = Object.assign(Object.create(CustomButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            btn: btn
        };

        var saveBtn = document.createElement('div');
        saveBtn.dataset.value = _this._options !== '' ? _this._options : btn.dataset.value;
        if (_this._options !== '') saveBtn.classList.add('active');

        var saveVal = {
            btn: saveBtn
        };
        _this._options = btn.dataset.value;

        _this.setOptions(val, saveVal);
    }
    , setOptions: function (val, saveVal) {
        var _this = this;

        var li = _this._targetObject;
        var section = li.children[0];

        this.optionsSelect(val.btn, section);

        if (val.btn.classList.contains('active') && val.btn.dataset.value === 'sticky-top') {
            var $$ = _this.windowIframe.jQuery;
            var sticky = $$(_this._targetObject.children[0]);
            var stickyWrapper = $$('<div>').addClass('sticky-wrapper'); // insert hidden element to maintain actual top offset on page
            if (!sticky.next().hasClass('sticky-wrapper')) {
                sticky.after(stickyWrapper);
            } else {
                stickyWrapper = sticky.next();
            }

            _this.windowIframe.stickyTB = _this.windowIframe.stickyToggle.bind(_this.windowIframe,
                sticky, stickyWrapper, $(_this.windowIframe));

            $$(_this.windowIframe).on('scroll.sticky-onscroll resize.sticky-onscroll', _this.windowIframe.stickyTB);

            _this.windowIframe.stickyToggle(
                sticky,
                stickyWrapper,
                $$(_this.windowIframe)
            );
        } else if (
            (!val.btn.classList.contains('active') && val.btn.dataset.value === 'sticky-top')
            || (val.btn.dataset.value !== 'sticky-top')
        ) {
            if (val.btn.dataset.value !== 'fixed-top')
                _this._targetObject.children[0].classList.remove('fixed-top');
            if (_this._targetObject.children[1].classList.contains('sticky-wrapper')) {
                _this._targetObject.removeChild(_this._targetObject.children[1]);
            }
            var $$ = _this.windowIframe.jQuery;
            var sticky = $$(_this._targetObject.children[0]);
            $$(_this.windowIframe).off('scroll.sticky-onscroll resize.sticky-onscroll',
                _this.windowIframe.stickyTB);
        }

        _this.nowrapCorrectigSectionPosition(_this._targetObject.children[0]);

        _this.setStep(function () {
            _this.setOptions(saveVal, val);
        });
    }
});

SectionCBSCustomPosition.prototype.constructor = SectionCBSCustomPosition;
var SectionCountDown = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this.modalPopupTrigger = false;

    if (this._targetObject.classList.contains('modal-dialog')) {
        this.modalPopupTrigger = true;
        this._targetObject = this.findParent(this._targetObject, ['section-item']);
    }

    this._sectionCountDown = 0;

    BaseInput.call(this, {
        title: 'Show timer'
        , postfix: ''
        , step: 1000
        , min: 0
        , callback: function () {
            var script = _this._targetObject.querySelector('script');
            var pattern = new RegExp('\\/\\/countdown-timer[\\s\\S]*?}, (\\d*)\\);[\\s\\S]*?\\/\\/countdown-timer-end','i');
            var match = script.innerHTML.match(pattern);
            return match && match[1] ? match[1] : '';
        }
    });
};

SectionCountDown.prototype = Object.assign(Object.create(BaseInput.prototype), {
    _createElement: function(args) {
        var _this = this;
        var baseInput = document.createElement('div');
        var classItem = args.outerClass ? ' ' + args.outerClass : '';
        baseInput.className = 'item cs-element cs-base-input'
            + classItem;
        baseInput.dataset.order = args.order || 999999;

        var value = args.callback ? args.callback() : '';
        var placeholder = args.placeholder || '-';
        baseInput.innerHTML = '<label>' + args.title + '</label>'
            + '<input type="text" placeholder="' + placeholder + '" value="' + value + '" class="">';


        this._addEventListToHalfInput(baseInput);

        var input = baseInput.querySelector('input');

        input.addEventListener('keydown', this._keyArrowUpDown.bind(this, input));

        var scrollMove = _this._scrollMove.bind(_this, input);

        input.addEventListener('focus', function (e) {
            input.addEventListener('wheel', scrollMove);
        });

        input.addEventListener('blur', function (e) {
            input.removeEventListener('wheel', scrollMove);
        });

        this._selfDOM = baseInput;
    }
    , _addEventListToHalfInput: function(baseInput) {
        var _this = this;
        baseInput.querySelector('input').addEventListener('keyup', function(e){
            e.preventDefault();
            var val = this.value;
            var saveVal = _this._sectionCountDown;
            _this._sectionCountDown = val;

            _this.setCountDown(val, saveVal);
        });

        baseInput.querySelector('input').addEventListener('blur', function(e){
            e.preventDefault();
            var val = this.value;
            var saveVal = _this._sectionCountDown;
            _this._sectionCountDown = val;

            _this.setCountDown(val, saveVal);
        });
    }
    , setCountDown: function (val, saveVal) {
        var _this = this;

        var section = _this._targetObject.children[0];
        var script = _this._targetObject.querySelector('script');
        var pattern = new RegExp('(\\/\\/countdown-timer[\\s\\S]*?}, )\\d*(\\);[\\s\\S]*?\\/\\/countdown-timer-end)','i');

        if (val === '' || val === '0') {
            script.innerHTML = script.innerHTML.replace(pattern, '');
        } else if (pattern.test(script.innerHTML)) {
            script.innerHTML = script.innerHTML.replace(pattern, '$1' + val + '$2');
        } else {
            var showString = '\n\t$("#' + section.id + '").addClass("show");';
            if (this.modalPopupTrigger)
                showString = '\n\t$("#' + section.id + '").modal("show");';

            script.innerHTML = '\n//countdown-timer' +
                '\nsetTimeout(function () {' +
                showString +
                '\n}, ' + val + ');' +
                '\n//countdown-timer-end';
        }

        _this.setStep(function () {
            _this.setCountDown(saveVal, val);
        });
    }
});

SectionCountDown.prototype.constructor = SectionCountDown;
var SectionMediaTextAlign = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;

    MediaTextAlign.call(this, {
        title: 'Text align'
        , buttons: [
            {
                title: '<i class="icon-blr-align-left"></i>'
                , value: 'left'
            }
            , {
                title: '<i class="icon-blr-align-center"></i>'
                , value: 'center'
            }
            , {
                title: '<i class="icon-blr-align-right"></i>'
                , value: 'right'
            }
            , {
                title: '<i class="icon-blr-align-justify"></i>'
                , value: 'justify'
            }
        ]
        , onlyOne: true
        , allowSelectNothing: true
        , isActive: function (value) {
            var section = _this._targetObject.children[0];
            if (new RegExp('\\s?text-' + value).test(section.className)) {
                return true;
            }
            return false;
        }
        , obj: _this._targetObject.children[0]
    });
};

SectionMediaTextAlign.prototype = Object.assign(Object.create(MediaTextAlign.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var value = btn.dataset.value;

        var val = {
            value: value
            , media: _this.media
            , btn: btn
        };

        var saveBtn = document.createElement('div');
        saveBtn.dataset.value = _this.activeButtons[_this.media];
        if (saveBtn.dataset.value !== '')
            saveBtn.classList.add('active');

        var saveVal = {
            value: _this.activeButtons[_this.media]
            , media: _this.media
            , btn: saveBtn
        };

        var btnM = {};

        btnM.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
        btnM.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
        btnM.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

        if (btn.classList.contains('active') && _this.media !== 'default') {
            btnM[_this.media].classList.add('isset');
        } else if (_this.media !== 'default') {
            btnM[_this.media].classList.remove('isset');
        }

        this.activeButtons[this.media] = btn.classList.contains('active') ? btn.dataset.value : '';

        _this.setTextAlign(val, saveVal);
    }
    , setTextAlign: function (val, saveVal) {
        var _this = this;

        var section = _this._targetObject.children[0];

        var className = ' text-' + val.value;

        if (val.media === 'mobile') {
            className = ' text-xs-' + val.value;
            section.className = section.className.replace(/\s?text-xs-(?:left|right|center|justify)/ig, '');
        }

        if (val.media === 'tablet') {
            className = ' text-sm-' + val.value + ' text-md-' + val.value;
            section.className = section.className.replace(/\s?text-(?:sm|md)-(?:left|right|center|justify)/ig, '');
        }

        if (val.media === 'desktop') {
            className = ' text-lg-' + val.value + ' text-xl-' + val.value;
            section.className = section.className.replace(/\s?text-(?:lg|xl)-(?:left|right|center|justify)/ig, '');
        }

        if (val.media === 'default') {
            section.className = section.className.replace(/\s?text-(?:left|right|center|justify)/ig, '');
        }

        if (val.btn.classList.contains('active')) {
            section.className += className;
        }

        _this.setStep(function () {
            _this.setTextAlign(saveVal, val);
        });
    }
});

SectionMediaTextAlign.prototype.constructor = SectionMediaTextAlign;
var SectionPaddingSettings = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables options");
    }

    var _this = this;
    this._targetObject = options.targetObject;
    this._li = options.li;

    this.paddingTop = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    this.paddingBottom = {
        default: '-'
        , mobile: '-'
        , tablet: '-'
        , desktop: '-'
    };

    MediaPM.call(this, {
        name: 'MediaPM'
        , title: 'Padding'
        , prefix: 'p'
        , menu: ['-', '0px', '10px', '20px', '30px', '50px', '75px', '100px', '150px', '200px', '250px', '300px', '350px', '400px']
        , callbackTop: function() {
            var section = _this._targetObject.children[0];
            var cNameTop = section.className.match(/pt-([0-9]+)/i);
            return  cNameTop ? cNameTop[1] + 'px' : '-';
        }
        , callbackBottom: function() {
            var section = _this._targetObject.children[0];
            var cNameBottom = section.className.match(/pb-([0-9]+)/i);
            return  cNameBottom ? cNameBottom[1] + 'px' : '-';
        }
        , obj: _this._targetObject.children[0]
    });
};

SectionPaddingSettings.prototype = Object.assign(Object.create(MediaPM.prototype), {
    _addEventListToDropdown: function(dropDown) {
        var _this = this;
        var options = dropDown.querySelectorAll('li a');
        var button = dropDown.querySelector('.dropdown button');
        Array.prototype.forEach.call(options, function(element){
            element.addEventListener('click', function(e){
                e.preventDefault();
                var value = element.innerHTML;
                button.dataset.value = replaceSpace(firstDown(value));
                button.querySelector('span').innerHTML = value;

                var paddingPosition = 'top';

                if (!dropDown.classList.contains('padding-top')) {
                    paddingPosition = 'bottom';
                }

                value = value.substr(0, value.length-2);

                var val = {
                    value: value
                    , media: _this.media
                    , paddingPosition: paddingPosition
                };
                var mVal = paddingPosition === 'bottom' ?
                    _this.paddingBottom[_this.media] : _this.paddingTop[_this.media];
                var saveVal = {
                    value: mVal.substr(0, mVal.length-2)
                    , media: _this.media
                    , paddingPosition: paddingPosition
                };

                if (dropDown.classList.contains('padding-top')) {
                    _this.paddingTop[_this.media] = value !== '' ? value + 'px' : '-';
                } else {
                    _this.paddingBottom[_this.media] = value !== '' ? value + 'px' : '-';
                }

                var btn = {};

                btn.desktop = _this._selfDOM.querySelector('.media-group [data-id=desktop]');
                btn.tablet = _this._selfDOM.querySelector('.media-group [data-id=tablet]');
                btn.mobile = _this._selfDOM.querySelector('.media-group [data-id=mobile]');

                if (_this.paddingTop[_this.media] === '-' && _this.paddingBottom[_this.media] === '-' && _this.media !== 'default') {
                    btn[_this.media].classList.remove('isset');
                } else if (_this.media !== 'default') {
                    btn[_this.media].classList.add('isset');
                }

                _this.setPadding(val, saveVal);
            });
        });
    }
    , setPadding: function (val, saveVal) {
        var _this = this;

        var section = _this._targetObject.children[0];

        var pIndex = 't';
        if (val.paddingPosition === 'bottom') pIndex = 'b';

        var className = '';

        if (val.value !== '') className = ' p' + pIndex + '-' + val.value;

        if (val.media === 'mobile') {
            if (val.value !== '') className = ' p' + pIndex + '-sm-' + val.value;
            section.className = section.className.replace(new RegExp('\\s?p' + pIndex + '-sm-{1,2}[0-9]+', 'ig'), '');
        }

        if (val.media === 'tablet') {
            if (val.value !== '') className = ' p' + pIndex + '-md-' + val.value;
            section.className = section.className.replace(new RegExp('\\s?p' + pIndex + '-md-{1,2}[0-9]+', 'ig'), '');
        }

        if (val.media === 'desktop') {
            if (val.value !== '') className = ' p' + pIndex + '-lg-' + val.value;
            section.className = section.className.replace(new RegExp('\\s?p' + pIndex + '-lg-{1,2}[0-9]+', 'ig'), '');
        }

        if (val.media === 'default') {
            section.className = section.className.replace(new RegExp('\\s?p' + pIndex + '-{1,2}[0-9]+', 'ig'), '');
        }

        if (val.value !== '') section.className += className;

        _this.setStep(function () {
            _this.setPadding(saveVal, val);
        });
    }
});

SectionPaddingSettings.prototype.constructor = SectionPaddingSettings;

var SectionSkin = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;

    this._sectionSkin = {
        value: ''
        , select: false
        , buttons: [
            {
                title: 'Light'
                , value: 'light'
            }
            , {
                title: 'Dark'
                , value: 'dark'
            }
        ]
    };

    ButtonsSwitch.call(this, {
        title: 'Skin'
        , buttons: _this._sectionSkin.buttons
        , order: options.order || 999999
        , outerClass: ''
        , onlyOne: true
        , allowSelectNothing: false
        , isActive: function (value) {
            if (_this._targetObject.children[0].classList.contains(value)) {
                _this._sectionSkin.value = value;
                _this._sectionSkin.select = true;
                return true;
            }
            return false;
        }
    });
};

SectionSkin.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
            , buttons: _this._sectionSkin.buttons
        };
        _this._sectionSkin.value = _this._sectionSkin.value || btn.dataset.value;
        var saveVal = _this._sectionSkin;
        _this._sectionSkin = val;

        _this.setSectionSkin(val, saveVal);
    }
    , setSectionSkin: function (val, saveVal) {
        var _this = this;

        var section = _this._targetObject.children[0];

        if (val.select) {
            val.buttons.forEach(function (el) {
                if (section.classList.contains(el.value)) {
                    section.classList.remove(el.value)
                }
            });

            section.classList.add(val.value);
        }

        _this.setStep(function () {
            _this.setSectionSkin(saveVal, val);
        });
    }
});

SectionSkin.prototype.constructor = SectionSkin;
var SectionVisibility = function (options) {
    if (
        options === undefined
    ) {
        throw new ReferenceError ("Expected variables elements");
    }

    var _this = this;

    this._selfDOM = null;

    this._targetObject = options.targetObject;
    this._li = options.li;

    this._visibility = {
        mobile: false
        , tablet: false
        , desktop: false
    };

    ButtonsSwitch.call(this, {
        title: 'Visibility'
        , buttons: [
            {
                title: '<i class="icon-blr-mobile"></i>'
                , value: 'mobile'
            }
            , {
                title: '<i class="icon-blr-tablet"></i>'
                , value: 'tablet'
            }
            , {
                title: '<i class="icon-blr-desktop"></i>'
                , value: 'desktop'
            }
        ]
        , order: options.order || 999999
        , outerClass: ''
        , onlyOne: false
        , allowSelectNothing: false
        , isActive: function (value) {
            if (!_this._targetObject.children[0].classList.contains('hidden-sm') && value === 'mobile') {
                _this._visibility.mobile = true;
                return true;
            }
            if (
                !_this._targetObject.children[0].classList.contains('hidden-md')
                && value === 'tablet') {
                _this._visibility.tablet = true;
                return true;
            }
            if (
                !_this._targetObject.children[0].classList.contains('hidden-lg')
                && !_this._targetObject.children[0].classList.contains('hidden-xl')
                && value === 'desktop') {
                _this._visibility.desktop = true;
                return true;
            }
            return false;
        }
    });
};

SectionVisibility.prototype = Object.assign(Object.create(ButtonsSwitch.prototype), {
    _addEventListToSwitchButton: function(btn, e) {
        var _this = this;
        btn = this._prepareValues(btn);

        var val = {
            value: btn.dataset.value
            , select: btn.classList.contains('active')
        };
        var saveVal = {
            value: btn.dataset.value
            , select: _this._visibility[val.value]
        };
        _this._visibility[val.value] = val.select;

        _this.setVisibility(val, saveVal);
    }
    , setVisibility: function (val, saveVal) {
        var _this = this;

        var section = _this._targetObject.children[0];

        if (val.select) {
            if (val.value === 'mobile') {
                section.className = section.className.replace(/\s?hidden-sm/ig, '');
            }

            if (val.value === 'tablet') {
                section.className = section.className.replace(/\s?hidden-md/ig, '');
            }

            if (val.value === 'desktop') {
                section.className = section.className.replace(/\s?hidden-(lg|xl)/ig, '');
            }
        } else {
            if (val.value === 'mobile') {
                section.classList.add('hidden-sm');
            }

            if (val.value === 'tablet') {
                section.classList.add('hidden-md');
            }

            if (val.value === 'desktop') {
                section.classList.add('hidden-lg');
                section.classList.add('hidden-xl');
            }
        }

        _this.setStep(function () {
            _this.setVisibility(saveVal, val);
        });
    }
});

SectionVisibility.prototype.constructor = SectionVisibility;
var Builder = function (options) {

    /**
     * init core
     */
    Core();

    try {
        /**
         * init options
         */
        this.initOptions(options);

        /**
         * init sections
         */
        this.initSections(sectionsPreview);

        /**
         * Pages Init
         */
        Core.prototype.pages = new Pages({
            mode: '',
            pages: []
        });

        /**
         * Init style
         * @type {Style}
         */
        Core.prototype.globalStyle = new Style();

        /**
         * Loading project or creating new
         */
        this.load();

        /**
         * Mode of builder
         */
        document.addEventListener('modeOfBuilder.change', this.selectionEditMode.bind(this));

        /**
         * Set listeners from control buttons
         */
        this.setListenersCB();

    } catch(e) {
        if (e instanceof TypeError) {
            console.error(e);
        } else {
            console.log(e);
        }
    }


};

Builder.prototype = Object.assign(Object.create(Core.prototype), {
    currentVersion: 50200

    /**
     * Variables of edit elements
     */
    // , _arrEditorText: []
    // , _arrListenersEditElement: []
    // , _arrListenersEditElementModal: []
    , _triggeredOffElement: null
    , _wrapEvetMouseOutEditElement: null
    , _wrapEvetClickEditElement: null
    , _triggerClickEditElement: 0
    , _clickOnDocumentIframeEditElementMode: null

    , clickOnBreadcrumbs: false
    , stopRemoveHoverEffect: false

    /**
     *
     * @param options
     */
    , initOptions: function(options) {
        // if (options.controlSectionPL2 instanceof ControlPanel) {
        //     this.controlSectionPL2 = options.controlSectionPL2;
        // } else {
        //     throw new TypeError("Expected type of ControlPanel");
        // }
    }

    /**
     *
     * @param sectionsPreview
     */
    , initSections: function (sectionsPreview) {
        Core.prototype.sections = new Sections(sectionsPreview);
    }

    /**
     *
     */
    , load: function () {
        var _this = this;
        var afterLoadWindow = function() {

            if(!window.localStorage.versionWeber
                || window.localStorage.versionWeber*1 < _this.currentVersion*1) {

                delete window.localStorage.projectWeber;
                window.localStorage.versionWeber = _this.currentVersion;
                _this.removePreloader();
            }

            /**
             * Load project
             */
            if(window.localStorage.projectWeber) {
                try {
                    _this._loadProject(window.localStorage.projectWeber);

                /**
                 * Init global script
                 */
                _this._initGlobalScript();

                /**
                 * Convert all images to svg
                 */
                _this.convertAllImagesToSvg();
                }
                catch(e) {
                    delete window.localStorage.projectWeber;
                    _this._error = true;
                    location.reload();
                }
            } else {
                var pageObj = new Page({
                    name: 'index',
                    id: 0,
                    outerClass: 'light-page page-mode-edit-sections blr-active-page',
                    mode: 'new'
                });

                _this.pages.setPagesObjInArray(pageObj);

                Core.prototype.activePageObject = pageObj;

                /**
                 * init LeftPanel
                 */
                Core.prototype.leftPanel = new LeftPanel();

                /**
                 * Init global styles
                 */
                _this.globalStyle.init();

                /**
                 * Init global script
                 */
                _this._initGlobalScript();

                /**
                 * Convert all images to svg
                 */
                _this.convertAllImagesToSvg();

                var loadPreloader = document.querySelector('.progress .load');
                var timeLoading = 1 * 2;
                loadPreloader.style.transition = 'width ' + (timeLoading/2) + 's ease-out';
                loadPreloader.style.width = '100%';
                _this.removePreloader();

                setTimeout(function () {
                    _this.body.classList.remove('first-show');
                }, 1600);

                window.localStorage.versionWeber = _this.currentVersion;

                document.title = _this.getActivePageObject().getPageTitle();
            }

            /**
             * Set event listeners for modals
             */
            _this.setEventListenersToModals();

            /**
             * Save current project
             */
            if (window.onbeforeunload === undefined) {
                document.querySelector('html').addEventListener('mouseleave', function(){
                    if (Object.keys(_this.projectSections).length > 0) {
                        _this._prepareContentPagesToSave();

                        window.localStorage.style = _this.main.querySelector('style').innerHTML;
                    }
                });
            } else {
                window.onbeforeunload = function() {
                    if (Object.keys(_this.projectSections).length > 0 && !_this._error) {
                        _this._prepareContentPagesToSave();
                    }

                    window.localStorage.style = _this.main.querySelector('style').innerHTML;

                    if (navigator.userAgent.match(/MSIE|ipad|iphone|ipod|Trident|Edge|IEMobile/)) {
                        var message = "This project is not saved.";
                        return message;
                    } else {
                        return null;
                    }
                };
            }

            _this.windowIframe.jQuery(_this.main).delegate("input[type=text].datepicker-input", "focusin", function(){
                _this.windowIframe.jQuery(this).datepicker({
                    format: "dd.mm.yyyy",
                    weekStart: 1,
                    autoclose: true,
                    todayHighlight: true,
                    updateViewDate: true
                });
            });
        };

        var loadingIframe = function() {
            setTimeout(function() {
                if(_this.main) {
                    afterLoadWindow();
                    if( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {
                        _this.iframe.parentElement.style.overflowY = 'scroll';
                    }
                } else {
                    Core.prototype.windowIframe = Core.prototype.iframe.contentWindow;
                    Core.prototype.documentIframe = Core.prototype.windowIframe.document;
                    Core.prototype.main = Core.prototype.documentIframe.querySelector('.main');
                    Core.prototype.globalScript = Core.prototype.documentIframe.querySelector('#global-script');
                    loadingIframe();
                }
            }, 500);
        };

        if( document.readyState === 'complete' ) {
            loadingIframe();
        } else {
            window.addEventListener('load', function(){
                loadingIframe();
            });
        }
    }
    /**
     * @param mode {string} mode of editing
     * @public
     */
    , selectionEditMode: function(e) {
        var _this = this;
        var mode = e.detail.mode;
        var pageObj = _this.getActivePageObject();
        var page = pageObj.getDOMSelf();
        var pageName = replaceSpace(pageObj.getPageName());
        var modalFormContainer = document.getElementById('modal-form-container');
        _this.clearControlElements(page);
        // _this.clearControlElements(modalFormContainer);
        _this.removeNowrapSuperStructure(_this.documentIframe);

        //TODO: temporarily
        var editEL = _this.documentIframe.querySelectorAll('.spr-edit-el');
        [].forEach.call(editEL, function (el) {
            el.classList.remove('spr-edit-el');
        });

        if (Core.prototype.drGAndDropEl) {
            Core.prototype.drGAndDropEl.destroy();
            Core.prototype.drGAndDropEl = null;
        }

        simulateCssEvent('stop', null, _this.documentIframe);
        var editedElements = page.querySelectorAll('.spr-hover');
        if (editedElements.length > 0) {
            Array.prototype.forEach.call(editedElements, function(el) {
                el.classList.remove('spr-hover');
            });
        }

        _this.windowIframe.disMouseDrag = false;
        _this.windowIframe.editingText = false;

        switch (mode) {
            case 'page-mode-edit-sections':
                _this._setControlsElement(pageName, 'edit-sections');
                break;

            case 'page-mode-edit-style':
                _this._setControlsElement(pageName, 'edit-elements');
                _this.windowIframe.disMouseDrag = true;
                _this.windowIframe.editingText = true;
                break;

            case 'project-pages':

                var ul =  _this._controlPanel.ProjectPages.self.querySelector('ul');
                if (!ul.classList.contains('scrl')) {
                    ul.classList.add('scrl');
                    var top = _this._controlPanel.title.getBoundingClientRect().bottom;
                    var bottom = _this._controlPanel.self.querySelector('.btn-ex-im-d').getBoundingClientRect().top;
                    var pageItem = ul.children[ul.children.length - 1];
                    var pageItemHeight = pageItem.clientHeight;
                    ul.style.height = bottom - top - pageItemHeight + 'px';
                    $(ul).niceScroll({cursorcolor: "#555555", cursorborder: "1px solid #555555", autohidemode: "scroll", hidecursordelay: 0});
                    _this._pinBottom(_this, pageItem);
                }
                break;
        }

        // if ( mode !== 'sections') {
        //     if (_this._controlPanel.sections.self.classList.contains('show')
        //         && window.innerWidth > 500) {
        //         _this._hideSections(_this);
        //     }
        //
        //     _this.documentIframe.removeEventListener('mousemove', _this.listenerDocumentMousemove);
        //     _this.documentIframe.removeEventListener('mouseup', _this.listenerDocumentMouseUp);
        //     _this.documentIframe.removeEventListener('touchend', _this.listenerDocumentTouchend);
        // }

        // if (mode !== '') {
        //     var childEvents = _this.documentIframe.querySelectorAll('.child-event');
        //     Array.prototype.forEach.call(childEvents, function(el){
        //         if (_this._eventMoseEnterOnChildActive)
        //             el.removeEventListener('mouseenter', _this._eventMoseEnterOnChildActive);
        //         if (_this._evetnMoseLeaveOnChildActive)
        //             el.removeEventListener('mouseleave', _this._evetnMoseLeaveOnChildActive);
        //     });
        // }
    }

    , _initGlobalScript: function () {
        this.globalScript.innerHTML = overAllJs;
    }

    /**
     * --------------------------------- Part of builder - working with elements of sections --------------------------
     */
    , clearEditElement: function(element) {
        var btnControl = element.lastChild;
        element.children[0].removeEventListener('touchstart', this.elTouchDisable);
        element.removeChild(btnControl);
        element.unWrapOne();
    }
    , elTouchDisable: function(e) {
        if (e.type === 'touchstart') {
            builder._dropY = e.changedTouches[0].pageY;
        } else if (e.type === 'touchend'
            && builder._dropY === e.changedTouches[0].pageY) {
            e.preventDefault();
        }
    }
    /**
     * Setting wrapper on editing element which contains control buttons or
     * to bind buttons of control to editing element
     * @param pageName {string}
     * @param mode {string} editing mode which to set on left side
     */
    , _setControlsElement: function (pageName, mode) {
        var _this = this;
        var sectionsPage = pageName ? '.' + pageName + ' > li': '';
        //TODO: check this
        // var sectionModal = pageName ? '' : '#modal-form-container';
        // var sections = _this.main.querySelectorAll(sectionsPage + sectionModal);
        var sections = _this.main.querySelectorAll(sectionsPage);
        Array.prototype.forEach.call(sections, function(li) {
            _this.setControlsElementOnSection(li, li, mode, pageName);
        });
    }
    /**
     *
     * @param container
     */
    , setControlsElementOnSection: function(container, li, mode, pageName) {
        var _this = this;
        var options = builderOptions.editElementsList;
        if (mode === 'edit-sections') {
            options = builderOptions.sectionElementList;
        }
        options.forEach(function(editElement) {
            var classNameAdd = ' wrap-control-element ' + editElement.positionControl;
            if (mode === 'edit-sections') {
                classNameAdd = ' wrap-control ' + editElement.positionControl;
            }

            if (Array.isArray(editElement.domIdentif)) {
                editElement.domIdentif.forEach(function (domIdentif) {
                    if (domIdentif !== '') {
                        var elements = container.querySelectorAll('*:not(.g-map) ' + domIdentif.replace(/,/, ', *:not(.g-map) '));

                        Array.prototype.forEach.call(elements, function (el) {

                            if (!/supra/i.test(el.getAttribute('class'))
                                && !el.classList.contains('upper-text')
                                && el.parentElement.className.search('buttons-control') === -1) {
                                var liLocal = li;
                                if (li.id === 'modal-form-container')
                                    liLocal = controls.findParent(el, ['modal-dialog']);
                                var modal = pageName === '' ? true : false;
                                el.classList.add('spr-edit-el');
                                _this.addWrapEvventMouseEnterEditEelement(liLocal, editElement, classNameAdd, el, modal);
                            }
                        });
                    }
                });
            }
        });
    }
    , addWrapEvventMouseEnterEditEelement: function(li, editElement, classNameAdd, el, modal) {
        var _this = this;
        _this._wrapEvventMouseEnterEditEelement =
            _this._eventMouseEnterEditEelement.bind(_this, li, editElement, classNameAdd, el);
        el.addEventListener('mouseover', _this._wrapEvventMouseEnterEditEelement);

        if (modal) {
            _this._arrListenersEditElementModal.push({
                el: el
                , func: _this._wrapEvventMouseEnterEditEelement
            });
        }
        _this._arrListenersEditElement.push({
            el: el
            , func: _this._wrapEvventMouseEnterEditEelement
        });
    }
    /**
     * For setting control element if btnContlType is 'nowrap' in options
     * Rule: only one a group of controls can be shown
     * @param li {HTMLElement}
     * @param editElement {Object} parameter of options
     * @param classNameAdd {String}
     * @param el {HTMLElement}
     */
    , _eventMouseEnterEditEelement: function(li, editElement, classNameAdd, el, e) {
        var _this = this;

        var controlGroup = _this.main.querySelector(
            '.wrap-control-element.nowrap'
            + ', .wrap-control.nowrap'
            + ', .wrap-control-element-icons.nowrap'
            + ', .wrap-control-element-typography.nowrap'
        );

        if (el.classList.contains('spr-oc-show')) {
            return;
        }

        //this condition need to working cross-browser
        if (
            _this.activeEditElement
            && _this._belongsTo(_this.activeEditElement, e.toElement)
            && !_this.childOf(el, _this.activeEditElement)
        ) {
            if (
                _this.childOf(_this.activeEditElement, el)
                && !el.classList.contains('spr-child-active')
            ) {
                el.classList.add('spr-child-active');
            }
            return;
        } else {
            if (_this.activeEditElement) {
                if (_this.activeEditElement.classList.contains('spr-outline-control')) {
                    _this.activeEditElement.classList.remove('spr-outline-control');
                }
                // if (controlGroup && controlGroup.parentElement) {
                //     controlGroup.parentElement.removeChild(controlGroup);
                // }

                // _this.removeNowrapSuperStructure(_this.documentIframe);
                Core.prototype._triggerElementEnter = false;

                _this.activeEditElement.removeEventListener('click', _this._wrapEvetClickEditElement);
                _this.documentIframe.removeEventListener('mousemove', _this._wrapEvetMouseOutEditElement);

                // if (Core.prototype.drGAndDropEl) {
                //     Core.prototype.drGAndDropEl.destroy();
                //     Core.prototype.drGAndDropEl = null;
                // }
            }
            Core.prototype.activeEditElement = el;
        }

        if (!_this._triggerElementEnter) {
            Core.prototype.editingText = true;

            //for gallery without hover effect on image
            // if (_this.findParent(el, ['spr-gallery'])) {
            //     el = _this.findParent(el, ['item']);
            // }

            el.classList.add('spr-outline-control');

            var boundingEl = el.getBoundingClientRect();

            var conditionMouseOut = function(boundingEl, e) {
                if ( e.clientX <= boundingEl.left - 3 || e.clientX >= boundingEl.right + 3
                    || e.clientY < boundingEl.top - 3 || e.clientY > boundingEl.bottom + 3 ) {
                    return true;
                }
                return false;
            };

            _this._triggeredOffElement = el;

            _this.documentIframe.removeEventListener('mousemove', _this._wrapEvetMouseOutEditElement);
            _this._wrapEvetMouseOutEditElement =
                _this._evetMouseOutEditElement.bind(_this, li, controlGroup, conditionMouseOut, boundingEl, el, editElement);
            _this.documentIframe.addEventListener('mousemove', _this._wrapEvetMouseOutEditElement);

            if (_this.getPageMode() === 'page-mode-edit-sections') {
                _this._setControlsForSection(li, el, editElement, classNameAdd);
                Core.prototype._triggerElementEnter = false;
                el.classList.add('spr-wout');
            } else {
                _this._wrapEvetClickEditElement =
                    _this._evetClickEditElement.bind(_this, li, controlGroup, el, editElement, classNameAdd);
                el.addEventListener('click', _this._wrapEvetClickEditElement);

                _this._wrapEvetActiveClickEditElement.push({
                    el: el
                    , func: _this._wrapEvetClickEditElement
                });
                Core.prototype._triggerElementEnter = true;
            }
        }
    }
    , _evetClickEditElement: function(li, controlGroup, el, editElement, classNameAdd, eClick) {
        eClick.preventDefault();
        eClick.stopPropagation();
        eClick.stopImmediatePropagation();

        if (Core.prototype.drGAndDropEl) {
            Core.prototype.drGAndDropEl.destroy();
            Core.prototype.drGAndDropEl = null;
        }

        var breadcrumbs = null;

        if (el.classList.contains('edit-typography')) {
            return;
        }

        var _this = this;

        _this.documentIframe.removeEventListener('mousemove', _this._wrapEvetMouseOutEditElement);

        var ObjControl = null;

        var controlsElements = editElement.controlsElements;
        var editTypography = editElement.typography;
        var elementSettings = editElement.elementSettings;
        var elementStyle = editElement.elementStyle;
        var settingsSection = editElement.settingsSection;
        var dragItems = editElement.dragItems;
        var context = editElement.context;

        if (
            el.classList.contains('spr-oc-show')
            && editElement.typography
        ) {
            var controlGroup = li.querySelector(
                '.wrap-control-element.nowrap'
                + ', .wrap-control.nowrap'
                + ', .wrap-control-element-icons.nowrap'
                + ', .wrap-control-element.type-typography.nowrap'
            );

            if (controlGroup && controlGroup.parentElement) {
                controlGroup.parentElement.removeChild(controlGroup);
            }

            el.removeEventListener('click', _this._wrapEvetClickEditElement);

            el.classList.add('edit-typography');

            // var owl = this.findParent(el, ['owl-carousel']);
            // if (eClick.target.tagName === 'A' || owl) {
                // var elToSelect = eClick.target || el;
                // _this.selectElementText(elToSelect, _this.windowIframe);
            // }

            var ObjT = el;

            if (el.tagName === 'LI' && el.querySelector('a')) {
                var a = el.querySelector('a');
                el.removeAttribute('contenteditable');
                ObjT = a;
            }

            ObjControl = new EditorText(ObjT);
            _this._arrEditorText.push({
                el: ObjT
                , editor: ObjControl
            });

            _this.typographyEnter = true;

            classNameAdd = ' type-typography' + classNameAdd;

            // controlsElements = editElement.typography;
        } else {
            _this.removeNowrapSuperStructure(_this.documentIframe, null, 'without-spr-child');

            el.classList.add('spr-oc-show');
            if (editElement.typography) el.setAttribute('contenteditable', 'true');

            _this._addSimulationHoverEffect(li, eClick.target);

            //TODO: this will be modify
            _this._setBreadcrumbs(li, eClick.target);
        }

        _this._removeSimulationHoverEffectListener(li);

        controlGroup = new ControlDOMSections(
            {
                controlsElements: controlsElements
                , editTypography: editTypography
                , elementSettings: elementSettings
                , elementStyle: elementStyle
                , settingsSection: settingsSection
                , dragItems: dragItems
                , context: context
            }
            , el
            , 'btn-group nowrap' + classNameAdd
            , ObjControl
        );

        if (
            _this.getPageMode() !== 'page-mode-edit-sections'
            && controlsElements.indexOf('DragElement') !== -1
            && !ObjControl
        ) {
            var container = context ? _this.findParent(el.parentElement, [context]) : el.parentElement;
            Core.prototype.drGAndDropEl = new dragAndDrop({
                elements: {
                    el: el
                    , btn: controlGroup.firstChild
                }
                , container: container
                , dragItems: dragItems
            });

            Core.prototype.drGAndDropEl.set();
        }

        var boundingEl = el.getBoundingClientRect();
        var boundingLi = li.getBoundingClientRect();
        var topEl = boundingEl.top;
        var bottomEl = boundingEl.bottom;
        var leftEl = boundingEl.left;
        var rightEl = boundingEl.right;
        var heightEl = boundingEl.height;
        var topLi = boundingLi.top;
        var leftLi = boundingLi.left;

        var absoluteTop = topEl - topLi;
        var absoluteLeft = leftEl - leftLi;
        if (
            (
                controlGroup.classList.contains('inside-top')
                || controlGroup.classList.contains('inside-top-right')
            )
            && heightEl < ( 42 * 2 )) {
            absoluteTop = bottomEl - topLi;
        }

        if (window.getComputedStyle(li).getPropertyValue('position') === 'static') {
            absoluteTop = topEl - _this.main.getBoundingClientRect().top;
        }

        controlGroup.style.top = absoluteTop + 'px';
        controlGroup.style.left = absoluteLeft + 'px';

        var nav = builder.main.querySelector('.navbar');
        if (nav && !_this.findParent(el, ['navbar']) && topLi == 0 && topEl == 0) {
            var topNav = nav.getBoundingClientRect().bottom;
            controlGroup.style.top = absoluteTop + topNav + 'px';
        }

        controlGroup.style.display = 'block';
        li.appendChild(controlGroup);

        if (ObjControl) {
            ObjControl.showActiveButton(el, eClick);
        }

        var boundingCB = controlGroup.firstChild.getBoundingClientRect();
        var heightControlBtn = boundingCB.height;
        var widthControlBtn = boundingCB.width;

        //correcting vertical position btn control
        if (
            ( (topEl - heightControlBtn) < 0 )
            && !controlGroup.classList.contains('inside-top')
            && !controlGroup.classList.contains('inside-top-right')
        ) {
            var koef = heightControlBtn;
            controlGroup.style.top = bottomEl - 3 - topLi + koef + 'px';
        }

        //correcting horizontal position btn control
        var lengthCG = widthControlBtn*controlGroup.children.length;
        if (
            _this.windowIframe.innerWidth <= (leftEl + lengthCG + 20)
            || controlGroup.classList.contains('inside-top-right')
            || controlGroup.classList.contains('outside-top-right')
        ) {
            controlGroup.style.left = (rightEl - leftLi - lengthCG) + 'px';
        }

        if (controlGroup.getBoundingClientRect().left < 0) {
            controlGroup.style.left = '10px';
        }

        controlGroup.style.opacity = 1;
    }
    /**
     *
     * @param li {HTMLElement}
     * @param controlGroup {HTMLElement}
     * @param el {HTMLElement}
     * @param e {Event}
     */
    , _evetMouseOutEditElement: function(li, controlGroup, conditionMouseOut, boundingEl, el, editElement, e) {
        var _this = this;
        if (_this._triggerElementEnter) {
            if ( conditionMouseOut(boundingEl, e) ) {
                Core.prototype.editingText = false;

                el.removeEventListener('click', _this._wrapEvetClickEditElement);

                // if (
                //     _this.getPageMode() !== 'page-mode-edit-sections'
                //     && editElement.draggableMode
                //     && Core.prototype.drGAndDropEl
                // ) {
                //     Core.prototype.drGAndDropEl.destroy();
                //     Core.prototype.drGAndDropEl = null;
                // }

                // _this.removeNowrapSuperStructure(_this.documentIframe);
                var editedElements = _this.documentIframe.querySelectorAll('.spr-outline-control, .spr-child-active');
                if (editedElements.length > 0) {
                    Array.prototype.forEach.call(editedElements, function(el) {
                            el.classList.remove('spr-outline-control');
                            el.classList.remove('spr-child-active');
                    });
                }

                _this.documentIframe.removeEventListener('mousemove', _this._wrapEvetMouseOutEditElement);

                Core.prototype._triggerElementEnter = false;
                Core.prototype.activeEditElement = null;

                if (editElement.editType === '-icons') {
                    var navLi = controls.findParent(el, ['sub-menu', 'mega-menu-container']);
                    if (navLi) navLi.classList.add('spr-child-active');
                }
            }
        }
    }
    , _addSimulationHoverEffect: function (li, current) {
        var _this = this;

        if (_this.clickOnBreadcrumbs) return;

        simulateCssEvent('stop', null, _this.documentIframe);
        var editedElements = _this.getActivePageObject().getDOMSelf().querySelectorAll('.spr-hover');
        if (editedElements.length > 0) {
            Array.prototype.forEach.call(editedElements, function(el) {
                el.classList.remove('spr-hover');
            });
        }
        simulateCssEvent('hover', 'css/lib/bootstrap.weber.css', _this.documentIframe);

        //TODO: temporarily
        while(current && current !== li) {
            current.classList.add('spr-hover');

            current = current.parentElement;
        }
    }
    , _removeSimulationHoverEffectListener: function(li) {
        var _this = this;
        document.removeEventListener('click', _this._clickOnDocumentIframeEditElementMode);
        _this.documentIframe.removeEventListener('click', _this._clickOnDocumentIframeEditElementMode);

        _this._clickOnDocumentIframeEditElementMode = function (e) {
            if (_this.clickOnBreadcrumbs && _this.stopRemoveHoverEffect) return;

            Core.prototype.activeEditElement = null;
            Core.prototype._triggerElementEnter = false;
            _this.removeNowrapSuperStructure(_this.documentIframe);
            simulateCssEvent('stop', null, _this.documentIframe);

            var editedElements = li.querySelectorAll('.spr-hover');
            if (editedElements.length > 0) {
                Array.prototype.forEach.call(editedElements, function(el) {
                    el.classList.remove('spr-hover');
                });
            }
        };

        // document.addEventListener('click', _this._clickOnDocumentIframeEditElementMode);
        _this.documentIframe.addEventListener('click', _this._clickOnDocumentIframeEditElementMode);
    }
    , _setBreadcrumbs: function (li, current) {
        var _this = this;
        var breadcrumbs = document.body.querySelector('.breadcrumbs');
        if (breadcrumbs)
            breadcrumbs.parentElement.removeChild(breadcrumbs);

        breadcrumbs = document.createElement('div');
        breadcrumbs.className = 'breadcrumbs';

        var idx = 0;
        while(current !== li) {
            if (
                current
                && (
                        current.classList.contains('spr-edit-el')
                    )
                ) {

                var item = document.createElement('span');
                var name = current.classList[0] && !/spr-/.test(current.classList[0])
                    ? current.tagName.toLowerCase() + '.' + current.classList[0]
                    : current.tagName.toLowerCase();
                item.innerHTML = name;
                breadcrumbs.appendChild(item);

                if (idx > 0) {
                    item.dataset.idx = idx;
                    current.classList.add('spr-p-' + idx);

                    item.addEventListener('mouseenter', function() {
                        var parent = _this.documentIframe.querySelector('.spr-p-' + this.dataset.idx);
                        var event = new MouseEvent('mouseover', {
                            'view': window,
                            'bubbles': true,
                            'cancelable': true,
                            'target': parent
                        });

                        var canceled = !parent.dispatchEvent(event);
                    });

                    item.addEventListener('mouseleave', function() {
                        var parent = _this.documentIframe.querySelector('.spr-p-' + this.dataset.idx);
                        var event = new MouseEvent('mousemove', {
                            'view': window,
                            'bubbles': true,
                            'cancelable': true,
                            'target': parent
                        });

                        var canceled = !parent.dispatchEvent(event);
                    });

                    item.addEventListener('click', function() {
                        var parent = _this.documentIframe.querySelector('.spr-p-' + this.dataset.idx);
                        var event = new MouseEvent('click', {
                            'view': window,
                            'bubbles': true,
                            'cancelable': true,
                            'target': parent
                        });

                        _this.clickOnBreadcrumbs = true;

                        setTimeout(function () {
                            _this.clickOnBreadcrumbs = false;
                        }, 100);

                        var canceled = !parent.dispatchEvent(event);
                    });
                } else {
                    item.addEventListener('click', function() {
                        _this.clickOnBreadcrumbs = true;

                        setTimeout(function () {
                            _this.clickOnBreadcrumbs = false;
                        }, 100);
                    });
                }

            }

            idx++;

            current = current.parentElement;
        }

        document.body.appendChild(breadcrumbs);
    }
    , _setControlsForSection: function (li, el, editElement, classNameAdd) {
        var _this = this;
        if (_this.leftPanel.cPanels['sections'].isSectionDraged()) return;

        _this.removeNowrapSuperStructure(_this.documentIframe, null, 'without-spr-child');
        el.classList.add('spr-oc-show');

        var controlGroup = new ControlDOMSections(
            {
                controlsElements: editElement.controlsElements
                , settingsSection: editElement.settingsSection
            }
            , el
            , 'btn-group nowrap' + classNameAdd
            , null
        );

        var boundingEl = el.getBoundingClientRect();
        var boundingLi = li.getBoundingClientRect();
        // if (li.dataset.group === 'navigations') {
        //     boundingLi = li.children[0].getBoundingClientRect();
        // }
        // var topEl = boundingEl.top - 2;
        var topEl = boundingEl.top;
        var bottomEl = boundingEl.bottom;
        var leftEl = boundingEl.left;
        var rightEl = boundingEl.right;
        var heightEl = boundingEl.height;
        var topLi = boundingLi.top;
        var leftLi = boundingLi.left;
        var bottomLi = boundingLi.bottom;

        var CS = window.getComputedStyle(el, null);
        var liCS = window.getComputedStyle(el, null);

        var absoluteTop = topEl;

        if (
            CS.getPropertyValue("position") === 'static'
            || CS.getPropertyValue("position") === 'relative'
            || li.dataset.group === 'separators'
        ) {
            if (li.dataset.group !== 'navigations') absoluteTop = topEl - topLi;

            if (
                liCS.getPropertyValue("position") === 'static'
                || li.dataset.group === 'navigations'
            ) {
                absoluteTop = el.offsetTop;
            }
            var absoluteLeft = leftEl - leftLi;
            var absoluteBottom = bottomEl - bottomLi;

            controlGroup.style.top = absoluteTop + 'px';
            controlGroup.style.left = absoluteLeft + 'px';
            controlGroup.style.bottom = absoluteBottom + 'px';
            controlGroup.style.right = _this.documentIframe.body.clientWidth - rightEl + 'px';
            controlGroup.style.height = heightEl + 'px';
        } else {
            var absoluteBottom = _this.windowIframe.innerHeight - bottomEl;
            if (
                liCS.getPropertyValue("position") === 'absolute'
                && CS.getPropertyValue("position") === 'absolute'
            ) {
                absoluteTop = el.offsetTop;
                absoluteBottom = _this.windowIframe.innerHeight - heightEl;
            }
            controlGroup.style.top = absoluteTop + 'px';
            controlGroup.style.left = leftEl + 'px';
            controlGroup.style.bottom = absoluteBottom + 'px';
            controlGroup.style.right = _this.documentIframe.body.clientWidth - rightEl + 'px';
            controlGroup.style.height = 'auto';
            controlGroup.style.position = CS.getPropertyValue("position");
        }


        controlGroup.style.opacity = 1;
        li.appendChild(controlGroup);

        _this.leftPanel.cPanels['sections'].listenerSectionsMouseDown(li);
    }
    /**
     * Set listeners from control buttons
     */
    , setListenersCB: function () {
        document.addEventListener('element.settings.change', this.listenerElementSettingsChange.bind(this));
    }
    , listenerElementSettingsChange: function (e) {
        var masonryFilter = this.findParent(e.detail.Obj, ['masonry-filter']);

        if (masonryFilter)
            this.windowIframe.jQuery(masonryFilter).data('masonry.filter').refresh();
    }
});

Builder.prototype.constructor = Builder;
var port = location.port !== "" ? ':' + location.port : '';
var baseUri = location.protocol + '//' + location.hostname + port + location.pathname.replace(/index.php/, '');

var builder = null;
document.addEventListener('DOMContentLoaded', function () {
    builder = new Builder({
    });
});
